[{"path":"https://nlmixr2.github.io/nlmixr2est/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Fidler. Author, maintainer. Yuan Xiong. Author. Rik Schoemaker. Author. Justin Wilkins. Author. Wenping Wang. Author. Robert Leary. Contributor. Mason McComb. Contributor. Vipul Mann. Author. Mirjam Trame. Contributor. Mahmoud Abdelwahab. Contributor. Teun Post. Contributor. Richard Hooijmaijers. Author. Hadley Wickham. Contributor. Dirk Eddelbuettel. Copyright holder. Johannes Pfeifer. Contributor. Robert B. Schnabel. Contributor. Elizabeth Eskow. Contributor. Emmanuelle Comets. Contributor. Audrey Lavenu. Contributor. Marc Lavielle. Contributor. David Ardia. Copyright holder. Katharine Mullen. Copyright holder. Ben Goodrich. Contributor.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fidler M, Xiong Y, Schoemaker R, Wilkins J, Trame M, Hooijmaijers R, Post T, Wang W (2025). nlmixr: Nonlinear Mixed Effects Models Population Pharmacokinetics Pharmacodynamics. R package version 3.0.4, https://CRAN.R-project.org/package=nlmixr. Fidler M, Wilkins J, Hooijmaijers R, Post T, Schoemaker R, Trame M, Xiong Y, Wang W (2019). “Nonlinear Mixed-Effects Model Development Simulation Using nlmixr Related R Open-Source Packages.” CPT: Pharmacometrics & Systems Pharmacology, 8(9), 621–633. https://doi.org/10.1002/psp4.12445. Schoemaker R, Fidler M, Laveille C, Wilkins J, Hooijmaijers R, Post T, Trame M, Xiong Y, Wang W (2019). “Performance SAEM FOCEI Algorithms Open-Source, Nonlinear Mixed Effect Modeling Tool nlmixr.” CPT: Pharmacometrics & Systems Pharmacology, 8(12), 923–930. https://doi.org/10.1002/psp4.12471.","code":"@Manual{,   title = {{nlmixr}: Nonlinear Mixed Effects Models in Population Pharmacokinetics and Pharmacodynamics},   author = {Matthew Fidler and Yuan Xiong and Rik Schoemaker and Justin Wilkins and Mirjam Trame and Richard Hooijmaijers and Teun Post and Wenping Wang},   year = {2025},   note = {R package version 3.0.4},   url = {https://CRAN.R-project.org/package=nlmixr}, } @Article{,   title = {Nonlinear Mixed-Effects Model Development and Simulation Using nlmixr and Related R Open-Source Packages},   author = {Matthew Fidler and Justin Wilkins and Richard Hooijmaijers and Teun Post and Rik Schoemaker and Mirjam Trame and Yuan Xiong and Wenping Wang},   journal = {CPT: Pharmacometrics \\& Systems Pharmacology},   year = {2019},   volume = {8},   pages = {621--633},   number = {9},   month = {sep},   abstract = {nlmixr is a free and open-source R package for fitting nonlinear pharmacokinetic (PK), pharmacodynamic (PD), joint PK-PD, and quantitative systems pharmacology mixed-effects models. Currently, nlmixr is capable of fitting both traditional compartmental PK models as well as more complex models implemented using ordinary differential equations. We believe that, over time, it will become a capable, credible alternative to commercial software tools, such as NONMEM, Monolix, and Phoenix NLME.},   address = {Hoboken},   publisher = {John Wiley and Sons Inc.},   url = {https://doi.org/10.1002/psp4.12445}, } @Article{,   title = {Performance of the SAEM and FOCEI Algorithms in the Open-Source, Nonlinear Mixed Effect Modeling Tool nlmixr},   author = {Rik Schoemaker and Matthew Fidler and Christian Laveille and Justin Wilkins and Richard Hooijmaijers and Teun Post and Mirjam Trame and Yuan Xiong and Wenping Wang},   journal = {CPT: Pharmacometrics \\& Systems Pharmacology},   year = {2019},   volume = {8},   pages = {923--930},   number = {12},   month = {dec},   abstract = {The free and open-source package nlmixr implements pharmacometric nonlinear mixed effects model parameter estimation in R. It provides a uniform language to define pharmacometric models using ordinary differential equations. Performances of the stochastic approximation expectation-maximization (SAEM) and first order-conditional estimation with interaction (FOCEI) algorithms in nlmixr were compared with those found in the industry standards, Monolix and NONMEM, using the following two scenarios: a simple model fit to 500 sparsely sampled data sets and a range of more complex compartmental models with linear and nonlinear clearance fit to data sets with rich sampling. Estimation results obtained from nlmixr for FOCEI and SAEM matched the corresponding output from NONMEM/FOCEI and Monolix/SAEM closely both in terms of parameter estimates and associated standard errors. These results indicate that nlmixr may provide a viable alternative to existing tools for pharmacometric parameter estimation.},   url = {https://doi.org/10.1002/psp4.12471}, }"},{"path":"https://nlmixr2.github.io/nlmixr2est/index.html","id":"nlmixr2est-the-core-estimation-routines-for-nlmixr2","dir":"","previous_headings":"","what":"Nonlinear Mixed Effects Models in Population PK/PD, Estimation Routines","title":"Nonlinear Mixed Effects Models in Population PK/PD, Estimation Routines","text":"goal nlmixr2est provide nlmixr2 core estimation routines.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Nonlinear Mixed Effects Models in Population PK/PD, Estimation Routines","text":"can install development version nlmixr2est GitHub : people, using nlmixr2 directly likely easier.","code":"# install.packages(\"remotes\") remotes::install_github(\"nlmixr2/rxode2\") remotes::install_github(\"nlmixr2/nlmixr2data\") remotes::install_github(\"nlmixr2/lotri\") remotes::install_github(\"nlmixr2/nlmixr2est\") library(nlmixr2est) #> Loading required package: nlmixr2data  ## The basic model consists of an ini block that has initial estimates one.compartment <- function() {   ini({     tka <- 0.45; label(\"Ka\")     tcl <- 1; label(\"Cl\")     tv <- 3.45; label(\"V\")     eta.ka ~ 0.6     eta.cl ~ 0.3     eta.v ~ 0.1     add.sd <- 0.7   })   # and a model block with the error specification and model specification   model({     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     d/dt(depot) = -ka * depot     d/dt(center) = ka * depot - cl / v * center     cp = center / v     cp ~ add(add.sd)   }) }  ## The fit is performed by the function nlmixr/nlmixr2 specifying the model, data and estimate fit <- nlmixr2(one.compartment, theo_sd,  est=\"saem\", saemControl(print=0)) #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> → optimizing duplicate expressions in saem model... #> [====|====|====|====|====|====|====|====|====|====] 0:00:00 #> ✔ done #> using C compiler: 'gcc.exe (GCC) 13.2.0' #> ℹ calculate uninformed etas #> ℹ done #> rxode2 3.0.2 using 8 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` #>  #> Attaching package: 'rxode2' #> The following objects are masked from 'package:nlmixr2est': #>  #>     boxCox, yeoJohnson #> Calculating covariance matrix #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem predOnly model 0... #> → finding duplicate expressions in saem predOnly model 1... #> → optimizing duplicate expressions in saem predOnly model 1... #> → finding duplicate expressions in saem predOnly model 2... #> ✔ done #> using C compiler: 'gcc.exe (GCC) 13.2.0' #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress phiM in nlmixr2 object, save 63504 #> → compress parHistData in nlmixr2 object, save 13928 #> → compress saem0 in nlmixr2 object, save 30456  # Since the fit is performed in `nlmixr2est` this code works print(fit) #> ── nlmixr² SAEM OBJF by FOCEi approximation ── #>  #>  Gaussian/Laplacian Likelihoods: AIC() or $objf etc.  #>  FOCEi CWRES & Likelihoods: addCwres()  #>  #> ── Time (sec $time): ── #>  #>         setup covariance saem table compress other #> elapsed 0.003       0.03 11.5  0.29     0.27 6.787 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>        Parameter  Est.     SE %RSE Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> tka           Ka 0.464  0.195   42       1.59 (1.09, 2.33)     71.1   -0.0900%  #> tcl           Cl  1.01  0.085 8.43       2.74 (2.32, 3.24)     27.4      4.80%  #> tv             V  3.46 0.0447 1.29         31.7 (29, 34.6)     13.1      8.77%  #> add.sd           0.696                               0.696                      #>   #>   Covariance Type ($covMethod): linFim #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 132 × 19 #>   ID     TIME    DV  PRED    RES IPRED   IRES  IWRES eta.ka eta.cl   eta.v    cp #>   <fct> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl> #> 1 1      0     0.74  0     0.74   0     0.74   1.06  0.0839 -0.477 -0.0849  0    #> 2 1      0.25  2.84  3.28 -0.437  3.83 -0.991 -1.42  0.0839 -0.477 -0.0849  3.83 #> 3 1      0.57  6.57  5.86  0.715  6.76 -0.194 -0.278 0.0839 -0.477 -0.0849  6.76 #> # ℹ 129 more rows #> # ℹ 7 more variables: depot <dbl>, center <dbl>, ka <dbl>, cl <dbl>, v <dbl>, #> #   tad <dbl>, dosenum <dbl>  # But plots are in the helper package `nlmixr2plot`, and therefore: plot(fit) # does not give the standard goodness of fit plots"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addCwres.html","id":null,"dir":"Reference","previous_headings":"","what":"Add CWRES — addCwres","title":"Add CWRES — addCwres","text":"returns new fit object CWRES attached","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addCwres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add CWRES — addCwres","text":"","code":"addCwres(fit, focei = TRUE, updateObject = TRUE, envir = parent.frame(1))"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addCwres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add CWRES — addCwres","text":"fit nlmixr2 fit without WRES/CWRES focei Boolean indicating focei objective function added.  foce objective function added. updateObject Boolean indicating original fit object updated. default true. envir Environment checked object update.  default global environment.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addCwres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add CWRES — addCwres","text":"fit CWRES","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addCwres.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add CWRES — addCwres","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addCwres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add CWRES — addCwres","text":"","code":"# \\donttest{  one.cmt <- function() {   ini({     ## You may label each parameter with a comment     tka <- 0.45 # Log Ka     tcl <- log(c(0, 2.7, 100)) # Log Cl     ## This works with interactive models     ## You may also label the preceding line with label(\"label text\")     tv <- 3.45; label(\"log V\")     ## the label(\"Label name\") works with all models     eta.ka ~ 0.6     eta.cl ~ 0.3     eta.v ~ 0.1     add.sd <- 0.7   })   model({     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     linCmt() ~ add(add.sd)   }) }  f <- try(nlmixr2(one.cmt, theo_sd, \"saem\")) #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem model... #> ✔ done #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ℹ calculate uninformed etas #> ℹ done #> params:\ttka\ttcl\ttv\tV(eta.ka)\tV(eta.cl)\tV(eta.v)\tadd.sd #> rxode2 3.0.4.9000 using 2 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` #>  #> Attaching package: ‘rxode2’ #> The following objects are masked from ‘package:nlmixr2est’: #>  #>     boxCox, yeoJohnson #> Calculating covariance matrix #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem predOnly model 0... #> → finding duplicate expressions in saem predOnly model 1... #> → finding duplicate expressions in saem predOnly model 2... #> ✔ done #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress phiM in nlmixr2 object, save 63664 #> → compress parHistData in nlmixr2 object, save 13816 #> → compress saem0 in nlmixr2 object, save 28168  print(f) #> ── nlmixr² SAEM OBJF by FOCEi approximation ── #>  #>  Gaussian/Laplacian Likelihoods: AIC() or $objf etc.  #>  FOCEi CWRES & Likelihoods: addCwres()  #>  #> ── Time (sec $time): ── #>  #>            setup covariance  saem table compress    other #> elapsed 0.001707   0.049005 2.186  0.27    0.019 2.576288 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>        Parameter  Est.     SE %RSE Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> tka              0.453  0.195 43.1       1.57 (1.07, 2.31)     71.4    -0.445%  #> tcl               1.02 0.0843 8.29       2.76 (2.34, 3.26)     27.2      3.88%  #> tv         log V  3.45 0.0467 1.35       31.5 (28.8, 34.5)     13.9      10.2%  #> add.sd           0.695                               0.695                      #>   #>   Covariance Type ($covMethod): linFim #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Information about run found ($runInfo): #>    • 'one.cmt' has the following user-defined boundaries: tcl which are ignored in 'saem'  #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 132 × 16 #>   ID     TIME    DV  PRED    RES IPRED   IRES  IWRES eta.ka eta.cl   eta.v    ka #>   <fct> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl> #> 1 1      0     0.74  0     0.74   0     0.74   1.07   0.107 -0.485 -0.0809  1.75 #> 2 1      0.25  2.84  3.26 -0.424  3.87 -1.03  -1.49   0.107 -0.485 -0.0809  1.75 #> 3 1      0.57  6.57  5.84  0.726  6.82 -0.250 -0.360  0.107 -0.485 -0.0809  1.75 #> # ℹ 129 more rows #> # ℹ 4 more variables: cl <dbl>, v <dbl>, tad <dbl>, dosenum <dbl>  # even though you may have forgotten to add the cwres, you can add it to the data.frame:  if (!inherits(f, \"try-error\")) {   f <- try(addCwres(f))   print(f) } #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(η) #> → calculate ∂(R²)/∂(η) #> → finding duplicate expressions in inner model... #> → optimizing duplicate expressions in inner model... #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling inner model... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → finding duplicate expressions in FD model... #> → compiling EBE model... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → compiling events FD model... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → Calculating residuals/tables #> ✔ done #> ── nlmixr² SAEM OBJF by FOCEi approximation ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> FOCEi 116.9949 373.5947 393.7743      -179.7973        18.15903        1.404028 #>  #> ── Time (sec $time): ── #>  #>            setup covariance  saem table compress    other #> elapsed 0.001707   0.049005 2.186  0.27    0.019 2.576288 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>        Parameter  Est.     SE %RSE Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> tka              0.453  0.195 43.1       1.57 (1.07, 2.31)     71.4    -0.445%  #> tcl               1.02 0.0843 8.29       2.76 (2.34, 3.26)     27.2      3.88%  #> tv         log V  3.45 0.0467 1.35       31.5 (28.8, 34.5)     13.9      10.2%  #> add.sd           0.695                               0.695                      #>   #>   Covariance Type ($covMethod): linFim #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Information about run found ($runInfo): #>    • 'one.cmt' has the following user-defined boundaries: tcl which are ignored in 'saem'  #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 132 × 20 #>   ID     TIME    DV  PRED    RES IPRED   IRES  IWRES eta.ka eta.cl   eta.v    ka #>   <fct> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl> #> 1 1      0     0.74  0     0.74   0     0.74   1.07   0.107 -0.485 -0.0809  1.75 #> 2 1      0.25  2.84  3.26 -0.424  3.87 -1.03  -1.49   0.107 -0.485 -0.0809  1.75 #> 3 1      0.57  6.57  5.84  0.726  6.82 -0.250 -0.360  0.107 -0.485 -0.0809  1.75 #> # ℹ 129 more rows #> # ℹ 8 more variables: cl <dbl>, v <dbl>, tad <dbl>, dosenum <dbl>, WRES <dbl>, #> #   CPRED <dbl>, CRES <dbl>, CWRES <dbl>  # Note this also adds the FOCEi objective function # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addNpde.html","id":null,"dir":"Reference","previous_headings":"","what":"NPDE calculation for nlmixr2 — addNpde","title":"NPDE calculation for nlmixr2 — addNpde","text":"NPDE calculation nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addNpde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPDE calculation for nlmixr2 — addNpde","text":"","code":"addNpde(   object,   updateObject = TRUE,   table = tableControl(),   ...,   envir = parent.frame(1) )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addNpde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPDE calculation for nlmixr2 — addNpde","text":"object nlmixr2 fit object updateObject Boolean indicating original object updated.  default TRUE. table `tableControl()` list options ... ignored parameters. envir Environment checked object update.  default global environment.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addNpde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPDE calculation for nlmixr2 — addNpde","text":"New nlmixr2 fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addNpde.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"NPDE calculation for nlmixr2 — addNpde","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addNpde.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NPDE calculation for nlmixr2 — addNpde","text":"","code":"# \\donttest{  one.cmt <- function() {   ini({     ## You may label each parameter with a comment     tka <- 0.45 # Log Ka     tcl <- log(c(0, 2.7, 100)) # Log Cl     ## This works with interactive models     ## You may also label the preceding line with label(\"label text\")     tv <- 3.45; label(\"log V\")     ## the label(\"Label name\") works with all models     eta.ka ~ 0.6     eta.cl ~ 0.3     eta.v ~ 0.1     add.sd <- 0.7   })   model({     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     linCmt() ~ add(add.sd)   }) }  f <- nlmixr2(one.cmt, theo_sd, \"saem\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem model... #> ✔ done #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ℹ calculate uninformed etas #> ℹ done #> params:\ttka\ttcl\ttv\tV(eta.ka)\tV(eta.cl)\tV(eta.v)\tadd.sd #> Calculating covariance matrix #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem predOnly model 0... #> → finding duplicate expressions in saem predOnly model 1... #> → finding duplicate expressions in saem predOnly model 2... #> ✔ done #>   #>   #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress phiM in nlmixr2 object, save 63664 #> → compress parHistData in nlmixr2 object, save 13816 #> → compress saem0 in nlmixr2 object, save 28256  # even though you may have forgotten to add the NPDE, you can add it to the data.frame:  f <- addNpde(f) #> → Add NPDE #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done  # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Add table information to nlmixr2 fit object without tables — addTable","title":"Add table information to nlmixr2 fit object without tables — addTable","text":"Add table information nlmixr2 fit object without tables","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add table information to nlmixr2 fit object without tables — addTable","text":"","code":"addTable(   object,   updateObject = FALSE,   data = object$dataSav,   thetaEtaParameters = object$foceiThetaEtaParameters,   table = tableControl(),   keep = NULL,   drop = NULL,   envir = parent.frame(1) )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add table information to nlmixr2 fit object without tables — addTable","text":"object nlmixr2 family objects updateObject Update object (default FALSE) data Saved data thetaEtaParameters Internal theta/eta parameters table `tableControl()` list options keep Character Vector items keep drop Character Vector items drop NULL envir Environment search updating","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add table information to nlmixr2 fit object without tables — addTable","text":"Fit table information attached","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addTable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add table information to nlmixr2 fit object without tables — addTable","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/addTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add table information to nlmixr2 fit object without tables — addTable","text":"","code":"# \\donttest{  one.cmt <- function() {   ini({     ## You may label each parameter with a comment     tka <- 0.45 # Log Ka     tcl <- log(c(0, 2.7, 100)) # Log Cl     ## This works with interactive models     ## You may also label the preceding line with label(\"label text\")     tv <- 3.45; label(\"log V\")     ## the label(\"Label name\") works with all models     eta.ka ~ 0.6     eta.cl ~ 0.3     eta.v ~ 0.1     add.sd <- 0.7   })   model({     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     linCmt() ~ add(add.sd)   }) }  # run without tables step f <- nlmixr2(one.cmt, theo_sd, \"saem\", control=list(calcTables=FALSE)) #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem model... #> ✔ done #> ℹ calculate uninformed etas #> ℹ done #> params:\ttka\ttcl\ttv\tV(eta.ka)\tV(eta.cl)\tV(eta.v)\tadd.sd #> Calculating covariance matrix #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem predOnly model 0... #> → finding duplicate expressions in saem predOnly model 1... #> → finding duplicate expressions in saem predOnly model 2... #> ✔ done #>   #>   #> → compress origData in nlmixr2 object, save 5952 #> → compress phiM in nlmixr2 object, save 63664 #> → compress parHistData in nlmixr2 object, save 13816 #> → compress saem0 in nlmixr2 object, save 29808  print(f) #> ── nlmixr² SAEM OBJF by FOCEi approximation ── #>  #>  Gaussian/Laplacian Likelihoods: AIC() or $objf etc.  #>  FOCEi CWRES & Likelihoods: addCwres()  #>  #> ── Time (sec $time): ── #>  #>            setup covariance  saem compress    other #> elapsed 0.001638   0.009005 1.557    0.021 1.461357 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>        Parameter  Est.     SE %RSE Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> tka              0.453  0.195 43.1       1.57 (1.07, 2.31)     71.4    -0.445%  #> tcl               1.02 0.0843 8.29       2.76 (2.34, 3.26)     27.2      3.88%  #> tv         log V  3.45 0.0467 1.35       31.5 (28.8, 34.5)     13.9      10.2%  #> add.sd           0.695                               0.695                      #>   #>   Covariance Type ($covMethod): linFim #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Information about run found ($runInfo): #>    • 'one.cmt' has the following user-defined boundaries: tcl which are ignored in 'saem'  #>   Censoring ($censInformation): No censoring  # Now add the tables  f <- addTable(f) #> → Calculating residuals/tables #> ✔ done  print(f) #> ── nlmixr² SAEM OBJF by FOCEi approximation ── #>  #>  Gaussian/Laplacian Likelihoods: AIC() or $objf etc.  #>  FOCEi CWRES & Likelihoods: addCwres()  #>  #> ── Time (sec $time): ── #>  #>            setup covariance  saem compress    other #> elapsed 0.001638   0.009005 1.557    0.021 1.461357 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>        Parameter  Est.     SE %RSE Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> tka              0.453  0.195 43.1       1.57 (1.07, 2.31)     71.4    -0.445%  #> tcl               1.02 0.0843 8.29       2.76 (2.34, 3.26)     27.2      3.88%  #> tv         log V  3.45 0.0467 1.35       31.5 (28.8, 34.5)     13.9      10.2%  #> add.sd           0.695                               0.695                      #>   #>   Covariance Type ($covMethod): linFim #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Information about run found ($runInfo): #>    • 'one.cmt' has the following user-defined boundaries: tcl which are ignored in 'saem'  #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 132 × 16 #>   ID     TIME    DV  PRED    RES IPRED   IRES  IWRES eta.ka eta.cl   eta.v    ka #>   <fct> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl> #> 1 1      0     0.74  0     0.74   0     0.74   1.07   0.107 -0.485 -0.0809  1.75 #> 2 1      0.25  2.84  3.26 -0.424  3.87 -1.03  -1.49   0.107 -0.485 -0.0809  1.75 #> 3 1      0.57  6.57  5.84  0.726  6.82 -0.250 -0.360  0.107 -0.485 -0.0809  1.75 #> # ℹ 129 more rows #> # ℹ 4 more variables: cl <dbl>, v <dbl>, tad <dbl>, dosenum <dbl>  # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that this is a nlmixr2 fit object — assertNlmixrFit","title":"Assert that this is a nlmixr2 fit object — assertNlmixrFit","text":"error without nlmixr2 fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that this is a nlmixr2 fit object — assertNlmixrFit","text":"","code":"assertNlmixrFit(fit)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that this is a nlmixr2 fit object — assertNlmixrFit","text":"fit Fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that this is a nlmixr2 fit object — assertNlmixrFit","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assert that this is a nlmixr2 fit object — assertNlmixrFit","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that this is a nlmixr2 fit object — assertNlmixrFit","text":"","code":"if (FALSE) { # \\dontrun{  f <- 4 assertNlmixrFit(f) # throw error  } # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFitData.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that this is a nlmixr2 fit data object — assertNlmixrFitData","title":"Assert that this is a nlmixr2 fit data object — assertNlmixrFitData","text":"error without nlmixr2 fit data object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFitData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that this is a nlmixr2 fit data object — assertNlmixrFitData","text":"","code":"assertNlmixrFitData(fit)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFitData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert that this is a nlmixr2 fit data object — assertNlmixrFitData","text":"fit Fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFitData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert that this is a nlmixr2 fit data object — assertNlmixrFitData","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFitData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assert that this is a nlmixr2 fit data object — assertNlmixrFitData","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/assertNlmixrFitData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert that this is a nlmixr2 fit data object — assertNlmixrFitData","text":"","code":"if (FALSE) { # \\dontrun{  f <- 4 assertNlmixrFitData(f) # throw errors  } # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/bobyqaControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for bobyqa estimation method in nlmixr2 — bobyqaControl","title":"Control for bobyqa estimation method in nlmixr2 — bobyqaControl","text":"Control bobyqa estimation method nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/bobyqaControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for bobyqa estimation method in nlmixr2 — bobyqaControl","text":"","code":"bobyqaControl(   npt = NULL,   rhobeg = NULL,   rhoend = NULL,   iprint = 0L,   maxfun = 100000L,   returnBobyqa = FALSE,   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/bobyqaControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for bobyqa estimation method in nlmixr2 — bobyqaControl","text":"npt number points used approximate objective function via quadratic approximation. value npt must interval [n+2,(n+1)(n+2)/2] n number parameters `par`. Choices exceed 2*n+1 recommended.  defined, set min(n * 2, n+2). rhobeg `rhobeg` `rhoend` must set initial final values trust region radius, must positive `0 < rhoend < rhobeg`. Typically `rhobeg` one tenth greatest expected change variable.  user provide value, set `min(0.95, 0.2 * max(abs(par)))`.  Note also smallest difference `abs(upper-lower)` greater equal `rhobeg*2`. case `rhobeg` adjusted. rhoend smallest value trust region radius allowed. defined, 1e-6 times value set `rhobeg` used. iprint value `iprint` set integer value `0, 1, 2, 3, ...`, controls amount printing.  Specifically, output `iprint=0` output start return `iprint=1`. Otherwise, new value `rho` printed, best vector variables far corresponding value objective function. , new value objective function variables output `iprint=3`.  `iprint > 3`, objective function value corresponding variables output every `iprint` evaluations.  Default value `0`. maxfun maximum allowed number function evaluations. exceeded, method terminate. returnBobyqa return bobyqa output instead nlmixr2 fit stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual     gradient cross-product (evaluated individual empirical     Bayes estimates). \"r,s\" Uses sandwich matrix calculate  covariance, : solve(R) %*% S %*% solve(R) \"r\" Uses Hessian matrix calculate  covariance 2 %*% solve(R) \"s\" Uses cross-product matrix calculate  covariance 4 %*% solve(S) \"\" calculate covariance step. adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/bobyqaControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for bobyqa estimation method in nlmixr2 — bobyqaControl","text":"bobqya control structure","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/bobyqaControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control for bobyqa estimation method in nlmixr2 — bobyqaControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/bobyqaControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control for bobyqa estimation method in nlmixr2 — bobyqaControl","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"bobyqa\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → loading llik model into symengine environment... #> → finding duplicate expressions in population log-likelihood model... #> → optimizing duplicate expressions in population log-likelihood model... #> ✔ done #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9096 #> → compress parHistData in nlmixr2 object, save 15552  print(fit2) #> ── nlmixr² log-likelihood bobyqa ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -681.2477 1162.629 1177.353      -578.3147        197.8405        48.07442 #>  #> ── Time (sec $time): ── #>  #>            setup table compress    other #> elapsed 0.003338 0.038     0.01 2.599662 #>  #> ── ($parFixed or $parFixedDf): ── #>  #>        Est.     SE  %RSE   Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.7442 0.2571 34.54 -0.7442 (-1.248, -0.2404)                     #> Em    4.627  1.575 34.04       4.627 (1.54, 7.714)                     #> E50   2.376 0.9338  39.3     2.376 (0.5458, 4.206)                     #> g         2  FIXED FIXED                         2                     #>   #>   Covariance Type ($covMethod): r #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0304     1 -1.13  -0.743 #> 2 1     0.0320     0 -0.389 -0.743 #> 3 1     0.0329     0 -0.389 -0.743 #> # ℹ 997 more rows  # you can also get the nlm output with  fit2$bobyqa #> parameter estimates: -0.744249036396639, 4.62703353089203, 2.37602005800094  #> objective: 578.314687574017  #> number of function evaluations: 238   # The nlm control has been modified slightly to include # extra components and name the parameters # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/boxCox.html","id":null,"dir":"Reference","previous_headings":"","what":"Cox Box, Yeo Johnson and inverse transformation — boxCox","title":"Cox Box, Yeo Johnson and inverse transformation — boxCox","text":"Cox Box, Yeo Johnson inverse transformation","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/boxCox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cox Box, Yeo Johnson and inverse transformation — boxCox","text":"","code":"boxCox(x, lambda = 1)  iBoxCox(x, lambda = 1)  yeoJohnson(x, lambda = 1)  iYeoJohnson(x, lambda = 1)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/boxCox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cox Box, Yeo Johnson and inverse transformation — boxCox","text":"x data transform lambda Cox-box lambda parameter","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/boxCox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cox Box, Yeo Johnson and inverse transformation — boxCox","text":"Cox-Box Transformed Data","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/boxCox.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cox Box, Yeo Johnson and inverse transformation — boxCox","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/boxCox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cox Box, Yeo Johnson and inverse transformation — boxCox","text":"","code":"boxCox(1:3,1) ## Normal #> [1] 0 1 2 iBoxCox(boxCox(1:3,1)) #> [1] 1 2 3  boxCox(1:3,0) ## Log-Normal #> [1] 0.0000000 0.6931472 1.0986123 iBoxCox(boxCox(1:3,0),0) #> [1] 1 2 3  boxCox(1:3,0.5) ## lambda=0.5 #> [1] 0.0000000 0.8284271 1.4641016 iBoxCox(boxCox(1:3,0.5),0.5) #> [1] 1 2 3  yeoJohnson(seq(-3,3),1) ## Normal #> [1] -3 -2 -1  0  1  2  3 iYeoJohnson(yeoJohnson(seq(-3,3),1)) #> [1] -3 -2 -1  0  1  2  3  yeoJohnson(seq(-3,3),0) #> [1] -7.5000000 -4.0000000 -1.5000000  0.0000000  0.6931472  1.0986123  1.3862944 iYeoJohnson(yeoJohnson(seq(-3,3),0),0) #> [1] -3 -2 -1  0  1  2  3"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized Cholesky Matrix Decomposition — cholSE","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"Performs (modified) Cholesky factorization form","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"","code":"cholSE(matrix, tol = (.Machine$double.eps)^(1/3))"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"matrix Matrix Factorized. tol Tolerance; Algorithm suggests (.Machine$double.eps) ^ (1 / 3), default","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"Generalized Cholesky decomposed matrix.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"t(P) %*% %*% P  + E = t(R) %*% R detailed Schnabel/Eskow (1990)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"version pivot return E matrix","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"matlab source: http://www.dynare.org/dynare-matlab-m2html/matlab/chol_SE.html; Slightly different return values Robert B. Schnabel Elizabeth Eskow. 1990. \"New Modified Cholesky Factorization,\" SIAM Journal Scientific Statistical Computing, 11, 6: 1136-58. Elizabeth Eskow Robert B. Schnabel 1991. \"Algorithm 695 - Software New Modified Cholesky Factorization,\" ACM Transactions Mathematical Software, Vol 17, 3: 306-312","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/cholSE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized Cholesky Matrix Decomposition — cholSE","text":"Matthew L. Fidler (translation), Johannes Pfeifer, Robert     B. Schnabel Elizabeth Eskow","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-addPkgNlmixr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a package to the nlmixr2's $sessioninfo inside the fit — .addPkgNlmixr2","title":"Adds a package to the nlmixr2's $sessioninfo inside the fit — .addPkgNlmixr2","text":"Adds package nlmixr2's $sessioninfo inside fit","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-addPkgNlmixr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a package to the nlmixr2's $sessioninfo inside the fit — .addPkgNlmixr2","text":"","code":".addPkgNlmixr2(pkg)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-addPkgNlmixr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a package to the nlmixr2's $sessioninfo inside the fit — .addPkgNlmixr2","text":"pkg character vector package add","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-addPkgNlmixr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a package to the nlmixr2's $sessioninfo inside the fit — .addPkgNlmixr2","text":"nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-addPkgNlmixr2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a package to the nlmixr2's $sessioninfo inside the fit — .addPkgNlmixr2","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-addPkgNlmixr2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a package to the nlmixr2's $sessioninfo inside the fit — .addPkgNlmixr2","text":"","code":".addPkgNlmixr2(\"nlmixr2\") # already present"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-augPredIpredModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment Prediction for Ipred Model — .augPredIpredModel","title":"Augment Prediction for Ipred Model — .augPredIpredModel","text":"function augments prediction individual prediction (Ipred) model.  retrieves simulation model fit object evaluates model variables.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-augPredIpredModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment Prediction for Ipred Model — .augPredIpredModel","text":"","code":".augPredIpredModel(fit)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-augPredIpredModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment Prediction for Ipred Model — .augPredIpredModel","text":"fit fitted model object retrieve simulation model.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-augPredIpredModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment Prediction for Ipred Model — .augPredIpredModel","text":"evaluated model variables Ipred model.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-augPredIpredModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Augment Prediction for Ipred Model — .augPredIpredModel","text":"function performs following steps: - Retrieves simulation model provided `fit` object using `.getSimModel` `hideIpred` `tad` set `FALSE`. - Evaluates model variables using `rxModelVars`.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseDifferent.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Differences Between Standard and New Objects but used in rxUiDeparse — .deparseDifferent","title":"Identify Differences Between Standard and New Objects but used in rxUiDeparse — .deparseDifferent","text":"function compares elements standard object new object identifies elements different.  used show values different default deparsing control objects.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseDifferent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Differences Between Standard and New Objects but used in rxUiDeparse — .deparseDifferent","text":"","code":".deparseDifferent(standard, new, internal = character(0))"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseDifferent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Differences Between Standard and New Objects but used in rxUiDeparse — .deparseDifferent","text":"standard standard object used comparison. (example `foceiControl()`) new new object compared standard. user supplide like `foceiControl(outerOpt=\"bobyqa\")` internal character vector element names ignored comparison. Default empty character vector. internal items list flag certain properties like `rxControl()` generated `foceiControl()` procedure .","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseDifferent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Differences Between Standard and New Objects but used in rxUiDeparse — .deparseDifferent","text":"vector indices indicating elements   standard object differ new object.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseDifferent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify Differences Between Standard and New Objects but used in rxUiDeparse — .deparseDifferent","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseDifferent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Differences Between Standard and New Objects but used in rxUiDeparse — .deparseDifferent","text":"","code":"standard <- list(a = 1, b = 2, c = 3) new <- list(a = 1, b = 3, c = 3) .deparseDifferent(standard, new) #> [1] 2"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseFinal.html","id":null,"dir":"Reference","previous_headings":"","what":"Deparse finalize a control or related object into a language object — .deparseFinal","title":"Deparse finalize a control or related object into a language object — .deparseFinal","text":"function deparses object language expression, optionally using custom function specific elements.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseFinal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deparse finalize a control or related object into a language object — .deparseFinal","text":"","code":".deparseFinal(default, object, w, var, fun = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseFinal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deparse finalize a control or related object into a language object — .deparseFinal","text":"default default object used comparison; estimation control procedure.  class matching function created . object object deparsed language exression w vector indices indicating elements different need deparsed. likely comes `.deparseDifferent()` var string representing variable name assigned deparsed expression. fun optional custom function handle specific elements deparsing. Default NULL. handles things specific estimation control used functions like `rxUiDeparse.saemControl()`","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseFinal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deparse finalize a control or related object into a language object — .deparseFinal","text":"language object representing deparsed expression.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-deparseFinal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Deparse finalize a control or related object into a language object — .deparseFinal","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-foceiPreProcessData.html","id":null,"dir":"Reference","previous_headings":"","what":"This function process the data for use in focei — .foceiPreProcessData","title":"This function process the data for use in focei — .foceiPreProcessData","text":"$origData data fed focei modification $dataSav data saved focei","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-foceiPreProcessData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function process the data for use in focei — .foceiPreProcessData","text":"","code":".foceiPreProcessData(data, env, ui, rxControl = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-foceiPreProcessData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function process the data for use in focei — .foceiPreProcessData","text":"data Input dataset env focei environment focei family run ui rxode2 ui rxControl rxode2 control used translate modeling dataset","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-foceiPreProcessData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function process the data for use in focei — .foceiPreProcessData","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-foceiPreProcessData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This function process the data for use in focei — .foceiPreProcessData","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFinalizeList.html","id":null,"dir":"Reference","previous_headings":"","what":"Finalizes output list — .nlmFinalizeList","title":"Finalizes output list — .nlmFinalizeList","text":"Finalizes output list","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFinalizeList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finalizes output list — .nlmFinalizeList","text":"","code":".nlmFinalizeList(env, lst, par = \"par\", printLine = TRUE, hessianCov = TRUE)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFinalizeList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finalizes output list — .nlmFinalizeList","text":"env nlm environment lst output list par parameter name final estimate output printLine Print final line print nonzero hessianCov boolean indicating hessian used/calculated covariance","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFinalizeList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finalizes output list — .nlmFinalizeList","text":"modified list `$cov`","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFinalizeList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finalizes output list — .nlmFinalizeList","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFreeEnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Frees nlm environment — .nlmFreeEnv","title":"Frees nlm environment — .nlmFreeEnv","text":"Frees nlm environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFreeEnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frees nlm environment — .nlmFreeEnv","text":"","code":".nlmFreeEnv()"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFreeEnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frees nlm environment — .nlmFreeEnv","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmFreeEnv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Frees nlm environment — .nlmFreeEnv","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmSetupEnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup a nonlinear system for optimization — .nlmSetupEnv","title":"Setup a nonlinear system for optimization — .nlmSetupEnv","text":"Setup nonlinear system optimization","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmSetupEnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup a nonlinear system for optimization — .nlmSetupEnv","text":"","code":".nlmSetupEnv(par, ui, data, modelInfo, control, lower = NULL, upper = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmSetupEnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup a nonlinear system for optimization — .nlmSetupEnv","text":"par named vector initial estimates setup nonlinear model solving environment. names parameter match names model run (`THETA[#]` required `modelInfo` argument) ui rxode2 ui model data rxode2 compatible data solving/setting modelInfo list containing following elements: - `predOnly` – model predictions calculated.  predictions terms `THETA[#]` `DV`.  - `eventTheta` indicator `THETA[#]` related event (like `dur(x)` `f(x)`).  variables use Shi2021 finite differences need indicated setting solving environment.  finite differences required, `1L` `0L`.  match length `par` - `thetaGrad` – needed solveType != 1; model gives value gradient `THETA[#]` example can found `ui$nlmSensModel` `ui$nlmRxModel` control control structure required elements: - `rxControl` represents rxode2 solving options - `solveType` integer indicating solveType (optional) - `stickyRecalcN` - `maxOdeRecalc` - `odeRecalcFactor` - `eventType` (optional) - `shi21maxFD` (optional) - `shiErr` (optional) - `optimHessType` (optional) - `shi21maxHess` (optional) - `hessErr` (optional) - `useColor` - `printNcol` - `print` - `normType` - `scaleType` - `scaleCmin` - `scaleCmax` - `scaleTo` - `scaleC` - `gradTo` (optional); missing assumed gradTo=0 lower lower bounds, scaled present upper upper bounds, scaled present","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmSetupEnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup a nonlinear system for optimization — .nlmSetupEnv","text":"nlm solve environment; interest `$par.ini` – scaled parameter initial value `$lower` – scaled parameter lower value `$upper` – scaled parameter upper value `$.ctl`  – control structure","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmSetupEnv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup a nonlinear system for optimization — .nlmSetupEnv","text":"using , rxode2 solving called. also print header solving (print != 0)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmSetupEnv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup a nonlinear system for optimization — .nlmSetupEnv","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2estLastPredSimulationInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the least prediction simulation information for VPC — .nlmixr2estLastPredSimulationInfo","title":"Get the least prediction simulation information for VPC — .nlmixr2estLastPredSimulationInfo","text":"Get least prediction simulation information VPC","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2estLastPredSimulationInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the least prediction simulation information for VPC — .nlmixr2estLastPredSimulationInfo","text":"","code":".nlmixr2estLastPredSimulationInfo()"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2estLastPredSimulationInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the least prediction simulation information for VPC — .nlmixr2estLastPredSimulationInfo","text":"last prediction simulation `vpcSim` function (data.frame)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2objectNameAssign.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows external methods (like those in nlmixr2) to assign object name — .nlmixr2objectNameAssign","title":"Allows external methods (like those in nlmixr2) to assign object name — .nlmixr2objectNameAssign","text":"Allows external methods (like nlmixr2) assign object name","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2objectNameAssign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows external methods (like those in nlmixr2) to assign object name — .nlmixr2objectNameAssign","text":"","code":".nlmixr2objectNameAssign(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2objectNameAssign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allows external methods (like those in nlmixr2) to assign object name — .nlmixr2objectNameAssign","text":"x String null assigning nlmixr object name","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2objectNameAssign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allows external methods (like those in nlmixr2) to assign object name — .nlmixr2objectNameAssign","text":"nothing called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixr2objectNameAssign.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Allows external methods (like those in nlmixr2) to assign object name — .nlmixr2objectNameAssign","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmFunC.html","id":null,"dir":"Reference","previous_headings":"","what":"A surrogate function for nlm to call for ode solving — .nlmixrNlmFunC","title":"A surrogate function for nlm to call for ode solving — .nlmixrNlmFunC","text":"surrogate function nlm call ode solving","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmFunC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A surrogate function for nlm to call for ode solving — .nlmixrNlmFunC","text":"","code":".nlmixrNlmFunC(pars)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmFunC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A surrogate function for nlm to call for ode solving — .nlmixrNlmFunC","text":"pars Parameters estimated","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmFunC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A surrogate function for nlm to call for ode solving — .nlmixrNlmFunC","text":"Predictions","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmFunC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A surrogate function for nlm to call for ode solving — .nlmixrNlmFunC","text":"internal function called directly.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmFunC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A surrogate function for nlm to call for ode solving — .nlmixrNlmFunC","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmeFun.html","id":null,"dir":"Reference","previous_headings":"","what":"A surrogate function for nlme to call for ode solving — .nlmixrNlmeFun","title":"A surrogate function for nlme to call for ode solving — .nlmixrNlmeFun","text":"surrogate function nlme call ode solving","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmeFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A surrogate function for nlme to call for ode solving — .nlmixrNlmeFun","text":"","code":".nlmixrNlmeFun(pars, id)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmeFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A surrogate function for nlme to call for ode solving — .nlmixrNlmeFun","text":"pars Parameters estimated id patient identifiers estimated data.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmeFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A surrogate function for nlme to call for ode solving — .nlmixrNlmeFun","text":"Predictions","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmeFun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A surrogate function for nlme to call for ode solving — .nlmixrNlmeFun","text":"internal function called directly.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlmeFun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A surrogate function for nlme to call for ode solving — .nlmixrNlmeFun","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlminbFunC.html","id":null,"dir":"Reference","previous_headings":"","what":"A surrogate function for nlminb to call for ode solving — .nlmixrNlminbFunC","title":"A surrogate function for nlminb to call for ode solving — .nlmixrNlminbFunC","text":"surrogate function nlminb call ode solving","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlminbFunC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A surrogate function for nlminb to call for ode solving — .nlmixrNlminbFunC","text":"","code":".nlmixrNlminbFunC(pars)  .nlmixrNlminbGradC(pars)  .nlmixrNlminbHessC(pars)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlminbFunC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A surrogate function for nlminb to call for ode solving — .nlmixrNlminbFunC","text":"pars Parameters estimated","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlminbFunC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A surrogate function for nlminb to call for ode solving — .nlmixrNlminbFunC","text":"Predictions","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlminbFunC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A surrogate function for nlminb to call for ode solving — .nlmixrNlminbFunC","text":"internal function called directly.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlminbFunC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A surrogate function for nlminb to call for ode solving — .nlmixrNlminbFunC","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsData.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the data currently setup to run nls — .nlmixrNlsData","title":"Returns the data currently setup to run nls — .nlmixrNlsData","text":"Returns data currently setup run nls","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the data currently setup to run nls — .nlmixrNlsData","text":"","code":".nlmixrNlsData()"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the data currently setup to run nls — .nlmixrNlsData","text":"Returns data currently setup run nls","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns the data currently setup to run nls — .nlmixrNlsData","text":"internal function called directly.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns the data currently setup to run nls — .nlmixrNlsData","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFun.html","id":null,"dir":"Reference","previous_headings":"","what":"A surrogate function for nls to call for ode solving — .nlmixrNlsFun","title":"A surrogate function for nls to call for ode solving — .nlmixrNlsFun","text":"surrogate function nls call ode solving","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A surrogate function for nls to call for ode solving — .nlmixrNlsFun","text":"","code":".nlmixrNlsFun(DV, ...)  .nlmixrNlsFunValGrad(DV, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A surrogate function for nls to call for ode solving — .nlmixrNlsFun","text":"DV dependent variable ... parameters fed prediction function","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A surrogate function for nls to call for ode solving — .nlmixrNlsFun","text":"Predictions","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A surrogate function for nls to call for ode solving — .nlmixrNlsFun","text":"internal function called directly.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A surrogate function for nls to call for ode solving — .nlmixrNlsFun","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFunVal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal nls functions for minpack.lm — .nlmixrNlsFunVal","title":"Internal nls functions for minpack.lm — .nlmixrNlsFunVal","text":"Internal nls functions minpack.lm","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFunVal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal nls functions for minpack.lm — .nlmixrNlsFunVal","text":"","code":".nlmixrNlsFunVal(x)  .nlmixrNlsFunGrad(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrNlsFunVal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal nls functions for minpack.lm — .nlmixrNlsFunVal","text":"x Parameter estimate","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrOptimFunC.html","id":null,"dir":"Reference","previous_headings":"","what":"A surrogate function for optim to call for ode solving — .nlmixrOptimFunC","title":"A surrogate function for optim to call for ode solving — .nlmixrOptimFunC","text":"surrogate function optim call ode solving","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrOptimFunC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A surrogate function for optim to call for ode solving — .nlmixrOptimFunC","text":"","code":".nlmixrOptimFunC(pars)  .nlmixrOptimGradC(pars)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrOptimFunC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A surrogate function for optim to call for ode solving — .nlmixrOptimFunC","text":"pars Parameters estimated","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrOptimFunC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A surrogate function for optim to call for ode solving — .nlmixrOptimFunC","text":"Predictions","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrOptimFunC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A surrogate function for optim to call for ode solving — .nlmixrOptimFunC","text":"internal function called directly.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrOptimFunC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A surrogate function for optim to call for ode solving — .nlmixrOptimFunC","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrPreprocessLiteralFix.html","id":null,"dir":"Reference","previous_headings":"","what":"This literally fixes parameters in the model — .nlmixrPreprocessLiteralFix","title":"This literally fixes parameters in the model — .nlmixrPreprocessLiteralFix","text":"Whenever fixed parameter model, parameter replaced literal value inside model dropped `ini` block.  occurs `control$literalFix=TRUE`.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrPreprocessLiteralFix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This literally fixes parameters in the model — .nlmixrPreprocessLiteralFix","text":"","code":".nlmixrPreprocessLiteralFix(ui, est, data, control)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrPreprocessLiteralFix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This literally fixes parameters in the model — .nlmixrPreprocessLiteralFix","text":"ui model function/object est estimation method (methods shown `nlmixr2AllEst()`). Methods can added tools data nlmixr data control estimation control object.  expected different type estimation method","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrPreprocessLiteralFix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This literally fixes parameters in the model — .nlmixrPreprocessLiteralFix","text":"list possibly updated ui","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-nlmixrPreprocessLiteralFix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This literally fixes parameters in the model — .nlmixrPreprocessLiteralFix","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessDataUi.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess the zero omegas — .preProcessDataUi","title":"Preprocess the zero omegas — .preProcessDataUi","text":"Preprocess zero omegas","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessDataUi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess the zero omegas — .preProcessDataUi","text":"","code":".preProcessDataUi(ui, est, data, control)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessDataUi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess the zero omegas — .preProcessDataUi","text":"ui rxode2 ui est estimation method (methods shown `nlmixr2AllEst()`). Methods can added tools data nlmixr data control estimation control object.  expected different type estimation method","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessDataUi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess the zero omegas — .preProcessDataUi","text":"list ui (possibly modified)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessDataUi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocess the zero omegas — .preProcessDataUi","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessZeroOmega.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess the zero omegas — .preProcessZeroOmega","title":"Preprocess the zero omegas — .preProcessZeroOmega","text":"Preprocess zero omegas","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessZeroOmega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess the zero omegas — .preProcessZeroOmega","text":"","code":".preProcessZeroOmega(ui, est, data, control)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessZeroOmega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess the zero omegas — .preProcessZeroOmega","text":"ui rxode2 ui model est estimation method (methods shown `nlmixr2AllEst()`). Methods can added tools data nlmixr data control estimation control object.  expected different type estimation method","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessZeroOmega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess the zero omegas — .preProcessZeroOmega","text":"list ui (possibly modified)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-preProcessZeroOmega.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocess the zero omegas — .preProcessZeroOmega","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-rxGetDVFTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the DV transformation — .rxGetDVFTransform","title":"Get the DV transformation — .rxGetDVFTransform","text":"Get DV transformation","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-rxGetDVFTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the DV transformation — .rxGetDVFTransform","text":"","code":".rxGetDVFTransform(env, pred1, yj)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-rxGetDVFTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the DV transformation — .rxGetDVFTransform","text":"env Environment parsed model pred1 `data.frame` current error yj transformation number current error","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-rxGetDVFTransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the DV transformation — .rxGetDVFTransform","text":"transformation expression","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-rxGetDVFTransform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the DV transformation — .rxGetDVFTransform","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-saemDropMuRefFromModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop mu referenced etas and covariates — .saemDropMuRefFromModel","title":"Drop mu referenced etas and covariates — .saemDropMuRefFromModel","text":"Drop mu referenced etas covariates","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-saemDropMuRefFromModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop mu referenced etas and covariates — .saemDropMuRefFromModel","text":"","code":".saemDropMuRefFromModel(ui, noCovs = FALSE)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-saemDropMuRefFromModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop mu referenced etas and covariates — .saemDropMuRefFromModel","text":"ui rxode2 ui noCovs look covariates","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-saemDropMuRefFromModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop mu referenced etas and covariates — .saemDropMuRefFromModel","text":"model line expression mu referenced information dropped.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-saemDropMuRefFromModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop mu referenced etas and covariates — .saemDropMuRefFromModel","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiApplyMu2.html","id":null,"dir":"Reference","previous_headings":"","what":"This is an internal function for modifying the UI to apply mu2 referencing — .uiApplyMu2","title":"This is an internal function for modifying the UI to apply mu2 referencing — .uiApplyMu2","text":"mu2 referencing algebraic mu-referencing converting transformation single value original dataset, moving around","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiApplyMu2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is an internal function for modifying the UI to apply mu2 referencing — .uiApplyMu2","text":"","code":".uiApplyMu2(env)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiApplyMu2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is an internal function for modifying the UI to apply mu2 referencing — .uiApplyMu2","text":"env Environment needed nlmixr2 fits","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiApplyMu2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is an internal function for modifying the UI to apply mu2 referencing — .uiApplyMu2","text":"Either original model() block (changed) NULL   changed","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiApplyMu2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is an internal function for modifying the UI to apply mu2 referencing — .uiApplyMu2","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiFinalizeMu2.html","id":null,"dir":"Reference","previous_headings":"","what":"This is an internal function for replacing the ui with original model and dropping artificial data in output — .uiFinalizeMu2","title":"This is an internal function for replacing the ui with original model and dropping artificial data in output — .uiFinalizeMu2","text":"internal function replacing ui original model dropping artificial data output","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiFinalizeMu2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is an internal function for replacing the ui with original model and dropping artificial data in output — .uiFinalizeMu2","text":"","code":".uiFinalizeMu2(ret, model)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiFinalizeMu2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is an internal function for replacing the ui with original model and dropping artificial data in output — .uiFinalizeMu2","text":"ret object returned, without modification model original model apply","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiFinalizeMu2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is an internal function for replacing the ui with original model and dropping artificial data in output — .uiFinalizeMu2","text":"modified fit updated show original model without   internal transformations","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/dot-uiFinalizeMu2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is an internal function for replacing the ui with original model and dropping artificial data in output — .uiFinalizeMu2","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Options for FOCEi — foceiControl","title":"Control Options for FOCEi — foceiControl","text":"Control Options FOCEi","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Options for FOCEi — foceiControl","text":"","code":"foceiControl(   sigdig = 3,   ...,   epsilon = NULL,   maxInnerIterations = 1000,   maxOuterIterations = 5000,   n1qn1nsim = NULL,   print = 1L,   printNcol = floor((getOption(\"width\") - 23)/12),   scaleTo = 1,   scaleObjective = 0,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleC0 = 1e+05,   derivEps = rep(20 * sqrt(.Machine$double.eps), 2),   derivMethod = c(\"switch\", \"forward\", \"central\"),   derivSwitchTol = NULL,   covDerivMethod = c(\"central\", \"forward\"),   covMethod = c(\"r,s\", \"r\", \"s\", \"\"),   hessEps = (.Machine$double.eps)^(1/3),   hessEpsLlik = (.Machine$double.eps)^(1/3),   optimHessType = c(\"central\", \"forward\"),   optimHessCovType = c(\"central\", \"forward\"),   eventType = c(\"central\", \"forward\"),   centralDerivEps = rep(20 * sqrt(.Machine$double.eps), 2),   lbfgsLmm = 7L,   lbfgsPgtol = 0,   lbfgsFactr = NULL,   eigen = TRUE,   addPosthoc = TRUE,   diagXform = c(\"sqrt\", \"log\", \"identity\"),   sumProd = FALSE,   optExpression = TRUE,   literalFix = TRUE,   ci = 0.95,   useColor = crayon::has_color(),   boundTol = NULL,   calcTables = TRUE,   noAbort = TRUE,   interaction = TRUE,   cholSEtol = (.Machine$double.eps)^(1/3),   cholAccept = 0.001,   resetEtaP = 0.15,   resetThetaP = 0.05,   resetThetaFinalP = 0.15,   diagOmegaBoundUpper = 5,   diagOmegaBoundLower = 100,   cholSEOpt = FALSE,   cholSECov = FALSE,   fo = FALSE,   covTryHarder = FALSE,   outerOpt = c(\"nlminb\", \"bobyqa\", \"lbfgsb3c\", \"L-BFGS-B\", \"mma\", \"lbfgsbLG\", \"slsqp\",     \"Rvmmin\"),   innerOpt = c(\"n1qn1\", \"BFGS\"),   rhobeg = 0.2,   rhoend = NULL,   npt = NULL,   rel.tol = NULL,   x.tol = NULL,   eval.max = 4000,   iter.max = 2000,   abstol = NULL,   reltol = NULL,   resetHessianAndEta = FALSE,   stateTrim = Inf,   shi21maxOuter = 0L,   shi21maxInner = 20L,   shi21maxInnerCov = 20L,   shi21maxFD = 20L,   gillK = 10L,   gillStep = 4,   gillFtol = 0,   gillRtol = sqrt(.Machine$double.eps),   gillKcov = 10L,   gillKcovLlik = 10L,   gillStepCovLlik = 4.5,   gillStepCov = 2,   gillFtolCov = 0,   gillFtolCovLlik = 0,   rmatNorm = TRUE,   rmatNormLlik = TRUE,   smatNorm = TRUE,   smatNormLlik = TRUE,   covGillF = TRUE,   optGillF = TRUE,   covSmall = 1e-05,   adjLik = TRUE,   gradTrim = Inf,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   gradCalcCentralSmall = 1e-04,   gradCalcCentralLarge = 10000,   etaNudge = qnorm(1 - 0.05/2)/sqrt(3),   etaNudge2 = qnorm(1 - 0.05/2) * sqrt(3/5),   nRetries = 3,   seed = 42,   resetThetaCheckPer = 0.1,   etaMat = NULL,   repeatGillMax = 1,   stickyRecalcN = 4,   gradProgressOfvTime = 10,   addProp = c(\"combined2\", \"combined1\"),   badSolveObjfAdj = 100,   compress = TRUE,   rxControl = NULL,   sigdigTable = NULL,   fallbackFD = FALSE,   smatPer = 0.6,   sdLowerFact = 0.001,   zeroGradFirstReset = TRUE,   zeroGradRunReset = TRUE,   zeroGradBobyqa = TRUE )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Options for FOCEi — foceiControl","text":"sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) ... Ignored parameters epsilon Precision estimate n1qn1 optimization. maxInnerIterations Number iterations n1qn1 optimization. maxOuterIterations Maximum number L-BFGS-B optimization outer problem. n1qn1nsim Number function evaluations n1qn1 optimization. print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. printNcol Number columns printout wrapping parameter estimates/gradient scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. scaleObjective Scale initial objective function value.  default 0 (meaning scale) normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleC0 Number adjust scaling factor initial gradient zero. derivEps Forward difference tolerances,     vector relative difference absolute difference.      central/forward difference step size h calculated : h = abs(x)*derivEps[1] + derivEps[2] derivMethod indicates method calculating derivatives outer problem.  Currently supports \"switch\", \"central\" \"forward\" difference methods.  Switch starts forward differences.  switch central differences abs(delta(OFV)) <= derivSwitchTol switch back forward differences abs(delta(OFV)) > derivSwitchTol. derivSwitchTol tolerance switch forward central differences. covDerivMethod indicates method calculating derivatives calculating covariance components (Hessian S). covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual     gradient cross-product (evaluated individual empirical     Bayes estimates). \"r,s\" Uses sandwich matrix calculate  covariance, : solve(R) %*% S %*% solve(R) \"r\" Uses Hessian matrix calculate  covariance 2 %*% solve(R) \"s\" Uses cross-product matrix calculate  covariance 4 %*% solve(S) \"\" calculate covariance step. hessEps double value representing epsilon Hessian calculation. used R matrix calculation. hessEpsLlik double value representing epsilon Hessian calculation focei generalized log-likelihood estimation.  used R matrix calculation. optimHessType hessian type calculating individual hessian numeric differences (generalized log-likelihood estimation).  options \"central\", \"forward\".  central differences R's `optimHess()` uses default method. (Though \"forward\" faster still reasonable cases).  Shi21 changed Gill83 algorithm optimHess generalized likelihood problem. optimHessCovType hessian type calculating individual hessian numeric differences (generalized log-likelihood estimation).  options \"central\", \"forward\".  central differences R's `optimHess()` uses.  takes longer optimization, accurate, calculating covariance final likelihood, central differences used. also uses modified Shi21 method eventType Event gradient type dosing events; Can \"central\" \"forward\" centralDerivEps Central difference tolerances.    numeric vector relative difference absolute difference.   central/forward difference step size h calculated : h = abs(x)*derivEps[1] + derivEps[2] lbfgsLmm integer giving number BFGS updates retained \"L-BFGS-B\" method, defaults 7. lbfgsPgtol double precision variable. entry pgtol >= 0 specified user.  iteration     stop : max(\\| proj g_i \\| = 1, ..., n) <= lbfgsPgtol pg_i ith component projected gradient. exit pgtol unchanged.  defaults zero,     check suppressed. lbfgsFactr Controls convergence \"L-BFGS-B\" method.  Convergence occurs reduction objective within factor machine tolerance. Default 1e10, gives tolerance 2e-6, approximately 4 sigdigs.  can check exact tolerance multiplying value .Machine$double.eps eigen boolean indicating eigenvectors calculated include condition number calculation. addPosthoc Boolean indicating posthoc parameters added table output. diagXform transformation used diagonal     chol(solve(omega)). matrix values     parameters estimated FOCEi. possibilities : sqrt Estimates sqrt diagonal elements chol(solve(omega)).  default method. log Estimates log diagonal elements chol(solve(omega)) identity Estimates diagonal elements without transformations sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. optExpression Optimize rxode2 expression speed calculation. default turned . literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. ci Confidence level tables.  default 0.95 95% confidence. useColor Boolean indicating focei can use ASCII color codes boundTol Tolerance boundary issues. calcTables boolean determine foceiFit calculate tables. default TRUE noAbort Boolean indicate abort FOCEi evaluation runs troubles.  (default TRUE) interaction Boolean indicate FOCEi used (TRUE) instead FOCE (FALSE) cholSEtol tolerance Generalized Cholesky Decomposition.  Defaults suggested (.Machine$double.eps)^(1/3) cholAccept Tolerance accept Generalized Cholesky Decomposition R S matrix. resetEtaP represents p-value reseting individual ETA 0 optimization (instead saved value).  two test statistics used z-test either chol(omega^-1) %*% eta eta/sd(allEtas).  p-value 0 indicates ETAs never reset.  p-value 1 indicates ETAs always reset. resetThetaP represents p-value reseting population mu-referenced THETA parameters based ETA drift optimization, resetting optimization.  p-value 0 indicates THETAs never reset.  p-value 1 indicates THETAs always reset allowed.  theta reset checked beginning nearing local minima.  percent change objective function theta reset check initiated controlled resetThetaCheckPer. resetThetaFinalP represents p-value reseting population mu-referenced THETA parameters based ETA drift optimization, resetting optimization one final time. diagOmegaBoundUpper represents upper bound diagonal omega matrix.  upper bound given diag(omega)*diagOmegaBoundUpper.  diagOmegaBoundUpper 1, upper bound Omega. diagOmegaBoundLower represents lower bound diagonal omega matrix.  lower bound given diag(omega)/diagOmegaBoundUpper.  diagOmegaBoundLower 1, lower bound Omega. cholSEOpt Boolean indicating generalized Cholesky used optimizing. cholSECov Boolean indicating generalized Cholesky used calculating Covariance Matrix. fo boolean indicating FO approximation routine. covTryHarder R matrix non-positive definite corrected non-positive definite try estimating Hessian unscaled parameter space. outerOpt optimization method outer problem innerOpt optimization method inner problem (implemented yet.) rhobeg Beginning change parameters bobyqa algorithm (trust region).  default 0.2 20 parameters parameters scaled 1. rhobeg rhoend must set initial final values trust region radius, must positive 0 < rhoend < rhobeg. Typically rhobeg one tenth greatest expected change variable.  Note also smallest difference abs(upper-lower) greater equal rhobeg*2. case rhobeg adjusted. (bobyqa) rhoend smallest value trust region radius allowed. defined, 10^(-sigdig-1) used. (bobyqa) npt number points used approximate objective function via quadratic approximation bobyqa. value npt must interval [n+2,(n+1)(n+2)/2] n number parameters par. Choices exceed 2*n+1 recommended. defined, set 2*n + 1. (bobyqa) rel.tol Relative tolerance nlminb stops (nlmimb). x.tol X tolerance nlmixr2 optimizer eval.max Number maximum evaluations objective function (nlmimb) iter.max Maximum number iterations allowed (nlmimb) abstol Absolute tolerance nlmixr2 optimizer (BFGS) reltol tolerance nlmixr2 (BFGS) resetHessianAndEta boolean representing individual Hessian reset ETAs reset using option resetEtaP. stateTrim Trim state amounts/concentrations value. shi21maxOuter maximum number steps optimization forward-difference step size.  zero, use instead Gill differences. shi21maxInner maximum number steps optimization individual Hessian matrices generalized likelihood problem. 0, un-optimized finite differences used. shi21maxInnerCov maximum number steps optimization individual Hessian matrices generalized likelihood problem covariance step. 0, un-optimized finite differences used. shi21maxFD maximum number steps optimization forward difference step size using dosing events (lag time, modeled duration/rate bioavailability) gillK total number possible steps determine optimal forward/central difference step size per parameter (Gill 1983 method).  0, optimal step size determined.  Otherwise optimal step size determined. gillStep looking optimal forward difference step size, step size increase initial estimate .  iteration new step size = (prior step size)*gillStep gillFtol gillFtol gradient error tolerance acceptable issuing warning/error gradient estimates. gillRtol relative tolerance used Gill 1983 determination optimal step size. gillKcov total number possible steps determine optimal forward/central difference step size per parameter (Gill 1983 method) covariance step.  0, optimal step size determined.  Otherwise optimal step size determined. gillKcovLlik total number possible steps determine optimal forward/central difference step per parameter using generalized focei log-likelihood method (Gill 1986 method).  0, optimal step size determined. Otherwise optimal step size determined gillStepCovLlik generalized focei log-likelihood gillStepCov looking optimal forward difference step size, step size increase initial estimate .  iteration covariance step equal new step size = (prior step size)*gillStepCov gillFtolCov gillFtol gradient error tolerance acceptable issuing warning/error gradient estimates covariance step. gillFtolCovLlik applied generalized log-likelihood estimation. rmatNorm parameter normalize gradient step size parameter value calculation R matrix rmatNormLlik parameter normalize gradient step size parameter value calculation R matrix using generalized log-likelihood Hessian matrix. smatNorm parameter normalize gradient step size parameter value calculation S matrix smatNormLlik parameter normalize gradient step size parameter value calculation S matrix using generalized log-likelihood. covGillF Use Gill calculated optimal Forward difference step size instead central difference step size central difference gradient calculation. optGillF Use Gill calculated optimal Forward difference step size instead central difference step size central differences optimization. covSmall covSmall small number compare covariance numbers rejecting estimate covariance final estimate (comparing sandwich vs R/S matrix estimates covariance).  number controls small variance covariance matrix rejected. adjLik nlmixr2, objective function matches NONMEM's objective function, removes 2*pi constant likelihood calculation. TRUE, likelihood function adjusted 2*pi factor.  adjusted number closely matches likelihood approximations nlme, SAS approximations.  Regardless turned objective function matches NONMEM's objective function. gradTrim parameter adjust gradient |gradient| large. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced gradCalcCentralSmall small number represents value |grad| < gradCalcCentralSmall forward differences switch central differences. gradCalcCentralLarge large number represents value |grad| > gradCalcCentralLarge forward differences switch central differences. etaNudge default initial ETA estimates start zero; Sometimes optimize appropriately.  value non-zero, n1qn1 optimization perform appropriately, reset Hessian, nudge ETA value; ETA still move, nudge ETA value. default value qnorm(1-0.05/2)*1/sqrt(3), first Gauss Quadrature numbers times 0.95% normal region. successful try second eta nudge number ().  +-etaNudge2 successful, assign zero optimize longer etaNudge2 second eta nudge.  default qnorm(1-0.05/2)*sqrt(3/5), n=3 quadrature point (excluding zero) times 0.95% normal region nRetries FOCEi fit current parameter estimates, randomly sample new parameter estimates restart problem.  similar 'PsN' resampling. seed object specifying random number generator initialized resetThetaCheckPer represents objective function % percentage resetThetaP checked. etaMat Eta matrix initial estimates final estimates ETAs. repeatGillMax tolerances reduced calculating initial Gill differences, Gill difference repeated maximum number times defined parameter. stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. gradProgressOfvTime time single objective function evaluation (seconds) start progress bars gradient evaluations addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) badSolveObjfAdj objective function adjustment ODE system solved.  based individual bad solve. compress object compressed items rxControl `rxode2` ODE solving options fitting, created `rxControl()` sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. fallbackFD Fallback finite differences sensitivity equations solve. smatPer percentage representing number failed parameter gradients individual (replaced overall gradient parameter) total number gradients parameters (ie `ntheta*nsub`) S matrix considered bad matrix. sdLowerFact factor multiplying estimate lower estimate zero error known represent standard deviation parameter (like add.sd, prop.sd, pow.sd, lnorm.sd, etc).  zero, factor applied.  initial estimate 0.15 lower bound zero, lower bound assumed 0.00015. zeroGradFirstReset boolean, `TRUE` first gradient zero, reset zero gradient `sqrt(.Machine$double.eps)` get past bad initial estimate, otherwise error (possibly reset), `FALSE` error first gradient zero.  `NA` last reset, zero gradient ignored, otherwise error look another value.  Default `TRUE` zeroGradRunReset boolean, `TRUE` gradient zero, reset zero gradient `sqrt(.Machine$double.eps)` get past bad estimate running.  Otherwise error (possibly reset). Default `TRUE` zeroGradBobyqa boolean, `TRUE` gradient zero, reset change method gradient free bobyqa method. `NA`, zero gradient change bobyqa first gradient zero.  Default `TRUE`","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Options for FOCEi — foceiControl","text":"control object changes options FOCEi   family estimation methods","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiControl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control Options for FOCEi — foceiControl","text":"Note uses R's L-BFGS-B optim outer problem BFGS n1qn1 allows restoring prior individual Hessian (faster optimization speed). However inner problem scaled.  Since eta estimates start near zero, scaling parameters make sense. process scaling can fix ill conditioning unscaled problem.  covariance step performed unscaled problem, condition number matrix may reflective scaled problem's condition-number.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiControl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Control Options for FOCEi — foceiControl","text":"Gill, P.E., Murray, W., Saunders, M.., & Wright, M.H. (1983). Computing Forward-Difference Intervals Numerical Optimization. Siam Journal Scientific Statistical Computing, 4, 310-321. Shi, H.M., Xie, Y., Xuan, M.Q., & Nocedal, J. (2021). Adaptive Finite-Difference Interval Estimation Noisy Derivative-Free Optimization.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control Options for FOCEi — foceiControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiFitCpp_.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit/Evaluate FOCEi — foceiFitCpp_","title":"Fit/Evaluate FOCEi — foceiFitCpp_","text":"called directly.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiFitCpp_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit/Evaluate FOCEi — foceiFitCpp_","text":"","code":"foceiFitCpp_(e)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiFitCpp_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit/Evaluate FOCEi — foceiFitCpp_","text":"e Environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/foceiFitCpp_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit/Evaluate FOCEi — foceiFitCpp_","text":"focei fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getBaseSimModelFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for getting simulation rxode2 classic models based on fits — getBaseSimModelFit","title":"Method for getting simulation rxode2 classic models based on fits — getBaseSimModelFit","text":"Method getting simulation rxode2 classic models based fits","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getBaseSimModelFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for getting simulation rxode2 classic models based on fits — getBaseSimModelFit","text":"","code":"getBaseSimModelFit(x)  # S3 method for class 'focei' getBaseSimModelFit(x)  # S3 method for class 'foce' getBaseSimModelFit(x)  # S3 method for class 'fo' getBaseSimModelFit(x)  # S3 method for class 'foi' getBaseSimModelFit(x)  # S3 method for class 'posthoc' getBaseSimModelFit(x)  # Default S3 method getBaseSimModelFit(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getBaseSimModelFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for getting simulation rxode2 classic models based on fits — getBaseSimModelFit","text":"x list first element fit.  class represents estimation method.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getBaseSimModelFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for getting simulation rxode2 classic models based on fits — getBaseSimModelFit","text":"model fit$simulationModel","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getBaseSimModelFit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method for getting simulation rxode2 classic models based on fits — getBaseSimModelFit","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getValidNlmixrControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get valid nlmixr control object — getValidNlmixrCtl.bobyqa","title":"Get valid nlmixr control object — getValidNlmixrCtl.bobyqa","text":"Get valid nlmixr control object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getValidNlmixrControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get valid nlmixr control object — getValidNlmixrCtl.bobyqa","text":"","code":"# S3 method for class 'bobyqa' getValidNlmixrCtl(control)  # S3 method for class 'lbfgsb3c' getValidNlmixrCtl(control)  # S3 method for class 'n1qn1' getValidNlmixrCtl(control)  # S3 method for class 'newuoa' getValidNlmixrCtl(control)  # S3 method for class 'nlm' getValidNlmixrCtl(control)  # S3 method for class 'nlminb' getValidNlmixrCtl(control)  # S3 method for class 'nls' getValidNlmixrCtl(control)  # S3 method for class 'optim' getValidNlmixrCtl(control)  getValidNlmixrControl(control, est)  getValidNlmixrCtl(control)  # S3 method for class 'focei' getValidNlmixrCtl(control)  # S3 method for class 'foce' getValidNlmixrCtl(control)  # S3 method for class 'fo' getValidNlmixrCtl(control)  # S3 method for class 'foi' getValidNlmixrCtl(control)  # S3 method for class 'posthoc' getValidNlmixrCtl(control)  # S3 method for class 'foce' getValidNlmixrCtl(control)  # S3 method for class 'nlme' getValidNlmixrCtl(control)  # S3 method for class 'saem' getValidNlmixrCtl(control)  # S3 method for class 'rxSolve' getValidNlmixrCtl(control)  # S3 method for class 'simulate' getValidNlmixrCtl(control)  # S3 method for class 'simulation' getValidNlmixrCtl(control)  # S3 method for class 'predict' getValidNlmixrCtl(control)  # S3 method for class 'tableControl' getValidNlmixrCtl(control)  # Default S3 method getValidNlmixrCtl(control)  # S3 method for class 'uobyqa' getValidNlmixrCtl(control)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getValidNlmixrControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get valid nlmixr control object — getValidNlmixrCtl.bobyqa","text":"control nlmixr control object est Estimation routine","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getValidNlmixrControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get valid nlmixr control object — getValidNlmixrCtl.bobyqa","text":"Valid control object based estimation method run.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/getValidNlmixrControl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get valid nlmixr control object — getValidNlmixrCtl.bobyqa","text":"based running S3 method `getValidNlmixrCtl()`  `control` object put list class new list  `c(est, \"getValidNlmixrControl\")`","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/lbfgsb3cControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for lbfgsb3c estimation method in nlmixr2 — lbfgsb3cControl","title":"Control for lbfgsb3c estimation method in nlmixr2 — lbfgsb3cControl","text":"Control lbfgsb3c estimation method nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/lbfgsb3cControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for lbfgsb3c estimation method in nlmixr2 — lbfgsb3cControl","text":"","code":"lbfgsb3cControl(   trace = 0,   factr = 1e+07,   pgtol = 0,   abstol = 0,   reltol = 0,   lmm = 5L,   maxit = 10000L,   returnLbfgsb3c = FALSE,   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   gradTo = 1,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/lbfgsb3cControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for lbfgsb3c estimation method in nlmixr2 — lbfgsb3cControl","text":"trace positive, tracing information progress optimization produced. Higher values may produce tracing information: method \"L-BFGS-B\" six levels tracing. (understand exactly see source code: higher levels give detail.) factr controls convergence \"L-BFGS-B\" method. Convergence occurs reduction objective within factor machine tolerance. Default 1e7, tolerance 1e-8. pgtol helps control convergence \"L-BFGS-B\" method. tolerance projected gradient current search direction. defaults zero, check suppressed. abstol helps control convergence \"L-BFGS-B\" method. absolute tolerance difference x values. defaults zero, check suppressed. reltol helps control convergence \"L-BFGS-B\" method. relative tolerance difference x values. defaults zero, check suppressed. lmm integer giving number BFGS updates retained \"L-BFGS-B\" method, defaults 5. maxit maximum number iterations. returnLbfgsb3c return lbfgsb3c output instead nlmixr2 fit stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. gradTo factor gradient scaled optimizing.  works scaleType=\"nlmixr2\". rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual     gradient cross-product (evaluated individual empirical     Bayes estimates). \"r,s\" Uses sandwich matrix calculate  covariance, : solve(R) %*% S %*% solve(R) \"r\" Uses Hessian matrix calculate  covariance 2 %*% solve(R) \"s\" Uses cross-product matrix calculate  covariance 4 %*% solve(S) \"\" calculate covariance step. adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/lbfgsb3cControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for lbfgsb3c estimation method in nlmixr2 — lbfgsb3cControl","text":"bobqya control structure","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/lbfgsb3cControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control for lbfgsb3c estimation method in nlmixr2 — lbfgsb3cControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/lbfgsb3cControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control for lbfgsb3c estimation method in nlmixr2 — lbfgsb3cControl","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"lbfgsb3c\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(θ) #> → finding duplicate expressions in nlm llik gradient... #> → optimizing duplicate expressions in nlm llik gradient... #> → finding duplicate expressions in nlm pred-only... #> → optimizing duplicate expressions in nlm pred-only... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9104 #> → compress parHistData in nlmixr2 object, save 3496  print(fit2) #> ── nlmixr² log-likelihood lbfgsb3c ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -667.8633 1176.014 1190.737      -585.0069        141441.6        1203.715 #>  #> ── Time (sec $time): ── #>  #>            setup table compress    other #> elapsed 0.002549 0.033    0.008 2.984451 #>  #> ── ($parFixed or $parFixedDf): ── #>  #>        Est.     SE  %RSE     Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.5031 0.2098 41.69 -0.5031 (-0.9142, -0.09196)                     #> Em    18.29  50.71 277.3        18.29 (-81.1, 117.7)                     #> E50   7.124  11.52 161.7       7.124 (-15.46, 29.71)                     #> g         2  FIXED FIXED                           2                     #>   #>   Covariance Type ($covMethod): r #>   Censoring ($censInformation): No censoring #>   Minimization message ($message):   #>     CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH  #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0323     0 -0.473 -0.503 #> 2 1     0.0398     1 -0.976 -0.503 #> 3 1     0.0418     0 -0.473 -0.502 #> # ℹ 997 more rows  # you can also get the nlm output with fit2$lbfgsb3c  fit2$lbfgsb3c #> $par #>         E0         Em        E50  #> -0.5030809 18.2865802  7.1241967  #>  #> $grad #> [1]  4.850456e-06  6.125312e-07 -3.999022e-06 #>  #> $value #> [1] 585.0069 #>  #> $counts #> [1] 26 26 #>  #> $convergence #> [1] 0 #>  #> $message #> [1] \"CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH\" #>  #> $scaleC #> [1] 0.002809357 0.034120069 0.030608991 #>  #> $par.scaled #>        E0        Em       E50  #> -358.0500  520.2938  168.4082  #>  #> $hessian #>                E0            Em          E50 #> E0   0.0016250688  0.0005134493 -0.002197546 #> Em   0.0005134493  0.0004406288 -0.001789955 #> E50 -0.0021975460 -0.0017899552  0.007311689 #>  #> $covMethod #> [1] \"r\" #>  #> $cov.scaled #>            E0         Em       E50 #> E0   5574.769   56159.38  15423.74 #> Em  56159.379 2208699.19 557584.61 #> E50 15423.738  557584.61 141683.52 #>  #> $cov #>             E0          Em        E50 #> E0  0.04399879    5.383183   1.326312 #> Em  5.38318250 2571.321424 582.330707 #> E50 1.32631163  582.330707 132.744751 #>  #> $r #>                E0            Em           E50 #> E0   0.0008125344  0.0002567246 -0.0010987730 #> Em   0.0002567246  0.0002203144 -0.0008949776 #> E50 -0.0010987730 -0.0008949776  0.0036558447 #>   # The nlm control has been modified slightly to include # extra components and name the parameters # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/n1qn1Control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for n1qn1 estimation method in nlmixr2 — n1qn1Control","title":"Control for n1qn1 estimation method in nlmixr2 — n1qn1Control","text":"Control n1qn1 estimation method nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/n1qn1Control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for n1qn1 estimation method in nlmixr2 — n1qn1Control","text":"","code":"n1qn1Control(   epsilon = (.Machine$double.eps)^0.25,   max_iterations = 10000,   nsim = 10000,   imp = 0,   print.functions = FALSE,   returnN1qn1 = FALSE,   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   gradTo = 1,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"n1qn1\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/n1qn1Control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for n1qn1 estimation method in nlmixr2 — n1qn1Control","text":"epsilon Precision estimate n1qn1 optimization. max_iterations Number iterations nsim Number function evaluations imp Verbosity messages. print.functions Boolean control function value parameter estimates echoed every time function called. returnN1qn1 return n1qn1 output instead nlmixr2 fit stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. gradTo factor gradient scaled optimizing.  works scaleType=\"nlmixr2\". rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual     gradient cross-product (evaluated individual empirical     Bayes estimates). \"r,s\" Uses sandwich matrix calculate  covariance, : solve(R) %*% S %*% solve(R) \"r\" Uses Hessian matrix calculate  covariance 2 %*% solve(R) \"s\" Uses cross-product matrix calculate  covariance 4 %*% solve(S) \"\" calculate covariance step. adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/n1qn1Control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for n1qn1 estimation method in nlmixr2 — n1qn1Control","text":"bobqya control structure","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/n1qn1Control.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control for n1qn1 estimation method in nlmixr2 — n1qn1Control","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/n1qn1Control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control for n1qn1 estimation method in nlmixr2 — n1qn1Control","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"n1qn1\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(θ) #> → finding duplicate expressions in nlm llik gradient... #> → optimizing duplicate expressions in nlm llik gradient... #> → finding duplicate expressions in nlm pred-only... #> → optimizing duplicate expressions in nlm pred-only... #>   #>   #>   #>   #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9104 #> → compress parHistData in nlmixr2 object, save 4200  print(fit2) #> ── nlmixr² log-likelihood n1qn1 ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -698.8728 1145.004 1159.728      -569.5021        247.5542        44.78012 #>  #> ── Time (sec $time): ── #>  #>            setup table compress    other #> elapsed 0.002565 0.033    0.009 2.092435 #>  #> ── ($parFixed or $parFixedDf): ── #>  #>        Est.     SE  %RSE   Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.6651 0.2332 35.06 -0.6651 (-1.122, -0.2081)                     #> Em    5.034  1.848 36.71      5.034 (1.412, 8.656)                     #> E50   2.689  1.062 39.51     2.689 (0.6064, 4.771)                     #> g         2  FIXED FIXED                         2                     #>   #>   Covariance Type ($covMethod): r #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0550     1 -1.08  -0.663 #> 2 1     0.0756     0 -0.416 -0.661 #> 3 1     0.0881     0 -0.417 -0.660 #> # ℹ 997 more rows  # you can also get the nlm output with fit2$n1qn1  fit2$n1qn1 #> $value #> [1] 569.5021 #>  #> $par #>         E0         Em        E50  #> -0.6651475  5.0340893  2.6887927  #>  #> $H #>              [,1]         [,2]         [,3] #> [1,]  0.001689559  0.003212143 -0.007412899 #> [2,]  0.003212143  0.014353495 -0.026015882 #> [3,] -0.007412899 -0.026015882  0.054398728 #>  #> $c.hess #>  [1]  0.001689559  0.003212143 -0.007412899  0.014353495 -0.026015882 #>  [6]  0.054398728  0.000000000  0.000000000  0.000000000  0.000000000 #> [11]  0.000000000  0.000000000  0.000000000  0.000000000  0.000000000 #> [16]  0.000000000  0.000000000  0.000000000  0.000000000  0.000000000 #> [21]  0.000000000  0.000000000  0.000000000  0.000000000 #>  #> $n.fn #> [1] 38 #>  #> $n.gr #> [1] 38 #>  #> $scaleC #> [1] 0.002906086 0.038449160 0.036159742 #>  #> $par.scaled #>         E0         Em        E50  #> -401.93353  116.92427   20.04861  #>  #> $hessian #>               E0           Em          E50 #> E0   0.001660465  0.003082866 -0.007189092 #> Em   0.003082866  0.013778316 -0.025020262 #> E50 -0.007189092 -0.025020262  0.052675301 #>  #> $covMethod #> [1] \"r\" #>  #> $cov.scaled #>           E0       Em       E50 #> E0  6439.726 1128.467 1414.9006 #> Em  1128.467 2309.755 1251.1239 #> E50 1414.901 1251.124  863.3135 #>  #> $cov #>             E0       Em       E50 #> E0  0.05438566 0.126091 0.1486825 #> Em  0.12609104 3.414599 1.7394522 #> E50 0.14868248 1.739452 1.1288056 #>  #> $r #>                E0           Em          E50 #> E0   0.0008302324  0.001541433 -0.003594546 #> Em   0.0015414329  0.006889158 -0.012510131 #> E50 -0.0035945459 -0.012510131  0.026337651 #>   # The nlm control has been modified slightly to include # extra components and name the parameters # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/newuoaControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for newuoa estimation method in nlmixr2 — newuoaControl","title":"Control for newuoa estimation method in nlmixr2 — newuoaControl","text":"Control newuoa estimation method nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/newuoaControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for newuoa estimation method in nlmixr2 — newuoaControl","text":"","code":"newuoaControl(   npt = NULL,   rhobeg = NULL,   rhoend = NULL,   iprint = 0L,   maxfun = 100000L,   returnNewuoa = FALSE,   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/newuoaControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for newuoa estimation method in nlmixr2 — newuoaControl","text":"npt number points used approximate objective function via quadratic approximation bobyqa. value npt must interval [n+2,(n+1)(n+2)/2] n number parameters par. Choices exceed 2*n+1 recommended. defined, set 2*n + 1. (bobyqa) rhobeg Beginning change parameters bobyqa algorithm (trust region).  default 0.2 20 parameters parameters scaled 1. rhobeg rhoend must set initial final values trust region radius, must positive 0 < rhoend < rhobeg. Typically rhobeg one tenth greatest expected change variable.  Note also smallest difference abs(upper-lower) greater equal rhobeg*2. case rhobeg adjusted. (bobyqa) rhoend smallest value trust region radius allowed. defined, 10^(-sigdig-1) used. (bobyqa) iprint value `iprint` set integer value `0, 1, 2, 3, ...`, controls amount printing.  Specifically, output `iprint=0` output start return `iprint=1`. Otherwise, new value `rho` printed, best vector variables far corresponding value objective function. , new value objective function variables output `iprint=3`.  `iprint > 3`, objective function value corresponding variables output every `iprint` evaluations.  Default value `0`. maxfun maximum allowed number function evaluations. exceeded, method terminate. returnNewuoa return newuoa output instead nlmixr2 fit stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual     gradient cross-product (evaluated individual empirical     Bayes estimates). \"r,s\" Uses sandwich matrix calculate  covariance, : solve(R) %*% S %*% solve(R) \"r\" Uses Hessian matrix calculate  covariance 2 %*% solve(R) \"s\" Uses cross-product matrix calculate  covariance 4 %*% solve(S) \"\" calculate covariance step. adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/newuoaControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for newuoa estimation method in nlmixr2 — newuoaControl","text":"newuoa control structure","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/newuoaControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control for newuoa estimation method in nlmixr2 — newuoaControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/newuoaControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control for newuoa estimation method in nlmixr2 — newuoaControl","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"newuoa\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → loading llik model into symengine environment... #> → finding duplicate expressions in population log-likelihood model... #> → optimizing duplicate expressions in population log-likelihood model... #> ✔ done #>   #>   #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9120 #> → compress parHistData in nlmixr2 object, save 14528  print(fit2) #> ── nlmixr² log-likelihood newuoa ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -688.6227 1155.254 1169.978      -574.6272        556.8025        73.45763 #>  #> ── Time (sec $time): ── #>  #>            setup table compress    other #> elapsed 0.002678 0.032    0.009 1.761322 #>  #> ── ($parFixed or $parFixedDf): ── #>  #>        Est.     SE  %RSE    Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.5494 0.2404 43.75 -0.5494 (-1.021, -0.07832)                     #> Em    5.624  2.816 50.07      5.624 (0.1043, 11.14)                     #> E50   3.156   1.54 48.81      3.156 (0.1366, 6.175)                     #> g         2  FIXED FIXED                          2                     #>   #>   Covariance Type ($covMethod): r #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0255     0 -0.456 -0.549 #> 2 1     0.0524     0 -0.456 -0.548 #> 3 1     0.0626     0 -0.457 -0.547 #> # ℹ 997 more rows  # you can also get the nlm output with  fit2$newuoa #> parameter estimates: -0.549437112727316, 5.62412415493367, 3.15569016602292  #> objective: 574.627190890731  #> number of function evaluations: 242   # The nlm control has been modified slightly to include # extra components and name the parameters # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmControl.html","id":null,"dir":"Reference","previous_headings":"","what":"nlmixr2 defaults controls for nlm — nlmControl","title":"nlmixr2 defaults controls for nlm — nlmControl","text":"nlmixr2 defaults controls nlm","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nlmixr2 defaults controls for nlm — nlmControl","text":"","code":"nlmControl(   typsize = NULL,   fscale = 1,   print.level = 0,   ndigit = NULL,   gradtol = 1e-06,   stepmax = NULL,   steptol = 1e-06,   iterlim = 10000,   check.analyticals = FALSE,   returnNlm = FALSE,   solveType = c(\"hessian\", \"grad\", \"fun\"),   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   eventType = c(\"central\", \"forward\"),   shiErr = (.Machine$double.eps)^(1/3),   shi21maxFD = 20L,   optimHessType = c(\"central\", \"forward\"),   hessErr = (.Machine$double.eps)^(1/3),   shi21maxHess = 20L,   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   gradTo = 1,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"nlm\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nlmixr2 defaults controls for nlm — nlmControl","text":"typsize estimate size parameter     minimum. fscale estimate size f minimum. print.level argument determines level printing     done minimization process.  default     value 0 means printing occurs, value 1     means initial final details printed value     2 means full tracing information printed. ndigit number significant digits function f. gradtol positive scalar giving tolerance     scaled gradient considered close enough zero     terminate algorithm.  scaled gradient     measure relative change f direction     p[] divided relative change p[]. stepmax positive scalar gives maximum allowable     scaled step length.  stepmax used prevent steps     cause optimization function overflow, prevent     algorithm leaving area interest parameter space,     detect divergence algorithm. stepmax chosen     small enough prevent first two occurrences,     larger anticipated reasonable step. steptol positive scalar providing minimum allowable     relative step length. iterlim positive integer specifying maximum number     iterations performed program terminated. check.analyticals logical scalar specifying whether     analytic gradients Hessians, supplied,     checked numerical derivatives initial parameter     values. can help detect incorrectly formulated gradients     Hessians. returnNlm logical allows return `nlm` object solveType tells `nlm` use nlmixr2's analytical   gradients available (finite differences used   event-related parameters like parameters controlling lag time,   duration/rate infusion, modeled bioavailability). can   : - `\"hessian\"` use analytical gradients create     Hessian finite differences. - `\"gradient\"` use gradient let `nlm` calculate    finite difference hessian - `\"fun\"` nlm calculate finite difference    gradient finite difference Hessian using nlmixr2's finite differences, \"ideal\" step size  either central forward differences optimized  Shi2021 method may give accurate derivatives stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced eventType Event gradient type dosing events; Can \"central\" \"forward\" shiErr represents epsilon optimizing ideal step size numeric differentiation using Shi2021 method shi21maxFD maximum number steps optimization forward difference step size using dosing events (lag time, modeled duration/rate bioavailability) optimHessType hessian type calculating individual hessian numeric differences (generalized log-likelihood estimation).  options \"central\", \"forward\".  central differences R's `optimHess()` uses default method. (Though \"forward\" faster still reasonable cases).  Shi21 changed Gill83 algorithm optimHess generalized likelihood problem. hessErr represents epsilon optimizing Hessian step size using Shi2021 method. shi21maxHess Maximum number times optimize best step size hessian calculation useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. gradTo factor gradient scaled optimizing.  works scaleType=\"nlmixr2\". rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod allows selection \"r\", uses nlmixr2's `nlmixr2Hess()` hessian calculation \"nlm\" uses hessian `stats::nlm(.., hessian=TRUE)`. using `nlmixr2's` hessian optimization `nlmixr2's` gradient solving defaults \"nlm\" since `stats::optimHess()` assumes accurate gradient faster `nlmixr2Hess` adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... additional arguments passed f.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nlmixr2 defaults controls for nlm — nlmControl","text":"nlm control object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nlmixr2 defaults controls for nlm — nlmControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nlmixr2 defaults controls for nlm — nlmControl","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"nlm\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(θ) #> → finding duplicate expressions in nlm llik gradient... #> → optimizing duplicate expressions in nlm llik gradient... #> → finding duplicate expressions in nlm pred-only... #> → optimizing duplicate expressions in nlm pred-only... #>   #>   #>   #>   #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9112 #> → compress parHistData in nlmixr2 object, save 3328  print(fit2) #> ── nlmixr² log-likelihood nlm ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -715.5129 1128.364 1143.087      -561.1821         1017060        206884.9 #>  #> ── Time (sec $time): ── #>  #>           setup table compress   other #> elapsed 0.00254 0.047    0.009 2.15846 #>  #> ── ($parFixed or $parFixedDf): ── #>  #>        Est.    SE  %RSE Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.7135 8.163  1144 -0.7135 (-16.71, 15.29)                     #> Em    5.649 118.3  2095   5.649 (-226.2, 237.5)                     #> E50   2.669 59.97  2247   2.669 (-114.9, 120.2)                     #> g         2 FIXED FIXED                       2                     #>   #>   Covariance Type ($covMethod): r (nlm) #>   Censoring ($censInformation): No censoring #>   Minimization message ($message):   #>     relative gradient is close to zero, current iterate is probably solution  #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0394     1 -1.11  -0.712 #> 2 1     0.0410     1 -1.11  -0.712 #> 3 1     0.0491     0 -0.399 -0.712 #> # ℹ 997 more rows  # you can also get the nlm output with fit2$nlm  fit2$nlm #> $minimum #> [1] 561.1821 #>  #> $estimate #>         E0         Em        E50  #> -0.7135082  5.6486521  2.6692567  #>  #> $gradient #> [1]  7.739590e-09  5.510995e-08 -9.434968e-07 #>  #> $hessian #>               E0           Em          E50 #> E0   0.001691211  0.003155486 -0.008385262 #> Em   0.003155486  0.012661935 -0.028730803 #> E50 -0.008385262 -0.028730803  0.063541769 #>  #> $code #> [1] 1 #>  #> $iterations #> [1] 7 #>  #> $scaleC #> [1] 0.002952846 0.042343090 0.037276791 #>  #> $estimate.scaled #>         E0         Em        E50  #> -411.96225  120.59368   18.95371  #>  #> $covMethod #> [1] \"r (nlm)\" #>  #> $cov.scaled #>          E0      Em     E50 #> E0  7642403 7721081 4446453 #> Em  7721081 7807404 4495283 #> E50 4446453 4495283 2588433 #>  #> $cov #>           E0         Em       E50 #> E0   66.6364   965.3869  489.4327 #> Em  965.3869 13998.1861 7095.4197 #> E50 489.4327  7095.4197 3596.7806 #>  #> $r #>                E0           Em          E50 #> E0   0.0008456053  0.001577743 -0.004192631 #> Em   0.0015777428  0.006330967 -0.014365402 #> E50 -0.0041926311 -0.014365402  0.031770884 #>   # The nlm control has been modified slightly to include # extra components and name the parameters # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlminbControl.html","id":null,"dir":"Reference","previous_headings":"","what":"nlmixr2 nlminb defaults — nlminbControl","title":"nlmixr2 nlminb defaults — nlminbControl","text":"nlmixr2 nlminb defaults","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlminbControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nlmixr2 nlminb defaults — nlminbControl","text":"","code":"nlminbControl(   eval.max = 200,   iter.max = 150,   trace = 0,   abs.tol = 0,   rel.tol = 1e-10,   x.tol = 1.5e-08,   xf.tol = 2.2e-14,   step.min = 1,   step.max = 1,   sing.tol = rel.tol,   scale = 1,   scale.init = NULL,   diff.g = NULL,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   returnNlminb = FALSE,   solveType = c(\"hessian\", \"grad\", \"fun\"),   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   eventType = c(\"central\", \"forward\"),   shiErr = (.Machine$double.eps)^(1/3),   shi21maxFD = 20L,   optimHessType = c(\"central\", \"forward\"),   hessErr = (.Machine$double.eps)^(1/3),   shi21maxHess = 20L,   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   gradTo = 1,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"nlminb\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlminbControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nlmixr2 nlminb defaults — nlminbControl","text":"eval.max Maximum number evaluations objective function allowed.  Defaults 200. iter.max Maximum number iterations allowed.  Defaults 150. trace value objective function parameters printed every trace'th iteration.  0 trace information printed abs.tol Absolute tolerance.  Defaults 0 absolute convergence test used.  objective function known non-negative, previous default `1e-20` appropriate rel.tol Relative tolerance.  Defaults `1e-10`. x.tol X tolerance.  Defaults `1.5e-8`. xf.tol false convergence tolerance.  Defaults `2.2e-14`. step.min Minimum step size.  Default ‘1.’. step.max Maximum step size.  Default ‘1.’. sing.tol singular convergence tolerance; defaults `rel.tol;. scale See PORT documentation (leave alone). scale.init ... probably need check PORT documentation diff.g estimated bound relative error objective function value rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. returnNlminb logical; TRUE return nlminb result instead nlmixr2 fit object solveType tells `nlm` use nlmixr2's analytical   gradients available (finite differences used   event-related parameters like parameters controlling lag time,   duration/rate infusion, modeled bioavailability). can   : - `\"hessian\"` use analytical gradients create     Hessian finite differences. - `\"gradient\"` use gradient let `nlm` calculate    finite difference hessian - `\"fun\"` nlm calculate finite difference    gradient finite difference Hessian using nlmixr2's finite differences, \"ideal\" step size  either central forward differences optimized  Shi2021 method may give accurate derivatives stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced eventType Event gradient type dosing events; Can \"central\" \"forward\" shiErr represents epsilon optimizing ideal step size numeric differentiation using Shi2021 method shi21maxFD maximum number steps optimization forward difference step size using dosing events (lag time, modeled duration/rate bioavailability) optimHessType hessian type calculating individual hessian numeric differences (generalized log-likelihood estimation).  options \"central\", \"forward\".  central differences R's `optimHess()` uses default method. (Though \"forward\" faster still reasonable cases).  Shi21 changed Gill83 algorithm optimHess generalized likelihood problem. hessErr represents epsilon optimizing Hessian step size using Shi2021 method. shi21maxHess Maximum number times optimize best step size hessian calculation useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. gradTo factor gradient scaled optimizing.  works scaleType=\"nlmixr2\". addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual     gradient cross-product (evaluated individual empirical     Bayes estimates). \"r,s\" Uses sandwich matrix calculate  covariance, : solve(R) %*% S %*% solve(R) \"r\" Uses Hessian matrix calculate  covariance 2 %*% solve(R) \"s\" Uses cross-product matrix calculate  covariance 4 %*% solve(S) \"\" calculate covariance step. adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... arguments supplied objective.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlminbControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nlmixr2 nlminb defaults — nlminbControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlminbControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nlmixr2 nlminb defaults — nlminbControl","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"nlminb\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(θ) #> → finding duplicate expressions in nlm llik gradient... #> → optimizing duplicate expressions in nlm llik gradient... #> → finding duplicate expressions in nlm pred-only... #> → optimizing duplicate expressions in nlm pred-only... #>   #>   #>   #>   #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9120 #> → compress parHistData in nlmixr2 object, save 2784  print(fit2) #> ── nlmixr² log-likelihood nlminb ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -702.1913 1141.686 1156.409      -567.8429        1061.334        92.29859 #>  #> ── Time (sec $time): ── #>  #>            setup table compress    other #> elapsed 0.002549 0.033    0.008 2.179451 #>  #> ── ($parFixed or $parFixedDf): ── #>  #>        Est.     SE  %RSE   Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.5562 0.2205 39.65 -0.5562 (-0.9884, -0.124)                     #> Em    6.824  4.108 60.19     6.824 (-1.227, 14.88)                     #> E50   3.527  1.754 49.71    3.527 (0.09045, 6.964)                     #> g         2  FIXED FIXED                         2                     #>   #>   Covariance Type ($covMethod): r (nlminb) #>   Censoring ($censInformation): No censoring #>   Minimization message ($message):   #>     relative convergence (4)  #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0165     0 -0.453 -0.556 #> 2 1     0.0372     1 -1.01  -0.555 #> 3 1     0.0882     0 -0.455 -0.552 #> # ℹ 997 more rows  # you can also get the nlm output with fit2$nlminb  fit2$nlminb #> $par #>         E0         Em        E50  #> -0.5562158  6.8243063  3.5274540  #>  #> $objective #> [1] 567.8429 #>  #> $convergence #> [1] 0 #>  #> $iterations #> [1] 9 #>  #> $evaluations #> function gradient  #>       15       10  #>  #> $message #> [1] \"relative convergence (4)\" #>  #> $scaleC #> [1] 0.003025658 0.039166286 0.035501967 #>  #> $parHistData #>    iter                type     objf            E0            Em           E50 #> 1     1              Scaled 664.3020 -1.000000e+00 -1.000000e+00  1.000000e+00 #> 2     1            Unscaled 664.3020  5.000000e-01  5.000000e-01  2.000000e+00 #> 3     1    Back-Transformed 664.3020  5.000000e-01  5.000000e-01  2.000000e+00 #> 4     2              Scaled 663.2590 -1.192767e+00 -1.054198e-01  1.014293e+00 #> 5     2            Unscaled 663.2590  4.994168e-01  5.350374e-01  2.000507e+00 #> 6     2    Back-Transformed 663.2590  4.994168e-01  5.350374e-01  2.000507e+00 #> 7     3              Scaled 660.3552 -1.947459e+00  2.548835e+00  1.142916e+00 #> 8     3            Unscaled 660.3552  4.971333e-01  6.389947e-01  2.005074e+00 #> 9     3    Back-Transformed 660.3552  4.971333e-01  6.389947e-01  2.005074e+00 #> 10    4              Scaled 651.4533 -8.468400e+00  1.158379e+01  3.193471e+00 #> 11    4            Unscaled 651.4533  4.774032e-01  9.928603e-01  2.077873e+00 #> 12    4    Back-Transformed 651.4533  4.774032e-01  9.928603e-01  2.077873e+00 #> 13    5              Scaled 638.6847 -3.211393e+01  2.103046e+01  9.325660e+00 #> 14    5            Unscaled 638.6847  4.058599e-01  1.362851e+00  2.295577e+00 #> 15    5    Back-Transformed 638.6847  4.058599e-01  1.362851e+00  2.295577e+00 #> 16    6              Scaled 618.4630 -8.842653e+01  3.196009e+01  1.527454e+01 #> 17    6            Unscaled 618.4630  2.354772e-01  1.790924e+00  2.506774e+00 #> 18    6    Back-Transformed 618.4630  2.354772e-01  1.790924e+00  2.506774e+00 #> 19    7              Scaled 586.6264 -2.402661e+02  5.426643e+01  1.488642e+01 #> 20    7            Unscaled 586.6264 -2.239373e-01  2.664581e+00  2.492995e+00 #> 21    7    Back-Transformed 586.6264 -2.239373e-01  2.664581e+00  2.492995e+00 #> 22    8              Scaled 577.6845 -4.091671e+02  9.062513e+01 -6.891088e+00 #> 23    8            Unscaled 577.6845 -7.349741e-01  4.088616e+00  1.719851e+00 #> 24    8    Back-Transformed 577.6845 -7.349741e-01  4.088616e+00  1.719851e+00 #> 25    9              Scaled 570.2958 -4.090877e+02  1.125863e+02  1.006903e+01 #> 26    9            Unscaled 570.2958 -7.347337e-01  4.948755e+00  2.321969e+00 #> 27    9    Back-Transformed 570.2958 -7.347337e-01  4.948755e+00  2.321969e+00 #> 28   10              Scaled 568.5426 -3.859555e+02  1.260802e+02  2.233961e+01 #> 29   10            Unscaled 568.5426 -6.647436e-01  5.477258e+00  2.757598e+00 #> 30   10    Back-Transformed 568.5426 -6.647436e-01  5.477258e+00  2.757598e+00 #> 31   11              Scaled 567.9630 -3.629940e+02  1.409506e+02  3.333805e+01 #> 32   11            Unscaled 567.9630 -5.952699e-01  6.059680e+00  3.148064e+00 #> 33   11    Back-Transformed 567.9630 -5.952699e-01  6.059680e+00  3.148064e+00 #> 34   12              Scaled 567.8483 -3.512389e+02  1.552172e+02  4.165856e+01 #> 35   12            Unscaled 567.8483 -5.597032e-01  6.618446e+00  3.443459e+00 #> 36   12    Back-Transformed 567.8483 -5.597032e-01  6.618446e+00  3.443459e+00 #> 37   13              Scaled 567.8429 -3.502120e+02  1.599472e+02  4.380057e+01 #> 38   13            Unscaled 567.8429 -5.565960e-01  6.803705e+00  3.519505e+00 #> 39   13    Back-Transformed 567.8429 -5.565960e-01  6.803705e+00  3.519505e+00 #> 40   14              Scaled 567.8429 -3.500894e+02  1.604627e+02  4.401979e+01 #> 41   14            Unscaled 567.8429 -5.562250e-01  6.823896e+00  3.527287e+00 #> 42   14    Back-Transformed 567.8429 -5.562250e-01  6.823896e+00  3.527287e+00 #> 43   15              Scaled 567.8429 -3.500863e+02  1.604732e+02  4.402449e+01 #> 44   15            Unscaled 567.8429 -5.562158e-01  6.824306e+00  3.527454e+00 #> 45   15    Back-Transformed 567.8429 -5.562158e-01  6.824306e+00  3.527454e+00 #> 46   16              Scaled 567.8429 -3.500863e+02  1.604732e+02  4.402449e+01 #> 47   16            Unscaled 567.8429 -5.562158e-01  6.824306e+00  3.527454e+00 #> 48   16    Back-Transformed 567.8429 -5.562158e-01  6.824306e+00  3.527454e+00 #> 49    1 Forward Sensitivity       NA  2.287292e-01 -1.139587e+00 -1.007877e-02 #> 50    7 Forward Sensitivity       NA  3.365644e-02 -6.062339e-01  2.972991e-01 #> 51    8 Forward Sensitivity       NA  9.613539e-02  4.695186e-01 -1.330428e+00 #> 52    9 Forward Sensitivity       NA  1.036280e-02  1.249100e-01 -3.703666e-01 #> 53   10 Forward Sensitivity       NA -7.442000e-03  2.296292e-02 -9.575293e-02 #> 54   11 Forward Sensitivity       NA -2.982629e-03  9.205289e-04 -2.239961e-02 #> 55   12 Forward Sensitivity       NA  2.930256e-04 -1.823928e-03 -8.079844e-04 #> 56   13 Forward Sensitivity       NA -5.830956e-05 -3.581104e-04  3.999487e-04 #> 57   14 Forward Sensitivity       NA -7.809605e-07 -4.798043e-06  2.546606e-06 #> 58   15 Forward Sensitivity       NA  5.119659e-10  9.768064e-10 -8.692294e-08 #>  #> $par.scaled #>         E0         Em        E50  #> -350.08631  160.47322   44.02449  #>  #> $hessian #>               E0           Em          E50 #> E0   0.001806574  0.002166854 -0.005847333 #> Em   0.002166854  0.006467726 -0.014832491 #> E50 -0.005847333 -0.014832491  0.036368424 #>  #> $covMethod #> [1] \"r (nlminb)\" #>  #> $cov.scaled #>           E0        Em      E50 #> E0  5312.467  2766.670 1982.499 #> Em  2766.670 11000.029 4931.076 #> E50 1982.499  4931.076 2439.822 #>  #> $cov #>             E0         Em       E50 #> E0  0.04863354  0.3278608 0.2129537 #> Em  0.32786081 16.8740213 6.8565634 #> E50 0.21295371  6.8565634 3.0751260 #>  #> $r #>               E0           Em          E50 #> E0   0.000903287  0.001083427 -0.002923667 #> Em   0.001083427  0.003233863 -0.007416245 #> E50 -0.002923667 -0.007416245  0.018184212 #>  # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":null,"dir":"Reference","previous_headings":"","what":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"nlmixr2 R package fitting population pharmacokinetic (PK) pharmacokinetic-pharmacodynamic (PKPD) models.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"","code":"nlmixr2(   object,   data,   est = NULL,   control = list(),   table = tableControl(),   ...,   save = NULL,   envir = parent.frame() )  nlmixr(   object,   data,   est = NULL,   control = list(),   table = tableControl(),   ...,   save = NULL,   envir = parent.frame() )  # S3 method for class '`function`' nlmixr2(   object,   data = NULL,   est = NULL,   control = NULL,   table = tableControl(),   ...,   save = NULL,   envir = parent.frame() )  # S3 method for class 'rxUi' nlmixr2(   object,   data = NULL,   est = NULL,   control = NULL,   table = tableControl(),   ...,   save = NULL,   envir = parent.frame() )  # S3 method for class 'nlmixr2FitCore' nlmixr2(   object,   data = NULL,   est = NULL,   control = NULL,   table = tableControl(),   ...,   save = NULL,   envir = parent.frame() )  # S3 method for class 'nlmixr2FitData' nlmixr2(   object,   data = NULL,   est = NULL,   control = NULL,   table = tableControl(),   ...,   save = NULL,   envir = parent.frame() )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"object Fitted object function specifying model. data nlmixr data est estimation method (methods shown `nlmixr2AllEst()`). Methods can added tools control estimation control object.  expected different type estimation method table output table control object (like `tableControl()`) ... parameters save Boolean save nlmixr2 object rds file working directory.  NULL, uses option \"nlmixr2.save\" envir Environment nlmixr object/function evaluated running estimation routine.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"Either nlmixr2 model nlmixr2 fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"nlmixr2 generalized function allows common access nlmixr2 estimation routines. nlmixr object following fields:","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":"nlmixr-modeling-mini-language","dir":"Reference","previous_headings":"","what":"nlmixr modeling mini-language","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"Rationale nlmixr estimation routines way specifying models.  Often models specified ways intuitive one estimation routine, make sense another estimation routine.  Sometimes, legacy estimation routines like nlme syntax outside control nlmixr package. unique syntax routine makes routines easier maintain expand, allows interfacing existing packages outside nlmixr (like nlme).  However, model definition language common estimation methods, output object uniform, make easier switch estimation routines facilitate interfacing output external packages like Xpose. nlmixr mini-modeling language, attempts address issue incorporating common language.  language inspired R NONMEM, since languages familiar many pharmacometricians. Initial Estimates boundaries population parameters nlmixr models contained R function two blocks: ini model.  R function can named anything, meant called directly R.  fact try likely get error Error: find function \"ini\". ini model block meant hold initial estimates model, boundaries parameters estimation routines support boundaries (note nlmixr's saem nlme currently support parameter boundaries). explain initial estimates specified start annotated example: shown examples: Simple parameter values specified R-compatible assignment Boundaries specified c(lower, est, upper). Like NONMEM, c(lower,est) equivalent c(lower,est,Inf) Also like NONMEM, c(est) specify lower bound, equivalent   specifying parameter  without R's `c` function. initial estimates specified variance scale, analogy      NONMEM, square roots diagonal elements correspond coefficients      variation used exponential IIV implementation parameters can named almost R compatible name.  Please note : Residual error estimates coded population estimates (.e. using    '=' '<-' statement, '~'). Naming variables start \"_\" supported.  Note R     allow variable starting \"_\" assigned without quoting . Naming variables start \"rx_\" \"nlmixr_\"   supported since rxode2 nlmixr2 use prefixes   internally certain estimation routines calculating residuals. Variable names case sensitive, just like R. \"CL\"    \"Cl\". Initial Estimates subject error distribution (NONMEM's  $OMEGA) mixture models, multivariate normal individual deviations population parameters estimated (NONMEM called eta parameters).  Additionally variance/covariance matrix deviations also estimated (NONMEM OMEGA matrix).  also initial estimates.  nlmixr specified `~` operator typically used R \"modeled \", chosen distinguish estimates population residual error parameters. Continuing prior example, can annotate estimates subject error distribution shown examples: Simple variances specified variable name     estimate separated `~`. Correlated parameters specified sum variable    labels lower triangular matrix covariance    specified left handed side equation. also    separated `~`. Currently model syntax allow comments inside lower triangular matrix. Model Syntax ODE based models (NONMEM's $PK, $PRED, $DES $ERROR) initialization block defined, can define model terms defined variables ini block.  can also mix RxODE blocks model. current method defining nlmixr model specify parameters, possibly RxODE lines: Continuing describing syntax annotated example: points note: Parameters often defined differential equations. differential equations, parameters error terms single      block, instead multiple sections. State names, calculated variables start either \"rx_\"      \"nlmixr_\" since used internally estimation routines. Errors specified using `~`.  Currently can use either add(parameter)      additive error,  prop(parameter) proportional error add(parameter1) + prop(parameter2)      additive plus proportional error.  can also specify norm(parameter) additive error,      since follows normal distribution. routines, like saem require  parameters terms Pop.Parameter + Individual.Deviation.Parameter + Covariate*Covariate.Parameter.      order parameters matter.  similar NONMEM's mu-referencing, though      quite restrictive. type parameter model determined initial block;  Covariates used      model missing ini block.  variables need present modeling      dataset model run. Model Syntax solved PK systems Solved PK systems also currently supported nlmixr `linCmt()` pseudo-function.  annotated example solved system : ##' things keep mind: RxODE allows mixing solved systems ODEs,     implemented nlmixr yet. solved systems implemented one, two three compartment     models without first-order absorption.  models support     lag time tlag parameter. general linear compartment model figures model parameter names.     nlmixr currently knows numbered volumes, Vc/Vp, Clearances terms Cl     Q/CLD.  Additionally nlmixr knows elimination micro-constants (ie K12).  Mixing     parameters models currently supported. Checking model syntax specifying model syntax can check nlmixr interpreting correctly using nlmixr function . Using function can get: general gives information model (type solved system/RxODE), initial estimates well code model block. Using model syntax estimating model model function created, can use dataset estimate parameters model given dataset. dataset RxODE compatible events IDs.  Monolix NONMEM use similar standard nlmixr can support. data converted appropriate format, can use nlmixr function run appropriate code. method estimate model : Currently nlme saem implemented.  example, run model saem, following: options saem controlled saemControl. may wish make sure minimization complete case saem.  can traceplot shows iteration history divided burn-EM phases.  case, burn seems reasonable; may wish increase number iterations EM phase estimation. Overall probably semi-reasonable solution. nlmixr output objects addition unifying modeling language sent estimation routines, outputs currently unified structure. can see fit object typing object name: example shows typical printout nlmixr fit object.  elements fit : type fit (nlme, saem, etc) Metrics goodness fit (AIC, BIC,    logLik). align comparison methods, FOCEi likelihood objective calculated           regardless method used used goodness fit metrics. FOCEi likelihood compared NONMEM's objective function gives          values (based data Wang 2007) Also note saem calculate objective function,             FOCEi used objective function fit. Even though objective functions calculated manner, caution          used comparing fits various estimation routines. next item timing steps fit. can also accessed (fit.s$time). mnemonic, access item shown printout.         true almost items printout. timing fit, parameter estimates displayed (can accessed    fit.s$par.fixed) items rounded R printing, estimate without rounding still accessible `$` syntax.        example, `$Untransformed` gives untransformed parameter values. Untransformed parameter takes log-space parameters back-transforms normal parameters.  CIs        listed back-transformed parameter space. Proportional Errors converted Omega block (accessed fit.s$omega) table fit data. Please note: nlmixr fit object actually data frame.  Saving Rdata object loading        without nlmixr just show data .  worry; fit information vanished,        can bring back simply loading nlmixr, accessing data. Special access fit information (like $omega) needs nlmixr extract information. use $ access information, order precedence : Fit data overall data.frame Information parsed nlmixr model (via $uif) Parameter history available (via $par.hist $par.hist.stacked) Fixed effects table (via $par.fixed) Individual differences typical population parameters (via $eta) Fit information list information generated post-hoc            residual calculation. Fit information environment post-hoc residual calculated Fit information data options interacted specified model            (estimation options solved system infusion IV bolus). printout may displays data data.table object tbl        object, data objects, rather derived data frame. Since object data.frame, can treat like one. addition properties fit object, additional may helpful modeler: $theta gives fixed effects parameter estimates (NONMEM     thetas). can also accessed fixed.effects     function. Note residual variability treated fixed effect parameter     included list. $eta gives random effects parameter estimates, NONMEM     etas.  can also accessed using random.effects     function.","code":"f <- function(){ ## Note the arguments to the function are currently                  ## ignored by nlmixr     ini({         ## Initial conditions for population parameters (sometimes         ## called theta parameters) are defined by either `<-` or '='         lCl <- 1.6      #log Cl (L/hr)         ## Note that simple expressions that evaluate to a number are         ## OK for defining initial conditions (like in R)         lVc = log(90)  #log V (L)         ## Also a comment on a parameter is captured as a parameter label         lKa <- 1 #log Ka (1/hr)         ## Bounds may be specified by c(lower, est, upper), like NONMEM:         ## Residuals errors are assumed to be population parameters         prop.err <- c(0, 0.2, 1)     })     ## The model block will be discussed later     model({}) } f <- function(){     ini({         lCl <- 1.6      #log Cl (L/hr)         lVc = log(90)  #log V (L)         lKa <- 1 #log Ka (1/hr)         prop.err <- c(0, 0.2, 1)         ## Initial estimate for ka IIV variance         ## Labels work for single parameters         eta.ka ~ 0.1 # BSV Ka          ## For correlated parameters, you specify the names of each         ## correlated parameter separated by a addition operator `+`         ## and the left handed side specifies the lower triangular         ## matrix initial of the covariance matrix.         eta.cl + eta.vc ~ c(0.1,                             0.005, 0.1)         ## Note that labels do not currently work for correlated         ## parameters.  Also do not put comments inside the lower         ## triangular matrix as this will currently break the model.     })     ## The model block will be discussed later     model({}) } f <- function(){     ini({         lCl <- 1.6      #log Cl (L/hr)         lVc <- log(90)   #log Vc (L)         lKA <- 0.1      #log Ka (1/hr)         prop.err <- c(0, 0.2, 1)         eta.Cl ~ 0.1 ## BSV Cl         eta.Vc ~ 0.1 ## BSV Vc         eta.KA ~ 0.1 ## BSV Ka     })     model({         ## First parameters are defined in terms of the initial estimates         ## parameter names.         Cl <- exp(lCl + eta.Cl)         Vc = exp(lVc + eta.Vc)         KA <- exp(lKA + eta.KA)         ## After the differential equations are defined         kel <- Cl / Vc;         d/dt(depot)    = -KA*depot;         d/dt(centr)  =  KA*depot-kel*centr;         ## And the concentration is then calculated         cp = centr / Vc;         ## Last, nlmixr is told that the plasma concentration follows         ## a proportional error (estimated by the parameter prop.err)         cp ~ prop(prop.err)     }) } f <- function(){     ini({         lCl <- 1.6      #log Cl (L/hr)         lVc <- log(90)   #log Vc (L)         lKA <- 0.1      #log Ka (1/hr)         prop.err <- c(0, 0.2, 1)         eta.Cl ~ 0.1 ## BSV Cl         eta.Vc ~ 0.1 ## BSV Vc         eta.KA ~ 0.1 ## BSV Ka     })     model({         Cl <- exp(lCl + eta.Cl)         Vc = exp(lVc + eta.Vc)         KA <- exp(lKA + eta.KA)         ## Instead of specifying the ODEs, you can use         ## the linCmt() function to use the solved system.         ##         ## This function determines the type of PK solved system         ## to use by the parameters that are defined.  In this case         ## it knows that this is a one-compartment model with first-order         ## absorption.         linCmt() ~ prop(prop.err)     }) } > nlmixr(f) ## 1-compartment model with first-order absorption in terms of Cl ## Initialization: ################################################################################ Fixed Effects ($theta):     lCl     lVc     lKA 1.60000 4.49981 0.10000  Omega ($omega):      [,1] [,2] [,3] [1,]  0.1  0.0  0.0 [2,]  0.0  0.1  0.0 [3,]  0.0  0.0  0.1  ## Model: ################################################################################ Cl <- exp(lCl + eta.Cl) Vc = exp(lVc + eta.Vc) KA <- exp(lKA + eta.KA) ## Instead of specifying the ODEs, you can use ## the linCmt() function to use the solved system. ## ## This function determines the type of PK solved system ## to use by the parameters that are defined.  In this case ## it knows that this is a one-compartment model with first-order ## absorption. linCmt() ~ prop(prop.err) fit <- nlmixr(model.function, dataset, est=\"est\", control=estControl(options)) > f <- function(){     ini({         lCl <- 1.6      #log Cl (L/hr)         lVc <- log(90)   #log Vc (L)         lKA <- 0.1      #log Ka (1/hr)         prop.err <- c(0, 0.2, 1)         eta.Cl ~ 0.1 ## BSV Cl         eta.Vc ~ 0.1 ## BSV Vc         eta.KA ~ 0.1 ## BSV Ka     })     model({         ## First parameters are defined in terms of the initial estimates         ## parameter names.         Cl <- exp(lCl + eta.Cl)         Vc = exp(lVc + eta.Vc)         KA <- exp(lKA + eta.KA)         ## After the differential equations are defined         kel <- Cl / Vc;         d/dt(depot)    = -KA*depot;         d/dt(centr)  =  KA*depot-kel*centr;         ## And the concentration is then calculated         cp = centr / Vc;         ## Last, nlmixr is told that the plasma concentration follows         ## a proportional error (estimated by the parameter prop.err)         cp ~ prop(prop.err)     }) } > fit.s <- nlmixr(f,d,est=\"saem\",control=saemControl(n.burn=50,n.em=100,print=50)); Compiling RxODE differential equations...done. c:/Rtools/mingw_64/bin/g++  -I\"c:/R/R-34~1.1/include\" -DNDEBUG     -I\"d:/Compiler/gcc-4.9.3/local330/include\"  -Ic:/nlmixr/inst/include -Ic:/R/R-34~1.1/library/STANHE~1/include -Ic:/R/R-34~1.1/library/Rcpp/include -Ic:/R/R-34~1.1/library/RCPPAR~1/include -Ic:/R/R-34~1.1/library/RCPPEI~1/include -Ic:/R/R-34~1.1/library/BH/include   -O2 -Wall  -mtune=core2 -c saem3090757b4bd1x64.cpp -o saem3090757b4bd1x64.o In file included from c:/R/R-34~1.1/library/RCPPAR~1/include/armadillo:52:0,                  from c:/R/R-34~1.1/library/RCPPAR~1/include/RcppArmadilloForward.h:46,                  from c:/R/R-34~1.1/library/RCPPAR~1/include/RcppArmadillo.h:31,                  from saem3090757b4bd1x64.cpp:1: c:/R/R-34~1.1/library/RCPPAR~1/include/armadillo_bits/compiler_setup.hpp:474:96: note: #pragma message: WARNING: use of OpenMP disabled; this compiler doesn't support OpenMP 3.0+    #pragma message (\"WARNING: use of OpenMP disabled; this compiler doesn't support OpenMP 3.0+\")                                                                                                 ^ c:/Rtools/mingw_64/bin/g++ -shared -s -static-libgcc -o saem3090757b4bd1x64.dll tmp.def saem3090757b4bd1x64.o c:/nlmixr/R/rx_855815def56a50f0e7a80e48811d947c_x64.dll -Lc:/R/R-34~1.1/bin/x64 -lRblas -Lc:/R/R-34~1.1/bin/x64 -lRlapack -lgfortran -lm -lquadmath -Ld:/Compiler/gcc-4.9.3/local330/lib/x64 -Ld:/Compiler/gcc-4.9.3/local330/lib -Lc:/R/R-34~1.1/bin/x64 -lR done. 1:    1.8174   4.6328   0.0553   0.0950   0.0950   0.0950   0.6357 50:    1.3900   4.2039   0.0001   0.0679   0.0784   0.1082   0.1992 100:    1.3894   4.2054   0.0107   0.0686   0.0777   0.1111   0.1981 150:    1.3885   4.2041   0.0089   0.0683   0.0778   0.1117   0.1980 Using sympy via SnakeCharmR ## Calculate ETA-based prediction and error derivatives: Calculate Jacobian...................done. Calculate sensitivities....... done. ## Calculate d(f)/d(eta) ## ... ## done ## ... ## done The model-based sensitivities have been calculated Calculating Table Variables... done > fit.s  -- nlmixr SAEM fit (ODE); OBJF calculated from FOCEi approximation -------------       OBJF      AIC      BIC Log-likelihood Condition Number   62337.09 62351.09 62399.01      -31168.55          82.6086   -- Time (sec; fit.s$time): -----------------------------------------------------            saem setup Likelihood Calculation covariance table  elapsed 430.25 31.64                   1.19          0  3.44   -- Parameters (fit.s$par.fixed): -----------------------------------------------               Parameter Estimate     SE    lCl      log Cl (L/hr)     1.39 0.0240  1.73       4.01 (3.83, 4.20)    26.6  lVc         log Vc (L)     4.20 0.0256 0.608       67.0 (63.7, 70.4)    28.5  lKA      log Ka (1/hr)  0.00924 0.0323  349.      1.01 (0.947, 1.08)    34.3  prop.err      prop.err    0.198                             19.8           Shrink(SD)  lCl          0.248  lVc           1.09  lKA           4.19  prop.err      1.81     No correlations in between subject variability (BSV) matrix    Full BSV covariance (fit.s$omega) or correlation (fit.s$omega.R; diagonals=SDs)    Distribution stats (mean/skewness/kurtosis/p-value) available in fit.s$shrink   -- Fit Data (object fit.s is a modified data.frame): ---------------------------  # A tibble: 6,947 x 22    ID     TIME    DV  PRED    RES    WRES IPRED  IRES  IWRES CPRED   CRES  * <fct> <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>  1 1      0.25  205.  198.   6.60  0.0741  189.  16.2  0.434  198.   6.78  2 1      0.5   311.  349. -38.7  -0.261   330. -19.0 -0.291  349. -38.3  3 1      0.75  389.  464. -74.5  -0.398   434. -45.2 -0.526  463. -73.9  # ... with 6,944 more rows, and 11 more variables: CWRES <dbl>, eta.Cl <dbl>,  #   eta.Vc <dbl>, eta.KA <dbl>, depot <dbl>, centr <dbl>, Cl <dbl>, Vc <dbl>,  #   KA <dbl>, kel <dbl>, cp <dbl>"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nlmixr2 fits population PK and PKPD non-linear mixed effects models. — nlmixr2","text":"","code":"# \\donttest{  one.cmt <- function() {  ini({    ## You may label each parameter with a comment    tka <- 0.45 # Ka    tcl <- log(c(0, 2.7, 100)) # Log Cl    ## This works with interactive models    ## You may also label the preceding line with label(\"label text\")    tv <- 3.45; label(\"log V\")    ## the label(\"Label name\") works with all models    eta.ka ~ 0.6    eta.cl ~ 0.3    eta.v ~ 0.1    add.sd <- 0.7    prop.sd <- 0.01  })  model({    ka <- exp(tka + eta.ka)    cl <- exp(tcl + eta.cl)    v <- exp(tv + eta.v)    linCmt() ~ add(add.sd) + prop(prop.sd)  }) }  # fitF <- nlmixr(one.cmt, theo_sd, \"focei\")  fitS <- nlmixr(one.cmt, theo_sd, \"saem\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem model... #> ✔ done #> ℹ calculate uninformed etas #> ℹ done #> params:\ttka\ttcl\ttv\tV(eta.ka)\tV(eta.cl)\tV(eta.v)\tadd.sd\tprop.sd #> Calculating covariance matrix #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem predOnly model 0... #> → finding duplicate expressions in saem predOnly model 1... #> → finding duplicate expressions in saem predOnly model 2... #> → optimizing duplicate expressions in saem predOnly model 2... #> ✔ done #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress phiM in nlmixr2 object, save 64632 #> → compress parHistData in nlmixr2 object, save 14784 #> → compress saem0 in nlmixr2 object, save 30704  # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AllEst.html","id":null,"dir":"Reference","previous_headings":"","what":"Show all the current estimation methods — nlmixr2AllEst","title":"Show all the current estimation methods — nlmixr2AllEst","text":"Show current estimation methods","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AllEst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show all the current estimation methods — nlmixr2AllEst","text":"","code":"nlmixr2AllEst()"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AllEst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show all the current estimation methods — nlmixr2AllEst","text":"List supported nlmixr2 estimation options (est=...)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AllEst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show all the current estimation methods — nlmixr2AllEst","text":"","code":"nlmixr2AllEst() #>  [1] \"bobyqa\"     \"fo\"         \"foce\"       \"focei\"      \"foi\"        #>  [6] \"lbfgsb3c\"   \"n1qn1\"      \"newuoa\"     \"nlm\"        \"nlme\"       #> [11] \"nlminb\"     \"nls\"        \"optim\"      \"posthoc\"    \"predict\"    #> [16] \"rxSolve\"    \"saem\"       \"simulate\"   \"simulation\" \"uobyqa\""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AugPredSolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Augmented Prediction for nlmixr2 fit — nlmixr2AugPredSolve","title":"Augmented Prediction for nlmixr2 fit — nlmixr2AugPredSolve","text":"Augmented Prediction nlmixr2 fit","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AugPredSolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augmented Prediction for nlmixr2 fit — nlmixr2AugPredSolve","text":"","code":"nlmixr2AugPredSolve(   fit,   covsInterpolation = c(\"locf\", \"nocb\", \"linear\", \"midpoint\"),   minimum = NULL,   maximum = NULL,   length.out = 51L,   ... )  # S3 method for class 'nlmixr2FitData' augPred(   object,   primary = NULL,   minimum = NULL,   maximum = NULL,   length.out = 51,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AugPredSolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augmented Prediction for nlmixr2 fit — nlmixr2AugPredSolve","text":"fit Nlmixr2 fit object covsInterpolation specifies interpolation method time-varying covariates. solving ODEs often samples times outside sampling time specified events. happens, time varying covariates interpolated.  Currently can : \"linear\" interpolation, interpolates covariate solving line observed covariates extrapolating new covariate value. \"locf\" – Last observation carried forward (default). \"nocb\" – Next Observation Carried Backward.  method NONMEM uses. \"midpoint\" Last observation carried forward midpoint; Next observation carried backward midpoint. time-varying covariates missing value present, interpolation method use either \"locf\" \"nocb\" throughout type covariate interpolation selected. using linear midpoint interpolation, lower point interpolation use locf interpolate missing covariates upper point use nocb interpolate missing covariates. minimum optional lower limit primary    covariate. Defaults min(primary). maximum optional upper limit primary    covariate. Defaults max(primary). length.optional integer number primary    covariate values evaluate predictions.  Defaults    51. ... methods generic may require additional    arguments. object fitted model object predictions can    extracted, using predict method. primary optional one-sided formula specifying primary    covariate used generate augmented predictions.    default,  covariate can extracted data used generate    object (using getCovariate), used    primary.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AugPredSolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augmented Prediction for nlmixr2 fit — nlmixr2AugPredSolve","text":"Stacked data.frame observations, individual/population predictions.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2AugPredSolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Augmented Prediction for nlmixr2 fit — nlmixr2AugPredSolve","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2CreateOutputFromUi.html","id":null,"dir":"Reference","previous_headings":"","what":"Create nlmixr output from the UI — nlmixr2CreateOutputFromUi","title":"Create nlmixr output from the UI — nlmixr2CreateOutputFromUi","text":"Create nlmixr output UI","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2CreateOutputFromUi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create nlmixr output from the UI — nlmixr2CreateOutputFromUi","text":"","code":"nlmixr2CreateOutputFromUi(   ui,   data = NULL,   control = NULL,   table = NULL,   env = NULL,   est = \"none\" )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2CreateOutputFromUi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create nlmixr output from the UI — nlmixr2CreateOutputFromUi","text":"ui UI used translation data data control focei control data creation table Table options env Environment setup needs following: - `$table` table options - `$origData` – Original Data - `$dataSav` – Processed data .foceiPreProcessData - `$idLvl` – Level information ID factor added - `$covLvl` – Level information items convert factor - `$ui` ui object - `$fullTheta` Full theta information - `$etaObf` data frame ID, etas OBJI - `$cov` covariance - `$covMethod` method calculating covariance - `$adjObf` objective function value adjusted - `$objective` objective function value - `$extra` Extra print information - `$method` Estimation method (printing) - `$omega` Omega matrix - `$theta` theta data frame - `$model` list model information table generation.  Needs `predOnly` model - `$message` Message display - `$est` estimation method - `$ofvType` (optional) tells type ofv currently use details need described est Estimation method","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2CreateOutputFromUi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create nlmixr output from the UI — nlmixr2CreateOutputFromUi","text":"nlmixr fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2CreateOutputFromUi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create nlmixr output from the UI — nlmixr2CreateOutputFromUi","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Est.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for nlmixr2 estimation methods — nlmixr2Est.bobyqa","title":"Generic for nlmixr2 estimation methods — nlmixr2Est.bobyqa","text":"Generic nlmixr2 estimation methods","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for nlmixr2 estimation methods — nlmixr2Est.bobyqa","text":"","code":"# S3 method for class 'bobyqa' nlmixr2Est(env, ...)  # S3 method for class 'focei' nlmixr2Est(env, ...)  # S3 method for class 'foce' nlmixr2Est(env, ...)  # S3 method for class 'posthoc' nlmixr2Est(env, ...)  # S3 method for class 'foi' nlmixr2Est(env, ...)  # S3 method for class 'fo' nlmixr2Est(env, ...)  # S3 method for class 'output' nlmixr2Est(env, ...)  # S3 method for class 'lbfgsb3c' nlmixr2Est(env, ...)  # S3 method for class 'n1qn1' nlmixr2Est(env, ...)  # S3 method for class 'newuoa' nlmixr2Est(env, ...)  # S3 method for class 'nlm' nlmixr2Est(env, ...)  # S3 method for class 'nlme' nlmixr2Est(env, ...)  # S3 method for class 'nlminb' nlmixr2Est(env, ...)  nlmixr2Est(env, ...)  # Default S3 method nlmixr2Est(env, ...)  # S3 method for class 'nls' nlmixr2Est(env, ...)  # S3 method for class 'optim' nlmixr2Est(env, ...)  # S3 method for class 'rxSolve' nlmixr2Est(env, ...)  # S3 method for class 'simulate' nlmixr2Est(env, ...)  # S3 method for class 'simulation' nlmixr2Est(env, ...)  # S3 method for class 'predict' nlmixr2Est(env, ...)  # S3 method for class 'saem' nlmixr2Est(env, ...)  # S3 method for class 'uobyqa' nlmixr2Est(env, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for nlmixr2 estimation methods — nlmixr2Est.bobyqa","text":"env Environment nlmixr2 estimation routines. needs : - rxode2 ui object `$ui` - data fit estimation routine `$data` - control estimation routine's control options `$ui` ... arguments provided `nlmixr2Est()` provided flexibility currently used inside nlmixr","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic for nlmixr2 estimation methods — nlmixr2Est.bobyqa","text":"nlmixr2 fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Est.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic for nlmixr2 estimation methods — nlmixr2Est.bobyqa","text":"S3 generic allows others use nlmixr2   environment estimation routines","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Est.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic for nlmixr2 estimation methods — nlmixr2Est.bobyqa","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Gill83.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the optimal forward difference interval by Gill83 method — nlmixr2Gill83","title":"Get the optimal forward difference interval by Gill83 method — nlmixr2Gill83","text":"Get optimal forward difference interval Gill83 method","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Gill83.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the optimal forward difference interval by Gill83 method — nlmixr2Gill83","text":"","code":"nlmixr2Gill83(   what,   args,   envir = parent.frame(),   which,   gillRtol = sqrt(.Machine$double.eps),   gillK = 10L,   gillStep = 2,   gillFtol = 0 )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Gill83.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the optimal forward difference interval by Gill83 method — nlmixr2Gill83","text":"either function non-empty character string naming     function called. args list arguments function call.      names attribute args gives argument names. envir environment within evaluate call.      useful character string     arguments symbols quoted expressions. parameters calculate forward difference optimal forward difference interval gillRtol relative tolerance used Gill 1983 determination optimal step size. gillK total number possible steps determine optimal forward/central difference step size per parameter (Gill 1983 method).  0, optimal step size determined.  Otherwise optimal step size determined. gillStep looking optimal forward difference step size, step size increase initial estimate .  iteration new step size = (prior step size)*gillStep gillFtol gillFtol gradient error tolerance acceptable issuing warning/error gradient estimates.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Gill83.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the optimal forward difference interval by Gill83 method — nlmixr2Gill83","text":"data frame following columns: - info Gradient evaluation/forward difference information - hf Forward difference final estimate - df Derivative estimate - df2 2nd Derivative Estimate - err Error final estimate derivative - aEps Absolute difference forward numerical differences - rEps Relative Difference backward numerical differences - aEpsC Absolute difference central numerical differences - rEpsC Relative difference central numerical differences info returns one following: - \"Assessed\" Gradient assessed - \"Good Success\" Estimating optimal forward difference interval - \"High Grad Error\" Large error; Derivative estimate error fTol derivative - \"Constant Grad\" Function constant nearly constant parameter - \"Odd/Linear Grad\" Function odd nearly linear, df = K, df2 ~ 0 - \"Grad changes quickly\" df2 increases rapidly h decreases","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Gill83.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the optimal forward difference interval by Gill83 method — nlmixr2Gill83","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Gill83.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the optimal forward difference interval by Gill83 method — nlmixr2Gill83","text":"","code":"## These are taken from the numDeriv::grad examples to show how ## simple gradients are assessed with nlmixr2Gill83  nlmixr2Gill83(sin, pi) #> Gill83 Derivative/Forward Difference #>   (rtol=1.49011611938477e-08; K=10, step=2, ftol=0) #>  #>              info           hf         hphi df df2          err         aEps #> 1 Odd/Linear Grad 2.237911e-11 1.118956e-11 -1   0 1.630865e-13 5.403504e-12 #>           rEps        aEpsC        rEpsC            f #> 1 5.403504e-12 5.403504e-12 5.403504e-12 1.224647e-16  nlmixr2Gill83(sin, (0:10)*2*pi/10) #> Gill83 Derivative/Forward Difference #>   (rtol=1.49011611938477e-08; K=10, step=2, ftol=0) #>  #>                    info           hf         hphi         df           df2 #> 1  Grad changes quickly 1.045337e-07 5.226686e-08  1.0000000  8.796093e+12 #> 2  Grad changes quickly 1.702142e-07 8.510710e-08  0.8090170  4.254583e+19 #> 3  Grad changes quickly 2.358947e-07 1.179473e-07  0.3090168  3.584264e+19 #> 4  Grad changes quickly 3.015752e-07 1.507876e-07 -0.3090171  2.193033e+19 #> 5  Grad changes quickly 3.672556e-07 1.836278e-07 -0.8090173  9.139274e+18 #> 6  Grad changes quickly 4.329361e-07 2.164681e-07 -1.0000004  7.692125e+11 #> 7  Grad changes quickly 4.986166e-07 2.493083e-07 -0.8090174 -4.958098e+18 #> 8  Grad changes quickly 5.642971e-07 2.821485e-07 -0.3090169 -6.263551e+18 #> 9  Grad changes quickly 6.299776e-07 3.149888e-07  0.3090172 -5.025578e+18 #> 10 Grad changes quickly 6.956580e-07 3.478290e-07  0.8090169 -2.547164e+18 #> 11                 Good 2.441411e-04 7.796106e-04  1.0000000  4.583226e-08 #>             err         aEps         rEps        aEpsC        rEpsC #> 1  4.597442e+05 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 2  3.620952e+12 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 3  4.227544e+12 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 4  3.306821e+12 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 5  1.678225e+12 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 6  1.665099e+05 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 7  1.236095e+12 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 8  1.767252e+12 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 9  1.583001e+12 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 10 8.859777e+11 1.045337e-07 1.045337e-07 1.045337e-07 1.045337e-07 #> 11 1.118954e-11 3.352119e-05 3.352119e-05 3.352119e-05 3.352119e-05 #>                f #> 1  -4.583242e-08 #> 2  -4.583242e-08 #> 3  -4.583242e-08 #> 4  -4.583242e-08 #> 5  -4.583242e-08 #> 6  -4.583242e-08 #> 7  -4.583242e-08 #> 8  -4.583242e-08 #> 9  -4.583242e-08 #> 10 -4.583242e-08 #> 11 -4.583242e-08  func0 <- function(x){ sum(sin(x))  } nlmixr2Gill83(func0 , (0:10)*2*pi/10) #> Gill83 Derivative/Forward Difference #>   (rtol=1.49011611938477e-08; K=10, step=2, ftol=0) #>  #>                    info           hf         hphi         df          df2 #> 1  Grad changes quickly 7.391651e-08 3.695825e-08  1.0000000 1.203250e+17 #> 2  Grad changes quickly 1.203596e-07 6.017981e-08  0.8090168 4.538135e+16 #> 3  Grad changes quickly 1.668027e-07 8.340136e-08  0.3090166 2.362831e+16 #> 4  Grad changes quickly 2.132458e-07 1.066229e-07 -0.3090170 1.445699e+16 #> 5  Grad changes quickly 2.596889e-07 1.298445e-07 -0.8090170 9.748364e+15 #> 6       Odd/Linear Grad 3.061321e-07 1.530660e-07 -1.0000000 0.000000e+00 #> 7       High Grad Error 4.821089e-08 3.525752e-07 -0.8090170 5.876689e-01 #> 8       High Grad Error 3.788199e-08 3.990183e-07 -0.3090170 9.518254e-01 #> 9                  Good 3.789588e-08 4.454614e-07  0.3090170 9.511281e-01 #> 10                 Good 4.818847e-08 4.919045e-07  0.8090170 5.882158e-01 #> 11                 Good 1.726341e-04 5.512680e-04  1.0000000 4.583208e-08 #>             err         aEps         rEps        aEpsC        rEpsC #> 1  4.447003e+09 7.391651e-08 7.391651e-08 7.391651e-08 7.391651e-08 #> 2  2.731041e+09 7.391651e-08 7.391651e-08 7.391651e-08 7.391651e-08 #> 3  1.970634e+09 7.391651e-08 7.391651e-08 7.391651e-08 7.391651e-08 #> 4  1.541446e+09 7.391651e-08 7.391651e-08 7.391651e-08 7.391651e-08 #> 5  1.265771e+09 7.391651e-08 7.391651e-08 7.391651e-08 7.391651e-08 #> 6  2.230920e-09 7.392210e-08 7.392210e-08 7.392210e-08 7.392210e-08 #> 7  2.833204e-08 1.010729e-08 1.010729e-08 1.010729e-08 1.010729e-08 #> 8  3.605704e-08 7.017484e-09 7.017484e-09 7.017484e-09 7.017484e-09 #> 9  3.604383e-08 6.288156e-09 6.288156e-09 6.288156e-09 6.288156e-09 #> 10 2.834522e-08 7.241087e-09 7.241087e-09 7.241087e-09 7.241087e-09 #> 11 7.912182e-12 2.370311e-05 2.370311e-05 2.370311e-05 2.370311e-05 #>                f #> 1  -2.291621e-08 #> 2  -2.291621e-08 #> 3  -2.291621e-08 #> 4  -2.291621e-08 #> 5  -2.291621e-08 #> 6  -2.291621e-08 #> 7  -2.291621e-08 #> 8  -2.291621e-08 #> 9  -2.291621e-08 #> 10 -2.291621e-08 #> 11 -2.291621e-08  func1 <- function(x){ sin(10*x) - exp(-x) } curve(func1,from=0,to=5)   x <- 2.04 numd1 <- nlmixr2Gill83(func1, x) exact <- 10*cos(10*x) + exp(-x) c(numd1$df, exact, (numd1$df - exact)/exact) #> [1]  0.332398077  0.333537144 -0.003415112  x <- c(1:10) numd1 <- nlmixr2Gill83(func1, x) exact <- 10*cos(10*x) + exp(-x) cbind(numd1=numd1$df, exact, err=(numd1$df - exact)/exact) #>           numd1     exact           err #>  [1,] -8.022836 -8.022836 -1.369260e-11 #>  [2,]  4.216156  4.216156 -2.839580e-11 #>  [3,]  1.592302  1.592302 -1.150871e-11 #>  [4,] -6.651065 -6.651065 -4.125002e-11 #>  [5,]  9.656398  9.656398 -5.172856e-11 #>  [6,] -9.521651 -9.521651  2.985064e-10 #>  [7,]  6.334104  6.334104 -8.697948e-11 #>  [8,] -1.103537 -1.103537 -9.731425e-11 #>  [9,] -4.480613 -4.480613 -1.320695e-10 #> [10,]  8.623852  8.623234  7.167430e-05  sc2.f <- function(x){   n <- length(x)    sum((1:n) * (exp(x) - x)) / n }  sc2.g <- function(x){   n <- length(x)   (1:n) * (exp(x) - 1) / n }  x0 <- rnorm(100) exact <- sc2.g(x0)  g <- nlmixr2Gill83(sc2.f, x0)  max(abs(exact - g$df)/(1 + abs(exact))) #> [1] 0.001003462"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2GradFun.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gradient function based on gill numerical differences — nlmixr2Eval_","title":"Create a gradient function based on gill numerical differences — nlmixr2Eval_","text":"Create gradient function based gill numerical differences","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2GradFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gradient function based on gill numerical differences — nlmixr2Eval_","text":"","code":"nlmixr2Eval_(theta, md5)  nlmixr2Unscaled_(theta, md5)  nlmixr2Grad_(theta, md5)  nlmixr2ParHist_(md5)  nlmixr2GradFun(   what,   envir = parent.frame(),   which,   thetaNames,   gillRtol = sqrt(.Machine$double.eps),   gillK = 10L,   gillStep = 2,   gillFtol = 0,   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1 )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2GradFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gradient function based on gill numerical differences — nlmixr2Eval_","text":"theta internal functions theta parameter values md5 md5 identifier internal gradient function information. either function non-empty character string naming     function called. envir environment within evaluate call.      useful character string     arguments symbols quoted expressions. parameters calculate forward difference optimal forward difference interval thetaNames Names theta parameters gillRtol relative tolerance used Gill 1983 determination optimal step size. gillK total number possible steps determine optimal forward/central difference step size per parameter (Gill 1983 method).  0, optimal step size determined.  Otherwise optimal step size determined. gillStep looking optimal forward difference step size, step size increase initial estimate .  iteration new step size = (prior step size)*gillStep gillFtol gillFtol gradient error tolerance acceptable issuing warning/error gradient estimates. useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2GradFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gradient function based on gill numerical differences — nlmixr2Eval_","text":"list `eval`, `grad`, `hist` `unscaled`   functions.  internal module used dynmodel","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2GradFun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gradient function based on gill numerical differences — nlmixr2Eval_","text":"","code":"func0 <- function(x){ sum(sin(x))  }  ## This will printout every interation or when print=X gf <- nlmixr2GradFun(func0)  ## x x <- (0:10)*2*pi/10; gf$eval(x) #> [1] -2.291621e-08 gf$grad(x) #>  [1]  1.0000000  0.8090168  0.3090166 -0.3090170 -0.8090170 -1.0000000 #>  [7] -0.8090170 -0.3090170  0.3090170  0.8090170  1.0000000  ## x2 x2 <- x+0.1 gf$eval(x2) #> [1] 0.1001453 gf$grad(x2) #>  [1]  0.9950042  0.7462946  0.2125259 -0.4024205 -0.8636559 -0.9950354 #>  [7] -0.7462947 -0.2125260  0.4024204  0.8636559  0.9949954  ## Gives the parameter history as a data frame gf$hist() #>   iter               type          objf        t1        t2        t3 #> 1    1           Unscaled -2.291621e-08 0.0000000 0.6283185 1.2566371 #> 2    2           Unscaled  1.001453e-01 0.1000000 0.7283185 1.3566371 #> 3    1    Gill83 Gradient            NA 1.0000000 0.8090168 0.3090166 #> 4    2 Forward Difference            NA 0.9950042 0.7462946 0.2125259 #>           t4         t5         t6         t7        t8        t9       t10 #> 1  1.8849556  2.5132741  3.1415926  3.7699112  4.398230 5.0265482 5.6548667 #> 2  1.9849556  2.6132741  3.2412792  3.8699112  4.498230 5.1265482 5.7548667 #> 3 -0.3090170 -0.8090170 -1.0000000 -0.8090170 -0.309017 0.3090170 0.8090170 #> 4 -0.4024205 -0.8636559 -0.9950354 -0.7462947 -0.212526 0.4024204 0.8636559 #>         t11 #> 1 6.2831853 #> 2 6.3831853 #> 3 1.0000000 #> 4 0.9949954"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Hess.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Hessian — nlmixr2Hess","title":"Calculate Hessian — nlmixr2Hess","text":"Unlike `stats::optimHess` assumes gradient accurate, nlmixr2Hess make strong assumption gradient accurate takes function evaluations calculate Hessian.  addition, procedures optimizes forward difference interval nlmixr2Gill83","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Hess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Hessian — nlmixr2Hess","text":"","code":"nlmixr2Hess(par, fn, ..., envir = parent.frame())"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Hess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Hessian — nlmixr2Hess","text":"par Initial values parameters optimized . fn function minimized (maximized), first    argument vector parameters minimization take    place.  return scalar result. ... Extra arguments sent nlmixr2Gill83 envir environment within evaluate call.      useful character string     arguments symbols quoted expressions.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Hess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Hessian — nlmixr2Hess","text":"Hessian matrix based Gill83","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Hess.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Hessian — nlmixr2Hess","text":"analytical gradient function, use `stats::optimHess`","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Hess.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate Hessian — nlmixr2Hess","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Hess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Hessian — nlmixr2Hess","text":"","code":"func0 <- function(x){ sum(sin(x))  }  x <- (0:10)*2*pi/10  nlmixr2Hess(x, func0) #>               [,1]        [,2]        [,3]        [,4]        [,5]       [,6] #>  [1,] 143438578824           0           0           0           0          0 #>  [2,]            0 54098751870           0           0           0          0 #>  [3,]            0           0 28167126506           0           0          0 #>  [4,]            0           0           0 17234064451           0          0 #>  [5,]            0           0           0           0 11620957271          0 #>  [6,]            0           0           0           0           0 8362405349 #>  [7,]            0           0           0           0           0          0 #>  [8,]            0           0           0           0           0          0 #>  [9,]            0           0           0           0           0          0 #> [10,]            0           0           0           0           0          0 #> [11,]            0           0           0           0           0          0 #>               [,7]         [,8]         [,9]        [,10]    [,11] #>  [1,]            0            0            0            0     0.00 #>  [2,]            0            0            0            0     0.00 #>  [3,]            0            0            0            0     0.00 #>  [4,]            0            0            0            0     0.00 #>  [5,]            0            0            0            0     0.00 #>  [6,]            0            0            0            0     0.00 #>  [7,] 337177531807            0            0            0     0.00 #>  [8,]            0 546113920621            0            0     0.00 #>  [9,]            0            0 545713835656            0     0.00 #> [10,]            0            0            0 337491323869     0.00 #> [11,]            0            0            0            0 26296.35  fr <- function(x) {   ## Rosenbrock Banana function     x1 <- x[1]     x2 <- x[2]     100 * (x2 - x1 * x1)^2 + (1 - x1)^2 } grr <- function(x) { ## Gradient of 'fr'     x1 <- x[1]     x2 <- x[2]     c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),        200 *      (x2 - x1 * x1)) }  h1 <- optimHess(c(1.2,1.2), fr, grr)  h2 <- optimHess(c(1.2,1.2), fr)  ## in this case h3 is closer to h1 where the gradient is known  h3 <- nlmixr2Hess(c(1.2,1.2), fr)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"A list and description of the fields in the nlmxir2 object — nlmixr2Keywords","title":"A list and description of the fields in the nlmxir2 object — nlmixr2Keywords","text":"list description fields nlmxir2 object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list and description of the fields in the nlmxir2 object — nlmixr2Keywords","text":"","code":"nlmixr2Keywords"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Keywords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list and description of the fields in the nlmxir2 object — nlmixr2Keywords","text":"data frame 2 columns 40 rows Field Name field nlmixr2 object Description Description information field","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Logo.html","id":null,"dir":"Reference","previous_headings":"","what":"Messages the nlmixr2 logo... — nlmixr2Logo","title":"Messages the nlmixr2 logo... — nlmixr2Logo","text":"Messages nlmixr2 logo...","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Messages the nlmixr2 logo... — nlmixr2Logo","text":"","code":"nlmixr2Logo(str = \"\", version = sessionInfo()$otherPkgs$nlmixr2$Version)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Logo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Messages the nlmixr2 logo... — nlmixr2Logo","text":"str String print version Version information (default use package version)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Logo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Messages the nlmixr2 logo... — nlmixr2Logo","text":"nothing; Called display version information","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Logo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Messages the nlmixr2 logo... — nlmixr2Logo","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2NlmeControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Values for nlme Fit with extra options for nlmixr — nlmixr2NlmeControl","title":"Control Values for nlme Fit with extra options for nlmixr — nlmixr2NlmeControl","text":"values supplied function call replace defaults list possible arguments returned.  returned list used ‘control’ argument ‘nlme’ function.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2NlmeControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Values for nlme Fit with extra options for nlmixr — nlmixr2NlmeControl","text":"","code":"nlmixr2NlmeControl(   maxIter = 100,   pnlsMaxIter = 100,   msMaxIter = 100,   minScale = 0.001,   tolerance = 1e-05,   niterEM = 25,   pnlsTol = 0.001,   msTol = 1e-06,   returnObject = FALSE,   msVerbose = FALSE,   msWarnNoConv = TRUE,   gradHess = TRUE,   apVar = TRUE,   .relStep = .Machine$double.eps^(1/3),   minAbsParApVar = 0.05,   opt = c(\"nlminb\", \"nlm\"),   natural = TRUE,   sigma = NULL,   optExpression = TRUE,   literalFix = TRUE,   sumProd = FALSE,   rxControl = NULL,   method = c(\"ML\", \"REML\"),   random = NULL,   fixed = NULL,   weights = NULL,   verbose = TRUE,   returnNlme = FALSE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   muRefCovAlg = TRUE,   ... )  nlmeControl(   maxIter = 100,   pnlsMaxIter = 100,   msMaxIter = 100,   minScale = 0.001,   tolerance = 1e-05,   niterEM = 25,   pnlsTol = 0.001,   msTol = 1e-06,   returnObject = FALSE,   msVerbose = FALSE,   msWarnNoConv = TRUE,   gradHess = TRUE,   apVar = TRUE,   .relStep = .Machine$double.eps^(1/3),   minAbsParApVar = 0.05,   opt = c(\"nlminb\", \"nlm\"),   natural = TRUE,   sigma = NULL,   optExpression = TRUE,   literalFix = TRUE,   sumProd = FALSE,   rxControl = NULL,   method = c(\"ML\", \"REML\"),   random = NULL,   fixed = NULL,   weights = NULL,   verbose = TRUE,   returnNlme = FALSE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   muRefCovAlg = TRUE,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2NlmeControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Values for nlme Fit with extra options for nlmixr — nlmixr2NlmeControl","text":"maxIter maximum number iterations nlme    optimization algorithm.  Default 50. pnlsMaxIter maximum number iterations    PNLS optimization step inside nlme    optimization.  Default 7. msMaxIter maximum number iterations nlminb    (iter.max) nlm (iterlim,    10-th step) optimization step inside nlme    optimization.  Default 50 (may small e.g.    overparametrized cases). minScale minimum factor shrink default step size    attempt decrease sum squares PNLS step.    Default 0.001. tolerance tolerance convergence criterion    nlme algorithm.  Default 1e-6. niterEM number iterations EM algorithm used refine    initial estimates random effects variance-covariance    coefficients.  Default 25. pnlsTol tolerance convergence criterion PNLS    step.  Default 1e-3. msTol tolerance convergence criterion nlm,    passed gradtol argument function (see    documentation nlm).  Default 1e-7. returnObject logical value indicating whether fitted    object returned maximum number iterations    reached without convergence algorithm.  Default    FALSE. msVerbose logical value passed trace    nlminb(.., control= list(trace = *, ..))    argument print.level nlm().  Default    FALSE. msWarnNoConv logical indicating warning    signalled whenever minimization (opt)    LME step converge; defaults TRUE. gradHess logical value indicating whether numerical gradient    vectors Hessian matrices log-likelihood function    used nlm optimization. option available    correlation structure (corStruct) variance    function structure (varFunc) \"varying\" parameters    pdMat classes used random effects structure    pdSymm (general positive-definite), pdDiag (diagonal),    pdIdent (multiple identity),     pdCompSymm (compound symmetry).  Default TRUE. apVar logical value indicating whether approximate    covariance matrix variance-covariance parameters    calculated.  Default TRUE. .relStep relative step numerical derivatives    calculations.  Default .Machine$double.eps^(1/3). minAbsParApVar numeric value - minimum absolute parameter value    approximate variance calculation.  default 0.05. opt optimizer used, either \"nlminb\" (   default) \"nlm\". natural logical value indicating whether pdNatural    parametrization used general positive-definite matrices    (pdSymm) reStruct, approximate covariance    matrix estimators calculated.  Default TRUE. sigma optionally positive number fix residual error .    NULL, default, 0, sigma estimated. optExpression Optimize rxode2 expression speed calculation. default turned . literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. rxControl `rxode2` ODE solving options fitting, created `rxControl()` method character string.  \"REML\" model fit    maximizing restricted log-likelihood.  \"ML\"    log-likelihood maximized.  Defaults \"ML\". random optionally, following: () two-sided formula    form r1+...+rn~x1+...+xm | g1/.../gQ,    r1,...,rn naming parameters included right    hand side model, x1+...+xm specifying    random-effects model    parameters g1/.../gQ grouping structure    (Q may equal 1, case /    required). random effects formula repeated    levels grouping, case multiple levels    grouping; (ii) two-sided formula form    r1+...+rn~x1+..+xm, list two-sided formulas form    r1~x1+...+xm, possibly different random-effects models    different parameters, pdMat object two-sided    formula, list two-sided formulas (.e. non-NULL value    formula(random)), list pdMat objects two-sided    formulas, lists two-sided formulas. case, grouping    structure formula given groups, derived    data used fit nonlinear mixed-effects model,    inherit class  groupedData,; (iii) named list    formulas, lists formulas, pdMat objects (ii),    grouping factors names. order nesting    assumed order order elements    list; (iv) reStruct object. See documentation    pdClasses description available pdMat    classes. Defaults fixed,    resulting fixed effects also random effects. fixed two-sided linear formula form    f1+...+fn~x1+...+xm, list two-sided formulas form    f1~x1+...+xm, possibly different models different    parameters. f1,...,fn names parameters included    right hand side model x1+...+xm    expressions define linear models parameters (left    hand side formula contains several parameters,    assumed follow linear model, described right hand    side expression).    1 right hand side formula(s) indicates single    fixed effects corresponding parameter(s). weights optional varFunc object one-sided formula    describing within-group heteroscedasticity structure. given    formula, used argument varFixed,    corresponding fixed variance weights. See documentation    varClasses description available varFunc    classes. Defaults NULL, corresponding homoscedastic    within-group errors. verbose optional logical value. TRUE information    evolution iterative algorithm printed. Default    FALSE. returnNlme Returns nlme object instead nlmixr object (default FALSE).  nlme specific options `random`, `fixed`, `sens`, nlme object returned addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. muRefCovAlg controls algebraic expressions can   mu-referenced treated mu-referenced covariates : 1. Creating internal data-variable `nlmixrMuDerCov#`      algebraic mu-referenced expression 2. Change algebraic expression `nlmixrMuDerCov# * mu_cov_theta` 3. Use internal mu-referenced covariate saem 4. optimization completed, replace `model()` old   `model()` expression 5. Remove `nlmixrMuDerCov#` nlmix2 output general, covariates accurate since changes system linear compartment model.  Therefore, default `TRUE`. ... , named control arguments passed    nlminb (apart trace iter.max    mentioned ), used (eval.max    abs.tol ).","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2NlmeControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Values for nlme Fit with extra options for nlmixr — nlmixr2NlmeControl","text":"nlmixr-nlme list","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2NlmeControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control Values for nlme Fit with extra options for nlmixr — nlmixr2NlmeControl","text":"","code":"nlmeControl() #> $maxIter #> [1] 100 #>  #> $pnlsMaxIter #> [1] 100 #>  #> $msMaxIter #> [1] 100 #>  #> $minScale #> [1] 0.001 #>  #> $tolerance #> [1] 1e-05 #>  #> $niterEM #> [1] 25 #>  #> $pnlsTol #> [1] 0.001 #>  #> $msTol #> [1] 1e-06 #>  #> $returnObject #> [1] FALSE #>  #> $msVerbose #> [1] FALSE #>  #> $msWarnNoConv #> [1] TRUE #>  #> $gradHess #> [1] TRUE #>  #> $apVar #> [1] TRUE #>  #> $.relStep #> [1] 6.055454e-06 #>  #> $minAbsParApVar #> [1] 0.05 #>  #> $opt #> [1] \"nlminb\" #>  #> $natural #> [1] TRUE #>  #> $sigma #> [1] 0 #>  #> $optExpression #> [1] TRUE #>  #> $literalFix #> [1] TRUE #>  #> $sumProd #> [1] FALSE #>  #> $rxControl #> $scale #> NULL #>  #> $method #> liblsoda  #>        2  #>  #> $atol #> [1] 1e-04 #>  #> $rtol #> [1] 1e-04 #>  #> $maxsteps #> [1] 70000 #>  #> $hmin #> [1] 0 #>  #> $hmax #> [1] NA #>  #> $hini #> [1] 0 #>  #> $maxordn #> [1] 12 #>  #> $maxords #> [1] 5 #>  #> $covsInterpolation #> locf  #>    1  #>  #> $addCov #> [1] TRUE #>  #> $returnType #> rxSolve  #>       0  #>  #> $sigma #> NULL #>  #> $sigmaDf #> NULL #>  #> $nCoresRV #> [1] 1 #>  #> $sigmaIsChol #> [1] FALSE #>  #> $sigmaSeparation #> [1] \"auto\" #>  #> $sigmaXform #> identity  #>        4  #>  #> $nDisplayProgress #> [1] 10000 #>  #> $amountUnits #> [1] NA #>  #> $timeUnits #> [1] \"hours\" #>  #> $addDosing #> [1] FALSE #>  #> $stateTrim #> [1] Inf #>  #> $updateObject #> [1] FALSE #>  #> $omega #> NULL #>  #> $omegaDf #> NULL #>  #> $omegaIsChol #> [1] FALSE #>  #> $omegaSeparation #> [1] \"auto\" #>  #> $omegaXform #> variance  #>        6  #>  #> $nSub #> [1] 1 #>  #> $thetaMat #> NULL #>  #> $thetaDf #> NULL #>  #> $thetaIsChol #> [1] FALSE #>  #> $nStud #> [1] 1 #>  #> $dfSub #> [1] 0 #>  #> $dfObs #> [1] 0 #>  #> $seed #> NULL #>  #> $nsim #> NULL #>  #> $minSS #> [1] 10 #>  #> $maxSS #> [1] 1000 #>  #> $strictSS #> [1] 1 #>  #> $infSSstep #> [1] 12 #>  #> $istateReset #> [1] TRUE #>  #> $subsetNonmem #> [1] TRUE #>  #> $hmaxSd #> [1] 0 #>  #> $maxAtolRtolFactor #> [1] 0.1 #>  #> $from #> NULL #>  #> $to #> NULL #>  #> $by #> NULL #>  #> $length.out #> NULL #>  #> $iCov #> NULL #>  #> $keep #> NULL #>  #> $keepF #> character(0) #>  #> $drop #> NULL #>  #> $warnDrop #> [1] TRUE #>  #> $omegaLower #> [1] -Inf #>  #> $omegaUpper #> [1] Inf #>  #> $sigmaLower #> [1] -Inf #>  #> $sigmaUpper #> [1] Inf #>  #> $thetaLower #> [1] -Inf #>  #> $thetaUpper #> [1] Inf #>  #> $indLinPhiM #> [1] 0 #>  #> $indLinPhiTol #> [1] 1e-07 #>  #> $indLinMatExpType #> expokit  #>       2  #>  #> $indLinMatExpOrder #> [1] 6 #>  #> $idFactor #> [1] TRUE #>  #> $mxhnil #> [1] 0 #>  #> $hmxi #> [1] 0 #>  #> $warnIdSort #> [1] TRUE #>  #> $ssAtol #> [1] 1e-08 #>  #> $ssRtol #> [1] 1e-06 #>  #> $safeZero #> [1] 1 #>  #> $sumType #> pairwise  #>        1  #>  #> $prodType #> long double  #>           1  #>  #> $sensType #> advan  #>     4  #>  #> $linDiff #>    tlag       f    rate     dur   tlag2      f2   rate2    dur2  #> 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05  #>  #> $linDiffCentral #>  tlag     f  rate   dur tlag2    f2 rate2  dur2  #>  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  #>  #> $resample #> NULL #>  #> $resampleID #> [1] TRUE #>  #> $maxwhile #> [1] 100000 #>  #> $cores #> [1] 0 #>  #> $atolSens #> [1] 1e-08 #>  #> $rtolSens #> [1] 1e-06 #>  #> $ssAtolSens #> [1] 1e-08 #>  #> $ssRtolSens #> [1] 1e-06 #>  #> $simVariability #> [1] NA #>  #> $nLlikAlloc #> NULL #>  #> $useStdPow #> [1] 0 #>  #> $naTimeHandle #> ignore  #>      1  #>  #> $addlKeepsCov #> [1] FALSE #>  #> $addlDropSs #> [1] TRUE #>  #> $ssAtDoseTime #> [1] TRUE #>  #> $ss2cancelAllPending #> [1] FALSE #>  #> $naInterpolation #> locf  #>    1  #>  #> $keepInterpolation #> na  #>  2  #>  #> $safeLog #> [1] 1 #>  #> $safePow #> [1] 1 #>  #> $.zeros #> NULL #>  #> attr(,\"class\") #> [1] \"rxControl\" #>  #> $method #> [1] \"ML\" #>  #> $verbose #> [1] TRUE #>  #> $returnNlme #> [1] FALSE #>  #> $addProp #> [1] \"combined2\" #>  #> $calcTables #> [1] TRUE #>  #> $compress #> [1] TRUE #>  #> $random #> NULL #>  #> $fixed #> NULL #>  #> $weights #> NULL #>  #> $ci #> [1] 0.95 #>  #> $sigdig #> [1] 4 #>  #> $sigdigTable #> [1] 4 #>  #> $muRefCovAlg #> [1] TRUE #>  #> $genRxControl #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"nlmeControl\" nlmixr2NlmeControl() #> $maxIter #> [1] 100 #>  #> $pnlsMaxIter #> [1] 100 #>  #> $msMaxIter #> [1] 100 #>  #> $minScale #> [1] 0.001 #>  #> $tolerance #> [1] 1e-05 #>  #> $niterEM #> [1] 25 #>  #> $pnlsTol #> [1] 0.001 #>  #> $msTol #> [1] 1e-06 #>  #> $returnObject #> [1] FALSE #>  #> $msVerbose #> [1] FALSE #>  #> $msWarnNoConv #> [1] TRUE #>  #> $gradHess #> [1] TRUE #>  #> $apVar #> [1] TRUE #>  #> $.relStep #> [1] 6.055454e-06 #>  #> $minAbsParApVar #> [1] 0.05 #>  #> $opt #> [1] \"nlminb\" #>  #> $natural #> [1] TRUE #>  #> $sigma #> [1] 0 #>  #> $optExpression #> [1] TRUE #>  #> $literalFix #> [1] TRUE #>  #> $sumProd #> [1] FALSE #>  #> $rxControl #> $scale #> NULL #>  #> $method #> liblsoda  #>        2  #>  #> $atol #> [1] 1e-04 #>  #> $rtol #> [1] 1e-04 #>  #> $maxsteps #> [1] 70000 #>  #> $hmin #> [1] 0 #>  #> $hmax #> [1] NA #>  #> $hini #> [1] 0 #>  #> $maxordn #> [1] 12 #>  #> $maxords #> [1] 5 #>  #> $covsInterpolation #> locf  #>    1  #>  #> $addCov #> [1] TRUE #>  #> $returnType #> rxSolve  #>       0  #>  #> $sigma #> NULL #>  #> $sigmaDf #> NULL #>  #> $nCoresRV #> [1] 1 #>  #> $sigmaIsChol #> [1] FALSE #>  #> $sigmaSeparation #> [1] \"auto\" #>  #> $sigmaXform #> identity  #>        4  #>  #> $nDisplayProgress #> [1] 10000 #>  #> $amountUnits #> [1] NA #>  #> $timeUnits #> [1] \"hours\" #>  #> $addDosing #> [1] FALSE #>  #> $stateTrim #> [1] Inf #>  #> $updateObject #> [1] FALSE #>  #> $omega #> NULL #>  #> $omegaDf #> NULL #>  #> $omegaIsChol #> [1] FALSE #>  #> $omegaSeparation #> [1] \"auto\" #>  #> $omegaXform #> variance  #>        6  #>  #> $nSub #> [1] 1 #>  #> $thetaMat #> NULL #>  #> $thetaDf #> NULL #>  #> $thetaIsChol #> [1] FALSE #>  #> $nStud #> [1] 1 #>  #> $dfSub #> [1] 0 #>  #> $dfObs #> [1] 0 #>  #> $seed #> NULL #>  #> $nsim #> NULL #>  #> $minSS #> [1] 10 #>  #> $maxSS #> [1] 1000 #>  #> $strictSS #> [1] 1 #>  #> $infSSstep #> [1] 12 #>  #> $istateReset #> [1] TRUE #>  #> $subsetNonmem #> [1] TRUE #>  #> $hmaxSd #> [1] 0 #>  #> $maxAtolRtolFactor #> [1] 0.1 #>  #> $from #> NULL #>  #> $to #> NULL #>  #> $by #> NULL #>  #> $length.out #> NULL #>  #> $iCov #> NULL #>  #> $keep #> NULL #>  #> $keepF #> character(0) #>  #> $drop #> NULL #>  #> $warnDrop #> [1] TRUE #>  #> $omegaLower #> [1] -Inf #>  #> $omegaUpper #> [1] Inf #>  #> $sigmaLower #> [1] -Inf #>  #> $sigmaUpper #> [1] Inf #>  #> $thetaLower #> [1] -Inf #>  #> $thetaUpper #> [1] Inf #>  #> $indLinPhiM #> [1] 0 #>  #> $indLinPhiTol #> [1] 1e-07 #>  #> $indLinMatExpType #> expokit  #>       2  #>  #> $indLinMatExpOrder #> [1] 6 #>  #> $idFactor #> [1] TRUE #>  #> $mxhnil #> [1] 0 #>  #> $hmxi #> [1] 0 #>  #> $warnIdSort #> [1] TRUE #>  #> $ssAtol #> [1] 1e-08 #>  #> $ssRtol #> [1] 1e-06 #>  #> $safeZero #> [1] 1 #>  #> $sumType #> pairwise  #>        1  #>  #> $prodType #> long double  #>           1  #>  #> $sensType #> advan  #>     4  #>  #> $linDiff #>    tlag       f    rate     dur   tlag2      f2   rate2    dur2  #> 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05 1.5e-05  #>  #> $linDiffCentral #>  tlag     f  rate   dur tlag2    f2 rate2  dur2  #>  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  #>  #> $resample #> NULL #>  #> $resampleID #> [1] TRUE #>  #> $maxwhile #> [1] 100000 #>  #> $cores #> [1] 0 #>  #> $atolSens #> [1] 1e-08 #>  #> $rtolSens #> [1] 1e-06 #>  #> $ssAtolSens #> [1] 1e-08 #>  #> $ssRtolSens #> [1] 1e-06 #>  #> $simVariability #> [1] NA #>  #> $nLlikAlloc #> NULL #>  #> $useStdPow #> [1] 0 #>  #> $naTimeHandle #> ignore  #>      1  #>  #> $addlKeepsCov #> [1] FALSE #>  #> $addlDropSs #> [1] TRUE #>  #> $ssAtDoseTime #> [1] TRUE #>  #> $ss2cancelAllPending #> [1] FALSE #>  #> $naInterpolation #> locf  #>    1  #>  #> $keepInterpolation #> na  #>  2  #>  #> $safeLog #> [1] 1 #>  #> $safePow #> [1] 1 #>  #> $.zeros #> NULL #>  #> attr(,\"class\") #> [1] \"rxControl\" #>  #> $method #> [1] \"ML\" #>  #> $verbose #> [1] TRUE #>  #> $returnNlme #> [1] FALSE #>  #> $addProp #> [1] \"combined2\" #>  #> $calcTables #> [1] TRUE #>  #> $compress #> [1] TRUE #>  #> $random #> NULL #>  #> $fixed #> NULL #>  #> $weights #> NULL #>  #> $ci #> [1] 0.95 #>  #> $sigdig #> [1] 4 #>  #> $sigdigTable #> [1] 4 #>  #> $muRefCovAlg #> [1] TRUE #>  #> $genRxControl #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"nlmeControl\""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print x using the message facility — nlmixr2Print","title":"Print x using the message facility — nlmixr2Print","text":"allows suppressMessages work print functions.  captures output function sends message routine.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print x using the message facility — nlmixr2Print","text":"","code":"nlmixr2Print(x, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print x using the message facility — nlmixr2Print","text":"x object print ... things output","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print x using the message facility — nlmixr2Print","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print x using the message facility — nlmixr2Print","text":"catpureOutput used since much faster internal capture.output see https://www.r-bloggers.com/performance-captureoutput--much-faster--capture-output/","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print x using the message facility — nlmixr2Print","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate nlmixr2 — nlmixr2Validate","title":"Validate nlmixr2 — nlmixr2Validate","text":"allows easy validation/qualification nlmixr2 running testing suite system.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate nlmixr2 — nlmixr2Validate","text":"","code":"nlmixr2Validate(type = NULL, skipOnCran = TRUE)  nmTest(type = NULL, skipOnCran = TRUE)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate nlmixr2 — nlmixr2Validate","text":"type test run skipOnCran `TRUE` skip test CRAN.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate nlmixr2 — nlmixr2Validate","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Validate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate nlmixr2 — nlmixr2Validate","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Version.html","id":null,"dir":"Reference","previous_headings":"","what":"Display nlmixr2's version — nlmixr2Version","title":"Display nlmixr2's version — nlmixr2Version","text":"Display nlmixr2's version","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display nlmixr2's version — nlmixr2Version","text":"","code":"nlmixr2Version()"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display nlmixr2's version — nlmixr2Version","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixr2Version.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Display nlmixr2's version — nlmixr2Version","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddObjectiveFunctionDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"Add objective function data frame to the current objective function — nlmixrAddObjectiveFunctionDataFrame","title":"Add objective function data frame to the current objective function — nlmixrAddObjectiveFunctionDataFrame","text":"Add objective function data frame current objective function","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddObjectiveFunctionDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add objective function data frame to the current objective function — nlmixrAddObjectiveFunctionDataFrame","text":"","code":"nlmixrAddObjectiveFunctionDataFrame(fit, objDf, type, etaObf = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddObjectiveFunctionDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add objective function data frame to the current objective function — nlmixrAddObjectiveFunctionDataFrame","text":"fit nlmixr fit object objDf nlmixr objective function data frame column names \"OBJF\", \"AIC\", \"BIC\", \"Log-likelihood\" \"Condition#(Cov)\" \"Condition#(Cor)\" type Objective Function Type etaObf Eta objective function table add (focei) give focei objective function","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddObjectiveFunctionDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add objective function data frame to the current objective function — nlmixrAddObjectiveFunctionDataFrame","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddObjectiveFunctionDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add objective function data frame to the current objective function — nlmixrAddObjectiveFunctionDataFrame","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddTiming.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually add time to a nlmixr2 object — nlmixrAddTiming","title":"Manually add time to a nlmixr2 object — nlmixrAddTiming","text":"Manually add time nlmixr2 object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddTiming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually add time to a nlmixr2 object — nlmixrAddTiming","text":"","code":"nlmixrAddTiming(object, name, time)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddTiming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually add time to a nlmixr2 object — nlmixrAddTiming","text":"object nlmixr2 object name string timing name time time (seconds)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddTiming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually add time to a nlmixr2 object — nlmixrAddTiming","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddTiming.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manually add time to a nlmixr2 object — nlmixrAddTiming","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrAddTiming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manually add time to a nlmixr2 object — nlmixrAddTiming","text":"","code":"# \\donttest{  one.cmt <- function() {  ini({    ## You may label each parameter with a comment    tka <- 0.45 # Ka    tcl <- log(c(0, 2.7, 100)) # Log Cl    ## This works with interactive models    ## You may also label the preceding line with label(\"label text\")    tv <- 3.45; label(\"log V\")    ## the label(\"Label name\") works with all models    eta.ka ~ 0.6    eta.cl ~ 0.3    eta.v ~ 0.1    add.sd <- 0.7  })  model({    ka <- exp(tka + eta.ka)    cl <- exp(tcl + eta.cl)    v <- exp(tv + eta.v)    linCmt() ~ add(add.sd)  }) }  fit <- nlmixr(one.cmt, theo_sd, est=\"saem\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem model... #> ✔ done #> ℹ calculate uninformed etas #> ℹ done #> params:\ttka\ttcl\ttv\tV(eta.ka)\tV(eta.cl)\tV(eta.v)\tadd.sd #> Calculating covariance matrix #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem predOnly model 0... #> → finding duplicate expressions in saem predOnly model 1... #> → finding duplicate expressions in saem predOnly model 2... #> ✔ done #>   #>   #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress phiM in nlmixr2 object, save 63664 #> → compress parHistData in nlmixr2 object, save 13816 #> → compress saem0 in nlmixr2 object, save 29800  # will add to the current setup nlmixrAddTiming(fit, \"setup\", 3)  # Add a new item to the timing dataframe nlmixrAddTiming(fit, \"new\", 3)  # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrCbind.html","id":null,"dir":"Reference","previous_headings":"","what":"nlmixrCbind — nlmixrCbind","title":"nlmixrCbind — nlmixrCbind","text":"`cbind` `nlmixr` objects preserve fit information","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrCbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nlmixrCbind — nlmixrCbind","text":"","code":"nlmixrCbind(fit, extra)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrCbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nlmixrCbind — nlmixrCbind","text":"fit nlmixr fit extra data cbind nlmixr fit","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrCbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nlmixrCbind — nlmixrCbind","text":"fit expanded extra values, without disturbing fit information","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrCbind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nlmixrCbind — nlmixrCbind","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrClone.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone nlmixr environment — nlmixrClone","title":"Clone nlmixr environment — nlmixrClone","text":"Clone nlmixr environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrClone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone nlmixr environment — nlmixrClone","text":"","code":"nlmixrClone(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrClone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone nlmixr environment — nlmixrClone","text":"x nlmixr fit","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrClone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone nlmixr environment — nlmixrClone","text":"cloned nlmixr environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrClone.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clone nlmixr environment — nlmixrClone","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrClone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone nlmixr environment — nlmixrClone","text":"","code":"if (FALSE) { # \\dontrun{  one.cmt <- function() {   ini({     ## You may label each parameter with a comment     tka <- 0.45 # Log Ka     tcl <- log(c(0, 2.7, 100)) # Log Cl     ## This works with interactive models     ## You may also label the preceding line with label(\"label text\")     tv <- 3.45; label(\"log V\")     ## the label(\"Label name\") works with all models     eta.ka ~ 0.6     eta.cl ~ 0.3     eta.v ~ 0.1     add.sd <- 0.7   })   model({     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     linCmt() ~ add(add.sd)   }) }  f <- nlmixr2(one.cmt, theo_sd, \"saem\")  nlmixrClone(f)  } # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrUpdateObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the nlmixr2 object with new fit information — nlmixrUpdateObject","title":"Update the nlmixr2 object with new fit information — nlmixrUpdateObject","text":"Update nlmixr2 object new fit information","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrUpdateObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the nlmixr2 object with new fit information — nlmixrUpdateObject","text":"","code":"nlmixrUpdateObject(fit, objName, envir, origFitEnv = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrUpdateObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the nlmixr2 object with new fit information — nlmixrUpdateObject","text":"fit nlmixr2 fit object update environment objName Name object envir Environment search origFitEnv Original fit$env compare, otherwise simply use fit$env","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrUpdateObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the nlmixr2 object with new fit information — nlmixrUpdateObject","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrUpdateObject.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update the nlmixr2 object with new fit information — nlmixrUpdateObject","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrWithTiming.html","id":null,"dir":"Reference","previous_headings":"","what":"Time a part of a nlmixr operation and add to nlmixr object — nlmixrWithTiming","title":"Time a part of a nlmixr operation and add to nlmixr object — nlmixrWithTiming","text":"Time part nlmixr operation add nlmixr object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrWithTiming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time a part of a nlmixr operation and add to nlmixr object — nlmixrWithTiming","text":"","code":"nlmixrWithTiming(name, code, envir = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrWithTiming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time a part of a nlmixr operation and add to nlmixr object — nlmixrWithTiming","text":"name Name timing integrated code Code evaluated timed envir can either nlmixr2 fit data, nlmixr2 fit environment NULL, implies going added nlmixr fit finalized.  function called fit created, please supply environmental variable","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrWithTiming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time a part of a nlmixr operation and add to nlmixr object — nlmixrWithTiming","text":"Result code","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrWithTiming.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time a part of a nlmixr operation and add to nlmixr object — nlmixrWithTiming","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlmixrWithTiming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time a part of a nlmixr operation and add to nlmixr object — nlmixrWithTiming","text":"","code":"# \\donttest{  one.cmt <- function() {  ini({    ## You may label each parameter with a comment    tka <- 0.45 # Ka    tcl <- log(c(0, 2.7, 100)) # Log Cl    ## This works with interactive models    ## You may also label the preceding line with label(\"label text\")    tv <- 3.45; label(\"log V\")    ## the label(\"Label name\") works with all models    eta.ka ~ 0.6    eta.cl ~ 0.3    eta.v ~ 0.1    add.sd <- 0.7  })  model({    ka <- exp(tka + eta.ka)    cl <- exp(tcl + eta.cl)    v <- exp(tv + eta.v)    linCmt() ~ add(add.sd)  }) } fit <- nlmixr(one.cmt, theo_sd, est=\"saem\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem model... #> ✔ done #> ℹ calculate uninformed etas #> ℹ done #> params:\ttka\ttcl\ttv\tV(eta.ka)\tV(eta.cl)\tV(eta.v)\tadd.sd #> Calculating covariance matrix #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of saem model... #> ✔ done #> → finding duplicate expressions in saem predOnly model 0... #> → finding duplicate expressions in saem predOnly model 1... #> → finding duplicate expressions in saem predOnly model 2... #> ✔ done #>   #>   #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress phiM in nlmixr2 object, save 63664 #> → compress parHistData in nlmixr2 object, save 13816 #> → compress saem0 in nlmixr2 object, save 29760  nlmixrWithTiming(\"time1\", {    Sys.sleep(1)    # note this can be nested, time1 will exclude the timing from time2    nlmixrWithTiming(\"time2\", {       Sys.sleep(1)    }, envir=fit) }, envir=fit)  print(fit) #> ── nlmixr² SAEM OBJF by FOCEi approximation ── #>  #>  Gaussian/Laplacian Likelihoods: AIC() or $objf etc.  #>  FOCEi CWRES & Likelihoods: addCwres()  #>  #> ── Time (sec $time): ── #>  #>            setup covariance  saem table compress    other time2 time1 #> elapsed 0.001563   0.006005 1.629 0.081    0.023 1.522432 1.002 1.001 #>  #> ── Population Parameters ($parFixed or $parFixedDf): ── #>  #>        Parameter  Est.     SE %RSE Back-transformed(95%CI) BSV(CV%) Shrink(SD)% #> tka              0.453  0.195 43.1       1.57 (1.07, 2.31)     71.4    -0.445%  #> tcl               1.02 0.0843 8.29       2.76 (2.34, 3.26)     27.2      3.88%  #> tv         log V  3.45 0.0467 1.35       31.5 (28.8, 34.5)     13.9      10.2%  #> add.sd           0.695                               0.695                      #>   #>   Covariance Type ($covMethod): linFim #>   No correlations in between subject variability (BSV) matrix #>   Full BSV covariance ($omega) or correlation ($omegaR; diagonals=SDs)  #>   Distribution stats (mean/skewness/kurtosis/p-value) available in $shrink  #>   Information about run found ($runInfo): #>    • 'one.cmt' has the following user-defined boundaries: tcl which are ignored in 'saem'  #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 132 × 16 #>   ID     TIME    DV  PRED    RES IPRED   IRES  IWRES eta.ka eta.cl   eta.v    ka #>   <fct> <dbl> <dbl> <dbl>  <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl> <dbl> #> 1 1      0     0.74  0     0.74   0     0.74   1.07   0.107 -0.485 -0.0809  1.75 #> 2 1      0.25  2.84  3.26 -0.424  3.87 -1.03  -1.49   0.107 -0.485 -0.0809  1.75 #> 3 1      0.57  6.57  5.84  0.726  6.82 -0.250 -0.360  0.107 -0.485 -0.0809  1.75 #> # ℹ 129 more rows #> # ℹ 4 more variables: cl <dbl>, v <dbl>, tad <dbl>, dosenum <dbl>  # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlsControl.html","id":null,"dir":"Reference","previous_headings":"","what":"nlmixr2 defaults controls for nls — nlsControl","title":"nlmixr2 defaults controls for nls — nlsControl","text":"nlmixr2 defaults controls nls","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlsControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nlmixr2 defaults controls for nls — nlsControl","text":"","code":"nlsControl(   maxiter = 10000,   tol = 1e-05,   minFactor = 1/1024,   printEval = FALSE,   warnOnly = FALSE,   scaleOffset = 0,   nDcentral = FALSE,   algorithm = c(\"LM\", \"default\", \"plinear\", \"port\"),   ftol = sqrt(.Machine$double.eps),   ptol = sqrt(.Machine$double.eps),   gtol = 0,   diag = list(),   epsfcn = 0,   factor = 100,   maxfev = integer(),   nprint = 0,   solveType = c(\"grad\", \"fun\"),   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   eventType = c(\"central\", \"forward\"),   shiErr = (.Machine$double.eps)^(1/3),   shi21maxFD = 20L,   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   gradTo = 1,   trace = FALSE,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   returnNls = FALSE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlsControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nlmixr2 defaults controls for nls — nlsControl","text":"maxiter positive integer specifying maximum number     iterations allowed. tol positive numeric value specifying tolerance level     relative offset convergence criterion. minFactor positive numeric value specifying minimum     step-size factor allowed step iteration.      increment calculated Gauss-Newton algorithm     successively halved residual sum squares     decreased step-size factor reduced     limit. printEval logical specifying whether number evaluations     (steps gradient direction taken iteration) printed. warnOnly logical specifying whether nls()     return instead signalling error case termination     convergence.     Termination convergence happens upon completion maxiter     iterations, case singular gradient, case     step-size factor reduced minFactor. scaleOffset constant added denominator relative     offset convergence criterion calculation avoid zero divide case     fit model data close.  default value     0 keeps legacy behaviour nls().  value     1 seems work problems reasonable scale small     residuals. nDcentral numerical derivatives used:     logical indicating central differences     employed, .e., numericDeriv(*, central=TRUE)     used. algorithm character string specifying algorithm use.     default algorithm Gauss-Newton algorithm.  possible     values \"plinear\" Golub-Pereyra algorithm     partially linear least-squares models \"port\"     ‘nl2sol’ algorithm Port library – see     references.  Can abbreviated. ftol non-negative numeric. Termination occurs       actual predicted relative reductions sum       squares ftol. Therefore, ftol measures       relative error desired sum squares. ptol non-negative numeric. Termination occurs       relative error two consecutive iterates       ptol. Therefore, ptol measures relative error       desired approximate solution. gtol non-negative numeric. Termination occurs       cosine angle result fn evaluation       \\(fvec\\) column Jacobian gtol       absolute value. Therefore, gtol measures       orthogonality desired function vector       columns Jacobian. diag list numeric vector containing positive       entries serve multiplicative scale factors       parameters. Length diag equal       par. , user-provided diag ignored       diag internally set. epsfcn (used jac provided)       numeric used determining suitable step       forward-difference approximation. approximation assumes       relative errors functions order       epsfcn. epsfcn less machine       precision, assumed relative errors       functions order machine precision. factor positive numeric, used determining       initial step bound.  bound set product       factor \\(|\\code{diag}*\\code{par}|\\) nonzero,       else factor . cases factor       lie interval (0.1,100). 100 generally       recommended value. maxfev integer; termination occurs       number calls fn reached maxfev.       Note nls.lm sets value maxfev       100*(length(par) + 1)       maxfev = integer(), par list       vector parameters optimized. nprint integer; set nprint positive       enable printing iterates solveType tells `nlm` use nlmixr2's analytical   gradients available (finite differences used   event-related parameters like parameters controlling lag time,   duration/rate infusion, modeled bioavailability). can   : - `\"hessian\"` use analytical gradients create     Hessian finite differences. - `\"gradient\"` use gradient let `nlm` calculate    finite difference hessian - `\"fun\"` nlm calculate finite difference    gradient finite difference Hessian using nlmixr2's finite differences, \"ideal\" step size  either central forward differences optimized  Shi2021 method may give accurate derivatives stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced eventType Event gradient type dosing events; Can \"central\" \"forward\" shiErr represents epsilon optimizing ideal step size numeric differentiation using Shi2021 method shi21maxFD maximum number steps optimization forward difference step size using dosing events (lag time, modeled duration/rate bioavailability) useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. gradTo factor gradient scaled optimizing.  works scaleType=\"nlmixr2\". trace logical value indicating trace iteration     progress printed.  Default FALSE.      TRUE residual (weighted) sum--squares, convergence     criterion parameter values printed conclusion     iteration.  Note format() used,     mostly depend getOption(\"digits\").     \"plinear\" algorithm used, conditional     estimates linear parameters printed nonlinear     parameters.  \"port\" algorithm used     objective function value printed half residual (weighted)     sum--squares. rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. returnNls logical; TRUE, return nls object instead nlmixr object addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... Additional optional arguments.  None used present.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlsControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nlmixr2 defaults controls for nls — nlsControl","text":"nls control object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlsControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nlmixr2 defaults controls for nls — nlsControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nlsControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nlmixr2 defaults controls for nls — nlsControl","text":"","code":"# \\donttest{  if (rxode2::.linCmtSensB()) {  one.cmt <- function() {   ini({    tka <- 0.45    tcl <- log(c(0, 2.7, 100))    tv <- 3.45    add.sd <- 0.7  })  model({    ka <- exp(tka)    cl <- exp(tcl)    v <- exp(tv)    linCmt() ~ add(add.sd)  }) }  # Uses nlsLM from minpack.lm if available  fit1 <- nlmixr(one.cmt, nlmixr2data::theo_sd, est=\"nls\", nlsControl(algorithm=\"LM\"))  # Uses port and respect parameter boundaries fit2 <- nlmixr(one.cmt, nlmixr2data::theo_sd, est=\"nls\", nlsControl(algorithm=\"port\"))  # You can access the underlying nls object with `$nls` fit2$nls } #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of nls model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(θ) #> → finding duplicate expressions in nls gradient... #> → optimizing duplicate expressions in nls gradient... #> → finding duplicate expressions in nls pred-only... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> using C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’ #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress parHistData in nlmixr2 object, save 2320 #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of nls model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(θ) #> → finding duplicate expressions in nls gradient... #> → optimizing duplicate expressions in nls gradient... #> → finding duplicate expressions in nls pred-only... #>   #>   #>   #>   #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress parHistData in nlmixr2 object, save 2296 #> Nonlinear regression model #>   model: 0 ~ nlmixr2est::.nlmixrNlsFunValGrad(DV, tka, tcl, tv) #>    data: nlmixr2est::.nlmixrNlsData() #>     tka     tcl      tv  #> -1.0097 -0.6696  1.0423  #>  residual sum-of-squares: 249.7 #>  #> Algorithm \"port\", convergence message: relative convergence (4) # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmGetDistributionSaemLines.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionSaemLines","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionSaemLines","text":"S3 method getting distribution lines base rxode2 saem problem","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmGetDistributionSaemLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionSaemLines","text":"","code":"nmGetDistributionSaemLines(line)  # S3 method for class 'rxUi' nmGetDistributionSaemLines(line)  # S3 method for class 'norm' nmGetDistributionSaemLines(line)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmGetDistributionSaemLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionSaemLines","text":"line Parsed rxode2 model environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmGetDistributionSaemLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionSaemLines","text":"Lines estimation saem","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmGetDistributionSaemLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is a S3 method for getting the distribution lines for a base rxode2 saem problem — nmGetDistributionSaemLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":null,"dir":"Reference","previous_headings":"","what":"C++ implementation of Matrix's nearPD — nmNearPD","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"`ensureSymmetry` makes sure symmetric applying 0.5*(t(x) + x) using nmNearPD","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"","code":"nmNearPD(   x,   keepDiag = FALSE,   do2eigen = TRUE,   doDykstra = TRUE,   only.values = FALSE,   ensureSymmetry = !isSymmetric(x),   eig.tol = 1e-06,   conv.tol = 1e-07,   posd.tol = 1e-08,   maxit = 100L,   trace = FALSE )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"x numeric \\(n \\times n\\) approximately positive     definite matrix, typically approximation correlation     covariance matrix.  x symmetric (    ensureSymmetry false), symmpart(x) used. keepDiag logical, generalizing corr: TRUE,     resulting matrix diagonal     (diag(x)) input matrix. do2eigen logical indicating     posdefify() eigen step applied     result Higham algorithm. doDykstra logical indicating Dykstra's correction     used; true default.  false, algorithm basically     direct fixpoint iteration     \\(Y_k = P_U(P_S(Y_{k-1}))\\). .values logical; TRUE, result just     vector eigenvalues approximating matrix. ensureSymmetry logical; default, symmpart(x) used whenever isSymmetric(x) true.  user can explicitly set TRUE FALSE, saving symmetry test. Beware however setting FALSE asymmetric input x, typically nonsense! eig.tol defines relative positiveness eigenvalues compared     largest one, \\(\\lambda_1\\). Eigenvalues \\(\\lambda_k\\)     treated zero \\(\\lambda_k / \\lambda_1 \\le eig.tol\\). conv.tol convergence tolerance Higham algorithm. posd.tol tolerance enforcing positive definiteness (    final posdefify step do2eigen TRUE). maxit maximum number iterations allowed. trace logical integer specifying convergence monitoring     traced.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"unlike matrix package, simply returns nearest   positive definite matrix","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"implements algorithm Higham (2002), (  do2eigen true) forces positive definiteness using code   posdefify.  algorithm Knol ten   Berge (1989) (implemented ) general   allows constraints (1) fix rows (columns) matrix   (2) force smallest eigenvalue certain value. Note setting corr = TRUE just sets diag(.) <- 1   within algorithm. Higham (2002) uses Dykstra's correction, version Jens   Oehlschlägel use (accidentally),   still gave reasonable results; simplification, now   used doDykstra = FALSE,   active nearPD() Matrix version 0.999375-40.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"Cheng, Sheung Hun Higham, Nick (1998)   Modified Cholesky Algorithm Based Symmetric Indefinite Factorization;   SIAM J. Matrix Anal.\\ Appl., 19, 1097–1110. Knol DL, ten Berge JMF (1989)   Least-squares approximation improper correlation matrix   proper one.   Psychometrika 54, 53–61. Higham, Nick (2002)   Computing nearest correlation matrix - problem finance;   IMA Journal Numerical Analysis 22, 329–343.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"Jens Oehlschlägel donated first version.   Subsequent changes Matrix package authors.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmNearPD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"C++ implementation of Matrix's nearPD — nmNearPD","text":"","code":"set.seed(27) m <- matrix(round(rnorm(25),2), 5, 5) m <- m + t(m) diag(m) <- pmax(0, diag(m)) + 1 (m <- round(cov2cor(m), 2)) #>       [,1]  [,2]  [,3]  [,4]  [,5] #> [1,]  1.00  0.65 -0.46 -1.15 -0.76 #> [2,]  0.65  1.00  0.58  0.50 -0.90 #> [3,] -0.46  0.58  1.00 -0.45 -0.32 #> [4,] -1.15  0.50 -0.45  1.00  0.25 #> [5,] -0.76 -0.90 -0.32  0.25  1.00  near.m <- nmNearPD(m) round(near.m, 2) #>       [,1]  [,2]  [,3]  [,4]  [,5] #> [1,]  1.31  0.41 -0.24 -0.85 -0.75 #> [2,]  0.41  1.19  0.41  0.27 -0.91 #> [3,] -0.24  0.41  1.15 -0.24 -0.32 #> [4,] -0.85  0.27 -0.24  1.28  0.26 #> [5,] -0.75 -0.91 -0.32  0.26  1.00 norm(m - near.m) # 1.102 / 1.08 #> [1] 1.079735  round(nmNearPD(m, only.values=TRUE), 9) #>             [,1] [,2] [,3] [,4] [,5] #> [1,] 2.800681404    0    0    0    0 #> [2,] 1.831722441    0    0    0    0 #> [3,] 1.229003616    0    0    0    0 #> [4,] 0.076994641    0    0    0    0 #> [5,] 0.000000028    0    0    0    0  ## A longer example, extended from Jens' original, ## showing the effects of some of the options:  pr <- matrix(c(1,     0.477, 0.644, 0.478, 0.651, 0.826,                0.477, 1,     0.516, 0.233, 0.682, 0.75,                0.644, 0.516, 1,     0.599, 0.581, 0.742,                0.478, 0.233, 0.599, 1,     0.741, 0.8,                0.651, 0.682, 0.581, 0.741, 1,     0.798,                0.826, 0.75,  0.742, 0.8,   0.798, 1),                nrow = 6, ncol = 6)  nc  <- nmNearPD(pr)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGet.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an item from a nlmixr core object — nmObjGet","title":"Get an item from a nlmixr core object — nmObjGet","text":"Get item nlmixr core object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an item from a nlmixr core object — nmObjGet","text":"","code":"nmObjGet(x, ...)  # Default S3 method nmObjGet(x, ...)  # S3 method for class 'modelName' nmObjGet(x, ...)  # S3 method for class 'cor' nmObjGet(x, ...)  # S3 method for class 'omegaR' nmObjGet(x, ...)  # S3 method for class 'phiR' nmObjGet(x, ...)  # S3 method for class 'phiSE' nmObjGet(x, ...)  # S3 method for class 'phiRSE' nmObjGet(x, ...)  # S3 method for class 'dataSav' nmObjGet(x, ...)  # S3 method for class 'idLvl' nmObjGet(x, ...)  # S3 method for class 'covLvl' nmObjGet(x, ...)  # S3 method for class 'parHist' nmObjGet(x, ...)  # S3 method for class 'parHistStacked' nmObjGet(x, ...)  # S3 method for class 'md5' nmObjGet(x, ...)  # S3 method for class 'notes' nmObjGet(x, ...)  # S3 method for class 'sigma' nmObjGet(x, ...)  # S3 method for class 'coefficients' nmObjGet(x, ...)  # S3 method for class 'env' nmObjGet(x, ...)  # S3 method for class 'condition' nmObjGet(x, ...)  # S3 method for class 'simInfo' nmObjGet(x, ...)  # S3 method for class 'seed' nmObjGet(x, ...)  # S3 method for class 'saemCfg' nmObjGet(x, ...)  # S3 method for class 'estimationModel' nmObjGet(x, ...)  # S3 method for class 'atol' nmObjGet(x, ...)  # S3 method for class 'rtol' nmObjGet(x, ...)  # S3 method for class 'maxstepsOde' nmObjGet(x, ...)  # S3 method for class 'hmin' nmObjGet(x, ...)  # S3 method for class 'hmax' nmObjGet(x, ...)  # S3 method for class 'hini' nmObjGet(x, ...)  # S3 method for class 'maxordn' nmObjGet(x, ...)  # S3 method for class 'maxords' nmObjGet(x, ...)  # S3 method for class 'methodOde' nmObjGet(x, ...)  # S3 method for class 'covsInterpolation' nmObjGet(x, ...)  # S3 method for class 'control' nmObjGet(x, ...)  # S3 method for class 'simulationModel' nmObjGet(x, ...)  # S3 method for class 'rxControl' nmObjGet(x, ...)  # S3 method for class 'rxControlWithVar' nmObjGet(x, ...)  # S3 method for class 'saemDopredIpred' nmObjGet(x, ...)  # S3 method for class 'saemDopredPred' nmObjGet(x, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an item from a nlmixr core object — nmObjGet","text":"x specialized list : - First argument nlmixrFitCore environment - Second argument exact argument requested - class requested argument name followed class \"nmObjGet\" ... arguments","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an item from a nlmixr core object — nmObjGet","text":"Value argument NULL","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get an item from a nlmixr core object — nmObjGet","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get control object from fit — nmObjGetControl.bobyqa","title":"Get control object from fit — nmObjGetControl.bobyqa","text":"Get control object fit","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get control object from fit — nmObjGetControl.bobyqa","text":"","code":"# S3 method for class 'bobyqa' nmObjGetControl(x, ...)  # S3 method for class 'lbfgsb3c' nmObjGetControl(x, ...)  # S3 method for class 'n1qn1' nmObjGetControl(x, ...)  # S3 method for class 'newuoa' nmObjGetControl(x, ...)  # S3 method for class 'nlm' nmObjGetControl(x, ...)  # S3 method for class 'nlme' nmObjGetControl(x, ...)  # S3 method for class 'nlminb' nmObjGetControl(x, ...)  # S3 method for class 'nls' nmObjGetControl(x, ...)  nmObjGetControl(x, ...)  # S3 method for class 'focei' nmObjGetControl(x, ...)  # S3 method for class 'foce' nmObjGetControl(x, ...)  # S3 method for class 'foi' nmObjGetControl(x, ...)  # S3 method for class 'fo' nmObjGetControl(x, ...)  # S3 method for class 'posthoc' nmObjGetControl(x, ...)  # S3 method for class 'saem' nmObjGetControl(x, ...)  # Default S3 method nmObjGetControl(x, ...)  # S3 method for class 'optim' nmObjGetControl(x, ...)  # S3 method for class 'uobyqa' nmObjGetControl(x, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get control object from fit — nmObjGetControl.bobyqa","text":"x nlmixr fit object ... parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get control object from fit — nmObjGetControl.bobyqa","text":"Control object estimation method","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get control object from fit — nmObjGetControl.bobyqa","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an item from a nlmixr2FitData object — nmObjGetData.addCwres","title":"Get an item from a nlmixr2FitData object — nmObjGetData.addCwres","text":"Get item nlmixr2FitData object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an item from a nlmixr2FitData object — nmObjGetData.addCwres","text":"","code":"# S3 method for class 'addCwres' nmObjGetData(x, ...)  nmObjGetData(x, ...)  # S3 method for class 'dataMergeLeft' nmObjGetData(x, ...)  # S3 method for class 'dataMergeRight' nmObjGetData(x, ...)  # S3 method for class 'dataMergeInner' nmObjGetData(x, ...)  # S3 method for class 'dataMergeFull' nmObjGetData(x, ...)  # S3 method for class 'fitMergeLeft' nmObjGetData(x, ...)  # S3 method for class 'fitMergeRight' nmObjGetData(x, ...)  # S3 method for class 'fitMergeInner' nmObjGetData(x, ...)  # S3 method for class 'fitMergeFull' nmObjGetData(x, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an item from a nlmixr2FitData object — nmObjGetData.addCwres","text":"x specialized list : - First argument nlmixr2FitData object - Second argument exact argument requested - class requested argument name followed class \"nmObjGet\" ... arguments","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an item from a nlmixr2FitData object — nmObjGetData.addCwres","text":"Value argument NULL","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get an item from a nlmixr2FitData object — nmObjGetData.addCwres","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetEstimationModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the estimation model for a fit object depending on the object type — nmObjGetEstimationModel","title":"Get the estimation model for a fit object depending on the object type — nmObjGetEstimationModel","text":"default gets focei models available.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetEstimationModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the estimation model for a fit object depending on the object type — nmObjGetEstimationModel","text":"","code":"nmObjGetEstimationModel(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetEstimationModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the estimation model for a fit object depending on the object type — nmObjGetEstimationModel","text":"x nlmixr fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetEstimationModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the estimation model for a fit object depending on the object type — nmObjGetEstimationModel","text":"returns estimation `$model` estimation type","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetFoceiControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for getting focei compatible control object from nlmixr object — nmObjGetFoceiControl.nlme","title":"Method for getting focei compatible control object from nlmixr object — nmObjGetFoceiControl.nlme","text":"Method getting focei compatible control object nlmixr object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetFoceiControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for getting focei compatible control object from nlmixr object — nmObjGetFoceiControl.nlme","text":"","code":"# S3 method for class 'nlme' nmObjGetFoceiControl(x, ...)  nmObjGetFoceiControl(x, ...)  # Default S3 method nmObjGetFoceiControl(x, ...)  # S3 method for class 'saem' nmObjGetFoceiControl(x, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetFoceiControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for getting focei compatible control object from nlmixr object — nmObjGetFoceiControl.nlme","text":"x nlmixr composed fit object ... parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetFoceiControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for getting focei compatible control object from nlmixr object — nmObjGetFoceiControl.nlme","text":"foceiControl translated current control","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetIpredModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the ipred model for a fit object depending on the object type — nmObjGetIpredModel","title":"Get the ipred model for a fit object depending on the object type — nmObjGetIpredModel","text":"default gets focei models available.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetIpredModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the ipred model for a fit object depending on the object type — nmObjGetIpredModel","text":"","code":"nmObjGetIpredModel(x)  # S3 method for class 'saem' nmObjGetIpredModel(x)  # Default S3 method nmObjGetIpredModel(x)  # S3 method for class 'saem' nmObjGetEstimationModel(x)  # Default S3 method nmObjGetEstimationModel(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetIpredModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the ipred model for a fit object depending on the object type — nmObjGetIpredModel","text":"x nlmixr fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetIpredModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the ipred model for a fit object depending on the object type — nmObjGetIpredModel","text":"ipred `rxode2` model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetPredOnly.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the pred-only model for a fit depending on the object type — nmObjGetPredOnly","title":"Get the pred-only model for a fit depending on the object type — nmObjGetPredOnly","text":"default gets focei models available","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetPredOnly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the pred-only model for a fit depending on the object type — nmObjGetPredOnly","text":"","code":"nmObjGetPredOnly(x)  # S3 method for class 'saem' nmObjGetPredOnly(x)  # Default S3 method nmObjGetPredOnly(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetPredOnly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the pred-only model for a fit depending on the object type — nmObjGetPredOnly","text":"x nlmixr fit object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetPredOnly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the pred-only model for a fit depending on the object type — nmObjGetPredOnly","text":"rxode2 pred-model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetRxSolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an option for the estimation method — nmObjGetRxSolve","title":"Get an option for the estimation method — nmObjGetRxSolve","text":"default gets focei models available.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetRxSolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an option for the estimation method — nmObjGetRxSolve","text":"","code":"nmObjGetRxSolve(x, what)  # Default S3 method nmObjGetRxSolve(x, what)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetRxSolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an option for the estimation method — nmObjGetRxSolve","text":"x nlmixr fit object list.  class estimation method used. part rx solve attempting get?","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjGetRxSolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an option for the estimation method — nmObjGetRxSolve","text":"estimation option based ``, example   `nlmixrObjGetRxSolve(x, \"atol\")` get double vector   absolute tolerances","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleControlObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle the control object — nmObjHandleControlObject.bobyqaControl","title":"Handle the control object — nmObjHandleControlObject.bobyqaControl","text":"Handle control object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleControlObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle the control object — nmObjHandleControlObject.bobyqaControl","text":"","code":"# S3 method for class 'bobyqaControl' nmObjHandleControlObject(control, env)  # S3 method for class 'lbfgsb3cControl' nmObjHandleControlObject(control, env)  # S3 method for class 'n1qn1Control' nmObjHandleControlObject(control, env)  # S3 method for class 'newuoaControl' nmObjHandleControlObject(control, env)  # S3 method for class 'nlmControl' nmObjHandleControlObject(control, env)  # S3 method for class 'nlmeControl' nmObjHandleControlObject(control, env)  # S3 method for class 'nlminbControl' nmObjHandleControlObject(control, env)  # S3 method for class 'nlsControl' nmObjHandleControlObject(control, env)  nmObjHandleControlObject(control, env)  # S3 method for class 'foceiControl' nmObjHandleControlObject(control, env)  # S3 method for class 'saemControl' nmObjHandleControlObject(control, env)  # Default S3 method nmObjHandleControlObject(control, env)  # S3 method for class 'optimControl' nmObjHandleControlObject(control, env)  # S3 method for class 'uobyqaControl' nmObjHandleControlObject(control, env)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleControlObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle the control object — nmObjHandleControlObject.bobyqaControl","text":"control Control object env fit environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleControlObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle the control object — nmObjHandleControlObject.bobyqaControl","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleControlObject.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handle the control object — nmObjHandleControlObject.bobyqaControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleModelObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Model Object — nmObjHandleModelObject","title":"Handle Model Object — nmObjHandleModelObject","text":"Handle Model Object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleModelObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Model Object — nmObjHandleModelObject","text":"","code":"nmObjHandleModelObject(model, env)  # S3 method for class 'saemModelList' nmObjHandleModelObject(model, env)  # S3 method for class 'foceiModelList' nmObjHandleModelObject(model, env)  # Default S3 method nmObjHandleModelObject(model, env)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleModelObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Model Object — nmObjHandleModelObject","text":"model model list least: - `predOnly` – prediction model left    handed equations added added table.     model `rx_pred_`, model based prediction,    first defined lhs component.  second component    `rx_r_`, variance prediction.  variables may    change based distribution type.  additional    interesting calculated variables included. - `predNoLhs` – prediction model.     prediction left handed equations. env Environment fit information","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjHandleModelObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Model Object — nmObjHandleModelObject","text":"returns `$model` object fit.  s3   method may different different model types","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjUiSetCompressed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set if the nlmixr2 object will return a compressed ui — nmObjUiSetCompressed","title":"Set if the nlmixr2 object will return a compressed ui — nmObjUiSetCompressed","text":"Set nlmixr2 object return compressed ui","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjUiSetCompressed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set if the nlmixr2 object will return a compressed ui — nmObjUiSetCompressed","text":"","code":"nmObjUiSetCompressed(type)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjUiSetCompressed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set if the nlmixr2 object will return a compressed ui — nmObjUiSetCompressed","text":"type boolean indicating compressed ui returned (`TRUE`) returned (`FALSE`)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjUiSetCompressed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set if the nlmixr2 object will return a compressed ui — nmObjUiSetCompressed","text":"invisible logical type","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjUiSetCompressed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set if the nlmixr2 object will return a compressed ui — nmObjUiSetCompressed","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmObjUiSetCompressed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set if the nlmixr2 object will return a compressed ui — nmObjUiSetCompressed","text":"","code":"nmObjUiSetCompressed(FALSE) # now the $ui will return an environment nmObjUiSetCompressed(TRUE) # now the $ui will return a compressed value"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmSuppressMsg.html","id":null,"dir":"Reference","previous_headings":"","what":"Respect suppress messages for nlmixr2 C functions — nmSuppressMsg","title":"Respect suppress messages for nlmixr2 C functions — nmSuppressMsg","text":"turns silent REprintf C `suppressMessages()` turned . makes `REprintf` act like `messages` R, can suppressed `suppressMessages()`","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmSuppressMsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Respect suppress messages for nlmixr2 C functions — nmSuppressMsg","text":"","code":"nmSuppressMsg()"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmSuppressMsg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Respect suppress messages for nlmixr2 C functions — nmSuppressMsg","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmSuppressMsg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Respect suppress messages for nlmixr2 C functions — nmSuppressMsg","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmSuppressMsg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Respect suppress messages for nlmixr2 C functions — nmSuppressMsg","text":"","code":"# nmSupressMsg() is called with nlmixr2()  # In nlmixr2, we use REprintf so that interrupted threads do not crash R # if there is a user interrupt. This isn't captured by R's messages, but # This interface allows the `suppressMessages()` to suppress the C printing # as well  # If you  want to suppress messages from nlmixr2 in other packages, you can use # this function"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmsimplex.html","id":null,"dir":"Reference","previous_headings":"","what":"Nelder-Mead simplex search — nmsimplex","title":"Nelder-Mead simplex search — nmsimplex","text":"Nelder-Mead simplex search","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmsimplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nelder-Mead simplex search — nmsimplex","text":"","code":"nmsimplex(start, fr, rho = NULL, control = list())"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmsimplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nelder-Mead simplex search — nmsimplex","text":"start initials fr objective function rho evaluation environment control additional optimization options","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/nmsimplex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nelder-Mead simplex search — nmsimplex","text":"list ...","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/ofv.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the objective function — ofv","title":"Return the objective function — ofv","text":"Return objective function","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/ofv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the objective function — ofv","text":"","code":"ofv(x, type, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/ofv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the objective function — ofv","text":"x object return objective function value type Objective function type value retrieve add. focei models can specify \"focei\" add focei objective function. nlme switches/chooses nlme objective function    applicable.  objective function added    present. fo FO objective function value. generated foce FOCE object function value. generated laplace# adds/retrieves  Laplace objective function value. # represents number standard deviations requested expanding Gaussian Quadrature.  can currently used saem fits. gauss#.# adds/retrieves Gaussian Quadrature approximation objective function.  first number number nodes use approximation. second number number standard deviations expand upon. ... arguments sent ofv methods.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/ofv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the objective function — ofv","text":"Objective function value","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/ofv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the objective function — ofv","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/optimControl.html","id":null,"dir":"Reference","previous_headings":"","what":"nlmixr2 optim defaults — optimControl","title":"nlmixr2 optim defaults — optimControl","text":"nlmixr2 optim defaults","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/optimControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nlmixr2 optim defaults — optimControl","text":"","code":"optimControl(   method = c(\"Nelder-Mead\", \"BFGS\", \"CG\", \"L-BFGS-B\", \"SANN\", \"Brent\"),   trace = 0,   fnscale = 1,   parscale = 1,   ndeps = 0.001,   maxit = 10000,   abstol = 1e-08,   reltol = 1e-08,   alpha = 1,   beta = 0.5,   gamma = 2,   REPORT = NULL,   warn.1d.NelderMead = TRUE,   type = NULL,   lmm = 5,   factr = 1e+07,   pgtol = 0,   temp = 10,   tmax = 10,   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   eventType = c(\"central\", \"forward\"),   shiErr = (.Machine$double.eps)^(1/3),   shi21maxFD = 20L,   solveType = c(\"grad\", \"fun\"),   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   gradTo = 1,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   returnOptim = FALSE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"optim\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/optimControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nlmixr2 optim defaults — optimControl","text":"method method used. See ‘Details’.  Can abbreviated. trace Non-negative integer. positive, tracing information progress optimization produced. Higher values may produce tracing information: method `\"L-BFGS-B\"`, six levels tracing. See `optim()` information fnscale overall scaling applied value `fn` `gr` optimization. negative, turns problem maximization problem. Optimization performed `fn(par)/fnscale` parscale vector scaling values parameters. Optimization performed `par/parscale` comparable sense unit change element produces unit change scaled value.  used (needed) `method = \"Brent\"` ndeps vector step sizes finite-difference approximation gradient, `par/parscale` scale.  Defaults `1e-3` maxit maximum number iterations. Defaults `100` derivative-based methods, `500` `\"Nelder-Mead\"`. abstol absolute convergence tolerance. useful non-negative functions, tolerance reaching zero. reltol Relative convergence tolerance.  algorithm stops unable reduce value factor `reltol * (abs(val) + reltol)` step alpha Reflection factor `\"Nelder-Mead\"` method. beta Contraction factor `\"Nelder-Mead\"` method gamma Expansion  factor `\"Nelder-Mead\"` method REPORT frequency reports `\"BFGS\"`, `\"L-BFGS-B\"` `\"SANN\"` methods `control$trace` positive. Defaults every 10 iterations `\"BFGS\"` `\"L-BFGS-B\"`, every 100 temperatures `\"SANN\"` warn.1d.NelderMead logical indicating (default) `\"Nelder-Mead\"` method signal warning used one-dimensional minimization.  warning sometimes inappropriate, can suppress setting option `FALSE` type conjugate-gradients method.  Takes value `1` Fletcher-Reeves update, `2` Polak-Ribiere `3` Beale-Sorenson. lmm integer giving number BFGS updates retained `\"L-BFGS-B\"` method, defaults `5` factr controls convergence `\"L-BFGS-B\"` method. Convergence occurs reduction objective within factor machine tolerance. Default `1e7`, tolerance `1e-8`. pgtol helps control convergence ‘\"L-BFGS-B\"’ method.  tolerance projected gradient current search direction. defaults zero, check suppressed temp controls `\"SANN\"` method. starting temperature cooling schedule. Defaults `10`. tmax number function evaluations temperature `\"SANN\"` method. Defaults `10`. stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced eventType Event gradient type dosing events; Can \"central\" \"forward\" shiErr represents epsilon optimizing ideal step size numeric differentiation using Shi2021 method shi21maxFD maximum number steps optimization forward difference step size using dosing events (lag time, modeled duration/rate bioavailability) solveType tells `optim` use nlmixr2's analytical   gradients available (finite differences used   event-related parameters like parameters controlling lag time,   duration/rate infusion, modeled bioavailability). can   : - `\"gradient\"` use gradient let `optim` calculate    finite difference hessian - `\"fun\"` optim calculate finite difference    gradient finite difference Hessian using nlmixr2's finite differences, \"ideal\" step size  either central forward differences optimized  Shi2021 method may give accurate derivatives applied gradient based methods: \"BFGS\", \"CG\", \"L-BFGS-B\" useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. gradTo factor gradient scaled optimizing.  works scaleType=\"nlmixr2\". rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. returnOptim logical; TRUE return optim list instead nlmixr2 fit object addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod allows selection \"r\", uses nlmixr2's `nlmixr2Hess()` hessian calculation \"optim\" uses hessian `stats::optim(.., hessian=TRUE)` adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... arguments passed fn gr.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/optimControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nlmixr2 optim defaults — optimControl","text":"optimControl object nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/optimControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nlmixr2 optim defaults — optimControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/optimControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nlmixr2 optim defaults — optimControl","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"optim\", optimControl(method=\"BFGS\")) #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → calculate jacobian #> → calculate ∂(f)/∂(θ) #> → finding duplicate expressions in nlm llik gradient... #> → optimizing duplicate expressions in nlm llik gradient... #> → finding duplicate expressions in nlm pred-only... #> → optimizing duplicate expressions in nlm pred-only... #>   #>   #>   #>   #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9104 #> → compress parHistData in nlmixr2 object, save 15360 fit2 #> ── nlmixr² log-likelihood optim with BFGS method ── #>  #>          OBJF     AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -694.437 1149.44 1164.163        -571.72        620.9496        76.79813 #>  #> ── Time (sec value$time): ── #>  #>            setup table compress    other #> elapsed 0.002609 0.032    0.009 2.094391 #>  #> ── (value$parFixed or value$parFixedDf): ── #>  #>        Est.     SE  %RSE   Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.6182 0.2345 37.93 -0.6182 (-1.078, -0.1586)                     #> Em    5.914  3.031 51.24   5.914 (-0.02573, 11.85)                     #> E50   3.145  1.501 47.74     3.145 (0.2021, 6.088)                     #> g         2  FIXED FIXED                         2                     #>   #>   Covariance Type (value$covMethod): r (optim) #>   Censoring (value$censInformation): No censoring #>  #> ── Fit Data (object value is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0429     0 -0.431 -0.617 #> 2 1     0.0693     1 -1.05  -0.615 #> 3 1     0.0743     0 -0.432 -0.615 #> # ℹ 997 more rows # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooks.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list of all pre-processing hooks — preProcessHooks","title":"Return a list of all pre-processing hooks — preProcessHooks","text":"Return list pre-processing hooks","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list of all pre-processing hooks — preProcessHooks","text":"","code":"preProcessHooks(name = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a list of all pre-processing hooks — preProcessHooks","text":"name specified, name hook, otherwise `NULL` list hooks","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list of all pre-processing hooks — preProcessHooks","text":"charcter vector listing pre-processing hooks   function hook","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return a list of all pre-processing hooks — preProcessHooks","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksAdd.html","id":null,"dir":"Reference","previous_headings":"","what":"This adds a pre-processing hook to nlmixr2est — preProcessHooksAdd","title":"This adds a pre-processing hook to nlmixr2est — preProcessHooksAdd","text":"pre-processing hook run estimation process begins.  useful modifying user interface, estimation object, data, control object estimation process begins.  function must take four arguments: ui, est, data, control.  function must return list elements 'ui', 'est', 'data', /'control'.  element returned, original object used.  element returned, original object replaced new object.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksAdd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This adds a pre-processing hook to nlmixr2est — preProcessHooksAdd","text":"","code":"preProcessHooksAdd(name, fun)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksAdd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This adds a pre-processing hook to nlmixr2est — preProcessHooksAdd","text":"name Character vector representing name hook fun function run","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksAdd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This adds a pre-processing hook to nlmixr2est — preProcessHooksAdd","text":"function added (invisibly)","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksAdd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This adds a pre-processing hook to nlmixr2est — preProcessHooksAdd","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksRm.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the hook from nlmixr2est — preProcessHooksRm","title":"Remove the hook from nlmixr2est — preProcessHooksRm","text":"removes hook nlmixr2est.  hook exist, warning issued.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksRm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the hook from nlmixr2est — preProcessHooksRm","text":"","code":"preProcessHooksRm(name)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksRm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the hook from nlmixr2est — preProcessHooksRm","text":"name Character vector representing name hook","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksRm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the hook from nlmixr2est — preProcessHooksRm","text":"logical indicating hook removed (invisibly)","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/preProcessHooksRm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove the hook from nlmixr2est — preProcessHooksRm","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/print.saemFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an SAEM model fit summary — print.saemFit","title":"Print an SAEM model fit summary — print.saemFit","text":"Print SAEM model fit summary","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/print.saemFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an SAEM model fit summary — print.saemFit","text":"","code":"# S3 method for class 'saemFit' print(x, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/print.saemFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an SAEM model fit summary — print.saemFit","text":"x saemFit object ... others","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/print.saemFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an SAEM model fit summary — print.saemFit","text":"list","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>% nlme ACF, augPred, fixed.effects, fixef, getData, getVarCov, groupedData, nlme, pdBlocked, pdCompSymm, pdConstruct, pdDiag, pdFactor, pdIdent, pdLogChol, pdMat, pdMatrix, pdNatural, pdSymm, random.effects, ranef, reStruct, varComb, varConstPower, VarCorr, varExp, varFixed, varFunc, varIdent, varPower, varWeights rxode2 add.dosing, add.sampling, .rxUi, et, et, eventTable, expit, geom_amt, geom_cens, ini, logit, lotri, model, probit, probitInv, rxCat, rxClean, rxControl, rxInit, rxLhs, rxModelVars, rxModelVarsS3, rxode, RxODE, rxode2, rxParam, rxParams, rxParams, rxSolve, rxSolve, rxState, rxUiDeparse, stat_amt, stat_cens","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/residuals.nlmixr2FitData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract residuals from the FOCEI fit — residuals.nlmixr2FitData","title":"Extract residuals from the FOCEI fit — residuals.nlmixr2FitData","text":"Extract residuals FOCEI fit","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/residuals.nlmixr2FitData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract residuals from the FOCEI fit — residuals.nlmixr2FitData","text":"","code":"# S3 method for class 'nlmixr2FitData' residuals(   object,   ...,   type = c(\"ires\", \"res\", \"iwres\", \"wres\", \"cwres\", \"cpred\", \"cres\") )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/residuals.nlmixr2FitData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract residuals from the FOCEI fit — residuals.nlmixr2FitData","text":"object focei.fit object ... Additional arguments type Residuals type fitted.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/residuals.nlmixr2FitData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract residuals from the FOCEI fit — residuals.nlmixr2FitData","text":"residuals","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/residuals.nlmixr2FitData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract residuals from the FOCEI fit — residuals.nlmixr2FitData","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionFoceiLines.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a S3 method for getting the distribution lines for a base rxode2 focei problem — rxGetDistributionFoceiLines","title":"This is a S3 method for getting the distribution lines for a base rxode2 focei problem — rxGetDistributionFoceiLines","text":"S3 method getting distribution lines base rxode2 focei problem","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionFoceiLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a S3 method for getting the distribution lines for a base rxode2 focei problem — rxGetDistributionFoceiLines","text":"","code":"rxGetDistributionFoceiLines(line)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionFoceiLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a S3 method for getting the distribution lines for a base rxode2 focei problem — rxGetDistributionFoceiLines","text":"line Parsed rxode2 model environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionFoceiLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a S3 method for getting the distribution lines for a base rxode2 focei problem — rxGetDistributionFoceiLines","text":"Lines focei. based   idea focei parameters defined","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionFoceiLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is a S3 method for getting the distribution lines for a base rxode2 focei problem — rxGetDistributionFoceiLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlmeLines.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a S3 method for getting the distribution lines for a base rxode2 nlme problem — rxGetDistributionNlmeLines","title":"This is a S3 method for getting the distribution lines for a base rxode2 nlme problem — rxGetDistributionNlmeLines","text":"S3 method getting distribution lines base rxode2 nlme problem","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlmeLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a S3 method for getting the distribution lines for a base rxode2 nlme problem — rxGetDistributionNlmeLines","text":"","code":"rxGetDistributionNlmeLines(line)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlmeLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a S3 method for getting the distribution lines for a base rxode2 nlme problem — rxGetDistributionNlmeLines","text":"line Parsed rxode2 model environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlmeLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a S3 method for getting the distribution lines for a base rxode2 nlme problem — rxGetDistributionNlmeLines","text":"Lines focei. based   idea focei parameters defined","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlmeLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is a S3 method for getting the distribution lines for a base rxode2 nlme problem — rxGetDistributionNlmeLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlsLines.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a S3 method for getting the distribution lines for a base rxode2 nls problem — rxGetDistributionNlsLines","title":"This is a S3 method for getting the distribution lines for a base rxode2 nls problem — rxGetDistributionNlsLines","text":"S3 method getting distribution lines base rxode2 nls problem","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlsLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a S3 method for getting the distribution lines for a base rxode2 nls problem — rxGetDistributionNlsLines","text":"","code":"rxGetDistributionNlsLines(line)  # S3 method for class 'norm' rxGetDistributionNlsLines(line)  # Default S3 method rxGetDistributionNlsLines(line)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlsLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a S3 method for getting the distribution lines for a base rxode2 nls problem — rxGetDistributionNlsLines","text":"line Parsed rxode2 model environment","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlsLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a S3 method for getting the distribution lines for a base rxode2 nls problem — rxGetDistributionNlsLines","text":"Lines focei. based   idea focei parameters defined","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/rxGetDistributionNlsLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is a S3 method for getting the distribution lines for a base rxode2 nls problem — rxGetDistributionNlsLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/saemControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control Options for SAEM — saemControl","title":"Control Options for SAEM — saemControl","text":"Control Options SAEM","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/saemControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control Options for SAEM — saemControl","text":"","code":"saemControl(   seed = 99,   nBurn = 200,   nEm = 300,   nmc = 3,   nu = c(2, 2, 2),   print = 1,   trace = 0,   covMethod = c(\"linFim\", \"fim\", \"r,s\", \"r\", \"s\", \"\"),   calcTables = TRUE,   logLik = FALSE,   nnodesGq = 3,   nsdGq = 1.6,   optExpression = TRUE,   literalFix = FALSE,   adjObf = TRUE,   sumProd = FALSE,   addProp = c(\"combined2\", \"combined1\"),   tol = 1e-06,   itmax = 30,   type = c(\"nelder-mead\", \"newuoa\"),   powRange = 10,   lambdaRange = 3,   odeRecalcFactor = 10^(0.5),   maxOdeRecalc = 5L,   perSa = 0.75,   perNoCor = 0.75,   perFixOmega = 0.1,   perFixResid = 0.1,   compress = TRUE,   rxControl = NULL,   sigdig = NULL,   sigdigTable = NULL,   ci = 0.95,   muRefCov = TRUE,   muRefCovAlg = TRUE,   handleUninformativeEtas = TRUE,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/saemControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control Options for SAEM — saemControl","text":"seed Random Seed SAEM step.  (Needs set reproducibility.)  default 99. nBurn Number iterations first phase, ie  MCMC/Stochastic Approximation steps. equivalent Monolix's K_0 K_b. nEm Number iterations Expectation-Maximization (EM) Step. equivalent Monolix's K_1. nmc Number Markov Chains. default 3.  increase number chains numerical integration MC method accurate cost computation.  Monolix equivalent L. nu vector 3 integers. represent     numbers transitions three different kernels used     Hasting-Metropolis algorithm.  default value c(2,2,2),     representing 40 transition initially (value     multiplied 20). first value represents initial number multi-variate     Gibbs samples taken normal distribution. second value represents number uni-variate, multi-     dimensional random walk Gibbs samples taken. third value represents number bootstrap/reshuffling     uni-dimensional random samples taken. print number iterations completed anything printed console.  default, 1. trace integer indicating want trace(1) SAEM algorithm process.  Useful debugging, typical fitting. covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual's     gradient cross-product (evaluated individual empirical     Bayes estimates). \"linFim\" Use Linearized Fisher Information Matrix calculate covariance. \"fim\" Use SAEM-calculated Fisher Information Matrix calculate covariance. \"r,s\" Uses sandwich matrix calculate covariance, : \\(R^-1 \\times S \\times R^-1\\) \"r\" Uses Hessian matrix calculate covariance \\(2\\times R^-1\\) \"s\" Uses crossproduct matrix calculate covariance \\(4\\times S^-1\\) \"\" calculate covariance step. calcTables boolean determine foceiFit calculate tables. default TRUE logLik boolean indicating log-likelihood calculate Gaussian quadrature. nnodesGq number nodes use Gaussian quadrature computing likelihood method (defaults 1, equivalent Laplacian likelihood) nsdGq span (SD) integrate computing likelihood Gaussian quadrature. Defaults 3 (eg 3 times SD) optExpression Optimize rxode2 expression speed calculation. default turned . literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) tol tolerance regression models used complex residual errors (ie add+prop etc) itmax maximum number iterations regression models used complex residual errors.  number iterations itmax*number parameters type indicates type optimization residuals; Can one c(\"nelder-mead\", \"newuoa\") powRange indicates range powers can take residual errors;  default 10 indicating range c(-10, 10) lambdaRange indicates range Box-Cox Yeo-Johnson parameters constrained ;  default 3 indicating range c(-3,3) odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. perSa percent time `nBurn` iterations phase runs runs simulated annealing. perNoCor percentage MCMC phase SAEM algorithm variance/covariance matrix correlations. default 0.75 75 Monte-carlo iteration. perFixOmega percentage `nBurn` phase omega values unfixed allow better exploration likelihood surface.  time, omegas fixed optimization. perFixResid percentage `nBurn` phase residual components unfixed allow better exploration likelihood surface. compress object compressed items rxControl `rxode2` ODE solving options fitting, created `rxControl()` sigdig Specifies \"significant digits\" ode solving requests.  specified controls relative absolute tolerances ODE solvers.  default tolerance 0.5*10^(-sigdig-2) regular ODEs. sensitivity equations default 0.5*10\\^(-sigdig-1.5) (sensitivity changes applicable liblsoda).  also controls atol/rtol steady state solutions. ssAtol/ssRtol 0.5*10\\^(-sigdig) sensitivities 0.5*10\\^(-sigdig+0.625).  default unspecified (NULL) uses standard atol/rtol. sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ci Confidence level tables.  default 0.95 95% confidence. muRefCov controls mu-referenced covariates `saem` handled differently non mu-referenced covariates.  `TRUE`, mu-referenced covariates special handling.  `FALSE` mu-referenced covariates treated input parameter. muRefCovAlg controls algebraic expressions can   mu-referenced treated mu-referenced covariates : 1. Creating internal data-variable `nlmixrMuDerCov#`      algebraic mu-referenced expression 2. Change algebraic expression `nlmixrMuDerCov# * mu_cov_theta` 3. Use internal mu-referenced covariate saem 4. optimization completed, replace `model()` old   `model()` expression 5. Remove `nlmixrMuDerCov#` nlmix2 output general, covariates accurate since changes system linear compartment model.  Therefore, default `TRUE`. handleUninformativeEtas boolean tells nlmixr2's saem calculate uninformative etas handle specially (default `TRUE`). ... arguments control SAEM.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/saemControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control Options for SAEM — saemControl","text":"List options used nlmixr2 fit     SAEM.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/saemControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control Options for SAEM — saemControl","text":"Wenping Wang & Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the covariance type based on prior calculated covariances — setCov","title":"Set the covariance type based on prior calculated covariances — setCov","text":"Set covariance type based prior calculated covariances","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the covariance type based on prior calculated covariances — setCov","text":"","code":"setCov(fit, method)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the covariance type based on prior calculated covariances — setCov","text":"fit nlmixr2 fit method covariance method (see `covMethod` argument control options choices)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the covariance type based on prior calculated covariances — setCov","text":"Fit object covariance updated","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setCov.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the covariance type based on prior calculated covariances — setCov","text":"Matt Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setOfv.html","id":null,"dir":"Reference","previous_headings":"","what":"Set/get Objective function type for a nlmixr2 object — setOfv","title":"Set/get Objective function type for a nlmixr2 object — setOfv","text":"Set/get Objective function type nlmixr2 object","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setOfv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set/get Objective function type for a nlmixr2 object — setOfv","text":"","code":"setOfv(x, type)  getOfvType(x)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setOfv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set/get Objective function type for a nlmixr2 object — setOfv","text":"x nlmixr2 fit object type Type objective function use AIC, BIC, $objective","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setOfv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set/get Objective function type for a nlmixr2 object — setOfv","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/setOfv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set/get Objective function type for a nlmixr2 object — setOfv","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/sqrtm.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the square root of general square matrix A — sqrtm","title":"Return the square root of general square matrix A — sqrtm","text":"Return square root general square matrix ","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/sqrtm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the square root of general square matrix A — sqrtm","text":"","code":"sqrtm(m)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/sqrtm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the square root of general square matrix A — sqrtm","text":"m Matrix take square root .","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/sqrtm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the square root of general square matrix A — sqrtm","text":"square root general square matrix m","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/summary.saemFit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an SAEM model fit summary — summary.saemFit","title":"Print an SAEM model fit summary — summary.saemFit","text":"Print SAEM model fit summary","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/summary.saemFit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an SAEM model fit summary — summary.saemFit","text":"","code":"# S3 method for class 'saemFit' summary(object, ...)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/summary.saemFit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an SAEM model fit summary — summary.saemFit","text":"object saemFit object ... others","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/summary.saemFit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an SAEM model fit summary — summary.saemFit","text":"list","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/tableControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Output table/data.frame options — tableControl","title":"Output table/data.frame options — tableControl","text":"Output table/data.frame options","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/tableControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output table/data.frame options — tableControl","text":"","code":"tableControl(   npde = NULL,   cwres = NULL,   nsim = 300,   ties = TRUE,   censMethod = c(\"truncated-normal\", \"cdf\", \"ipred\", \"pred\", \"epred\", \"omit\"),   seed = 1009,   cholSEtol = (.Machine$double.eps)^(1/3),   state = TRUE,   lhs = TRUE,   eta = TRUE,   covariates = TRUE,   addDosing = FALSE,   subsetNonmem = TRUE,   cores = NULL,   keep = NULL,   drop = NULL )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/tableControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output table/data.frame options — tableControl","text":"npde TRUE, request npde regardless algorithm used. cwres TRUE, request CWRES FOCEi likelihood regardless algorithm used. nsim represents number simulations.  rxode2, supply single subject event tables (created [eventTable()]) ties `TRUE` jitter prediction-discrepancy points discourage ties cdf. censMethod Handle censoring method: - `\"truncated-normal\"` Simulates truncated normal distribution assumption model censoring. - `\"cdf\"` Use cdf-method censoring npde use residuals (`cwres` etc) - `\"omit\"` omit residuals censoring seed object specifying random number generator initialized cholSEtol tolerance `rxode2::choleSE` function state Boolean indicating `state` values included (default `TRUE`) lhs Boolean indicating remaining `lhs` values included (default `TRUE`) eta Boolean indicating `eta` values included (default `TRUE`) covariates Boolean indicating covariates included (default `TRUE`) addDosing Boolean indicating solve add rxode2 EVID related columns.  also include dosing information estimates doses.  default, rxode2 includes estimates observations. (default FALSE). addDosing NULL, include EVID=0 solve exclude model-times EVID=2. addDosing NA classic rxode2 EVID events returned. addDosing TRUE add event information NONMEM-style format; subsetNonmem=FALSE rxode2 also include extra event types (EVID) ending infusion modeled times: EVID=-1 modeled rate infusions turned (matches rate=-1) EVID=-2 modeled duration infusions turned (matches rate=-2) EVID=-10 specified rate infusions turned (matches rate>0) EVID=-20 specified dur infusions turned (matches dur>0) EVID=101,102,103,... Modeled time 101 first model time, 102 second etc. subsetNonmem subset NONMEM compatible EVIDs .  default TRUE. cores Number cores used parallel ODE solving.  equivalent calling setRxThreads() keep keep sent table drop dropped variables sent table","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/tableControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output table/data.frame options — tableControl","text":"list table options nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/tableControl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Output table/data.frame options — tableControl","text":"ever want add CWRES/FOCEi objective function can use addCwres ever want add NPDE/EPRED columns can use addNpde","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/tableControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Output table/data.frame options — tableControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/uobyqaControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Control for uobyqa estimation method in nlmixr2 — uobyqaControl","title":"Control for uobyqa estimation method in nlmixr2 — uobyqaControl","text":"Control uobyqa estimation method nlmixr2","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/uobyqaControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control for uobyqa estimation method in nlmixr2 — uobyqaControl","text":"","code":"uobyqaControl(   npt = NULL,   rhobeg = NULL,   rhoend = NULL,   iprint = 0L,   maxfun = 100000L,   returnUobyqa = FALSE,   stickyRecalcN = 4,   maxOdeRecalc = 5,   odeRecalcFactor = 10^(0.5),   useColor = crayon::has_color(),   printNcol = floor((getOption(\"width\") - 23)/12),   print = 1L,   normType = c(\"rescale2\", \"mean\", \"rescale\", \"std\", \"len\", \"constant\"),   scaleType = c(\"nlmixr2\", \"norm\", \"mult\", \"multAdd\"),   scaleCmax = 1e+05,   scaleCmin = 1e-05,   scaleC = NULL,   scaleTo = 1,   rxControl = NULL,   optExpression = TRUE,   sumProd = FALSE,   literalFix = TRUE,   addProp = c(\"combined2\", \"combined1\"),   calcTables = TRUE,   compress = TRUE,   covMethod = c(\"r\", \"\"),   adjObf = TRUE,   ci = 0.95,   sigdig = 4,   sigdigTable = NULL,   ... )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/uobyqaControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control for uobyqa estimation method in nlmixr2 — uobyqaControl","text":"npt number points used approximate objective function via quadratic approximation bobyqa. value npt must interval [n+2,(n+1)(n+2)/2] n number parameters par. Choices exceed 2*n+1 recommended. defined, set 2*n + 1. (bobyqa) rhobeg Beginning change parameters bobyqa algorithm (trust region).  default 0.2 20 parameters parameters scaled 1. rhobeg rhoend must set initial final values trust region radius, must positive 0 < rhoend < rhobeg. Typically rhobeg one tenth greatest expected change variable.  Note also smallest difference abs(upper-lower) greater equal rhobeg*2. case rhobeg adjusted. (bobyqa) rhoend smallest value trust region radius allowed. defined, 10^(-sigdig-1) used. (bobyqa) iprint value `iprint` set integer value `0, 1, 2, 3, ...`, controls amount printing.  Specifically, output `iprint=0` output start return `iprint=1`. Otherwise, new value `rho` printed, best vector variables far corresponding value objective function. , new value objective function variables output `iprint=3`.  `iprint > 3`, objective function value corresponding variables output every `iprint` evaluations.  Default value `0`. maxfun maximum allowed number function evaluations. exceeded, method terminate. returnUobyqa return uobyqa output instead nlmixr2 fit stickyRecalcN number bad ODE solves reducing atol/rtol rest problem. maxOdeRecalc Maximum number times reduce ODE tolerances try resolve system bad ODE solve. odeRecalcFactor ODE recalculation factor ODE solving goes bad, factor rtol/atol reduced useColor Boolean indicating focei can use ASCII color codes printNcol Number columns printout wrapping parameter estimates/gradient print Integer representing outer step printed. 0 print iterations.  1 print every function evaluation (default), 5 print every 5 evaluations. normType type parameter     normalization/scaling used get scaled initial values     nlmixr2.  used scaleType . exception rescale2, come         Feature     Scaling. rescale2 rescaling type     described     OptdesX     software manual. general, scaling formula can described : $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ data normalization approaches follow following formula $$v_{scaled}$$ = ($$v_{unscaled}-C_{1}$$)/$$C_{2}$$ rescale2 scales parameters (-1 1).     relative differences parameters preserved     approach constants : $$C_{1}$$ = (max(unscaled values)+min(unscaled values))/2 $$C_{2}$$ = (max(unscaled values) - min(unscaled values))/2 rescale min-max normalization. rescales     parameters (0 1).  rescale2     relative differences preserved.  approach: $$C_{1}$$ = min(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) mean mean normalization.  rescales center     parameters around mean parameters 0     1.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = max(unscaled values) - min(unscaled values) std standardization.  standardizes mean      standard deviation.  approach: $$C_{1}$$ = mean(unscaled values) $$C_{2}$$ = sd(unscaled values) len unit length scaling.  scales    parameters unit length.  approach use Euclidean length,    : $$C_{1}$$ = 0 $$C_{2}$$ = $$\\sqrt(v_1^2 + v_2^2 + \\cdots + v_n^2)$$ constant perform data normalization. $$C_{1}$$ = 0 $$C_{2}$$ = 1 scaleType scaling scheme nlmixr2.  supported types : nlmixr2  approach scaling performed following equation: $$v_{scaled}$$ = ($$v_{current} - v_{init}$$)*scaleC[] + scaleTo scaleTo parameter specified normType, scales specified scaleC. norm approach uses simple scaling provided     normType argument. mult approach use data normalization provided normType, rather uses multiplicative scaling constant provided scaleTo argument. case: $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo multAdd approach changes scaling based parameter specified.  parameter defined exponential block (ie exp(theta)), scaled linearly, : $$v_{scaled}$$ = ($$v_{current}-v_{init}$$) + scaleTo Otherwise parameter scaled multiplicatively. $$v_{scaled}$$ = $$v_{current}$$/$$v_{init}$$*scaleTo scaleCmax Maximum value scaleC prevent overflow. scaleCmin Minimum value scaleC prevent underflow. scaleC scaling constant used     scaleType=nlmixr2.  specified, based     type parameter estimated.  idea keep     derivatives similar log scale similar     gradient sizes.  Hence parameters like log(exp(theta))     scaling factor 1 log(theta) scaling     factor ini_value (scale 1/value; ie     d/dt(log(ini_value)) = 1/ini_value scaleC=ini_value)  parameters exponential (ie exp(theta))    parameters specifying powers, boxCox yeoJohnson    transformations , 1. additive, proportional, lognormal error structures,    given 0.5*abs(initial_estimate) Factorials scaled abs(1/digamma(initial_estimate+1)) parameters log scale (ie log(theta)) transformed    log(abs(initial_estimate))*abs(initial_estimate) parameter scaling coefficients chose try keep    similar slopes among parameters.  follow    slopes approximately log-scale. chosen logical manner, may always    apply.  can specify parameters scaling factor    parameter wish. scaleTo Scale initial parameter estimate value. default 1.  zero , scaling performed. rxControl `rxode2` ODE solving options fitting, created `rxControl()` optExpression Optimize rxode2 expression speed calculation. default turned . sumProd boolean indicating model change multiplication high precision multiplication sums high precision sums using PreciseSums package.  default FALSE. literalFix boolean, substitute fixed population values literals re-adjust ui parameter estimates optimization; Default `TRUE`. addProp specifies type additive plus proportional   errors, one standard deviations add (combined1)   type variances add (combined2). combined1 error type can described following equation: $$y = f + (+ b\\times f^c) \\times \\varepsilon$$ combined2 error model can described following equation: $$y = f + \\sqrt{^2 + b^2\\times f^{2\\times c}} \\times \\varepsilon$$ : - y represents observed value - f represents predicted value -  additive standard deviation - b proportional/power standard deviation - c power exponent (proportional case c=1) calcTables boolean determine foceiFit calculate tables. default TRUE compress object compressed items covMethod Method calculating covariance.      discussion, R Hessian matrix objective     function. S matrix sum individual     gradient cross-product (evaluated individual empirical     Bayes estimates). \"r,s\" Uses sandwich matrix calculate  covariance, : solve(R) %*% S %*% solve(R) \"r\" Uses Hessian matrix calculate  covariance 2 %*% solve(R) \"s\" Uses cross-product matrix calculate  covariance 4 %*% solve(S) \"\" calculate covariance step. adjObf boolean indicate objective function adjusted closer NONMEM's default objective function.  default TRUE ci Confidence level tables.  default 0.95 95% confidence. sigdig Optimization significant digits. controls: tolerance inner outer optimization 10^-sigdig tolerance ODE solvers  0.5*10^(-sigdig-2); sensitivity equations  steady-state solutions default 0.5*10^(-sigdig-1.5)  (sensitivity changes applicable liblsoda) tolerance boundary check 5 * 10 ^ (-sigdig + 1) sigdigTable Significant digits final output table. specified, matches significant digits `sigdig` optimization algorithm.  `sigdig` NULL, use 3. ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/uobyqaControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control for uobyqa estimation method in nlmixr2 — uobyqaControl","text":"uobyqa control structure","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/uobyqaControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Control for uobyqa estimation method in nlmixr2 — uobyqaControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/uobyqaControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control for uobyqa estimation method in nlmixr2 — uobyqaControl","text":"","code":"# \\donttest{ # A logit regression example with emax model  dsn <- data.frame(i=1:1000) dsn$time <- exp(rnorm(1000)) dsn$DV=rbinom(1000,1,exp(-1+dsn$time)/(1+exp(-1+dsn$time)))  mod <- function() {  ini({    E0 <- 0.5    Em <- 0.5    E50 <- 2    g <- fix(2)  })  model({    v <- E0+Em*time^g/(E50^g+time^g)    ll(bin) ~ DV * v - log(1 + exp(v))  }) }  fit2 <- nlmixr(mod, dsn, est=\"uobyqa\") #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → pruning branches (`if`/`else`) of population log-likelihood model... #> ✔ done #> → loading llik model into symengine environment... #> → finding duplicate expressions in population log-likelihood model... #> → optimizing duplicate expressions in population log-likelihood model... #> ✔ done #>   #>   #> → calculating covariance #> ✔ done #> → loading into symengine environment... #> → pruning branches (`if`/`else`) of full model... #> ✔ done #> → finding duplicate expressions in EBE model... #> → optimizing duplicate expressions in EBE model... #> → compiling EBE model... #>   #>   #> ✔ done #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 9104 #> → compress parHistData in nlmixr2 object, save 5848  print(fit2) #> ── nlmixr² log-likelihood uobyqa ── #>  #>           OBJF      AIC      BIC Log-likelihood Condition#(Cov) Condition#(Cor) #> lPop -683.3487 1160.528 1175.252      -577.2642        166.8302        53.80418 #>  #> ── Time (sec $time): ── #>  #>            setup table compress    other #> elapsed 0.002528 0.032    0.008 1.748472 #>  #> ── ($parFixed or $parFixedDf): ── #>  #>       Est.     SE  %RSE  Back-transformed(95%CI) BSV(SD) Shrink(SD)% #> E0  -0.832 0.2869 34.48 -0.832 (-1.394, -0.2697)                     #> Em   4.283  1.365 31.88     4.283 (1.606, 6.959)                     #> E50  2.203 0.9549 43.34    2.203 (0.3315, 4.075)                     #> g        2  FIXED FIXED                        2                     #>   #>   Covariance Type ($covMethod): r #>   Censoring ($censInformation): No censoring #>  #> ── Fit Data (object is a modified tibble): ── #> # A tibble: 1,000 × 5 #>   ID      TIME    DV  IPRED      v #>   <fct>  <dbl> <dbl>  <dbl>  <dbl> #> 1 1     0.0490     0 -0.362 -0.830 #> 2 1     0.0520     0 -0.362 -0.830 #> 3 1     0.0525     1 -1.19  -0.830 #> # ℹ 997 more rows  # you can also get the nlm output with fit2$nlm  fit2$uobyqa #> parameter estimates: -0.831974413209663, 4.28265942132305, 2.20310676613929  #> objective: 577.264203187993  #> number of function evaluations: 68   # The nlm control has been modified slightly to include # extra components and name the parameters # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcNameDataCmts.html","id":null,"dir":"Reference","previous_headings":"","what":"Name the data and compartments — vpcNameDataCmts","title":"Name the data and compartments — vpcNameDataCmts","text":"Name data compartments","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcNameDataCmts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name the data and compartments — vpcNameDataCmts","text":"","code":"vpcNameDataCmts(object, data)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcNameDataCmts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Name the data and compartments — vpcNameDataCmts","text":"object nlmixr2 fit object data dataset name `dvid` `cmt` columns correspond model","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcNameDataCmts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Name the data and compartments — vpcNameDataCmts","text":"Updated object/data","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcNameDataCmts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Name the data and compartments — vpcNameDataCmts","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSim.html","id":null,"dir":"Reference","previous_headings":"","what":"VPC simulation — vpcSim","title":"VPC simulation — vpcSim","text":"VPC simulation","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VPC simulation — vpcSim","text":"","code":"vpcSim(   object,   ...,   keep = NULL,   n = 300,   pred = FALSE,   seed = 1009,   nretry = 50,   minN = 10,   normRelated = TRUE )"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VPC simulation — vpcSim","text":"object nlmixr2 fit object ... arguments sent `rxSolve()` keep Column names keep output simulated dataset n Number simulations pred predictions added simulation seed Seed set VPC simulation nretry Number times retry simulation NA values simulation minN retries, minimum number studies restimulate (default 10) normRelated VPC style simulation normal related variables ","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VPC simulation — vpcSim","text":"data frame VPC simulation","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"VPC simulation — vpcSim","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"VPC simulation — vpcSim","text":"","code":"# \\donttest{  if (rxode2::.linCmtSensB()) {  one.cmt <- function() {  ini({    ## You may label each parameter with a comment    tka <- 0.45 # Log Ka    tcl <- log(c(0, 2.7, 100)) # Log Cl    ## This works with interactive models    ## You may also label the preceding line with label(\"label text\")    tv <- 3.45; label(\"log V\")    ## the label(\"Label name\") works with all models    eta.ka ~ 0.6    eta.cl ~ 0.3    eta.v ~ 0.1    add.sd <- 0.7  })  model({    ka <- exp(tka + eta.ka)    cl <- exp(tcl + eta.cl)    v <- exp(tv + eta.v)    linCmt() ~ add(add.sd)  }) }  fit <- nlmixr(one.cmt, theo_sd, est=\"focei\")  head(vpcSim(fit, pred=TRUE))  } #>   #>   #>   #>   #> ℹ parameter labels from comments are typically ignored in non-interactive mode #> ℹ Need to run with the source intact to parse comments #> → Calculating residuals/tables #> ✔ done #> → compress origData in nlmixr2 object, save 5952 #> → compress parHistData in nlmixr2 object, save 4856 #>   #>   #>   sim.id id time    ipred        sim  tad nlmixrRowNums rxLambda rxYj rxLow #> 1      1  1 0.00 0.000000 -0.2603687 0.00             2        1    2     0 #> 2      1  1 0.25 4.241461  3.8578359 0.25             3        1    2     0 #> 3      1  1 0.57 6.819229  7.1918839 0.57             4        1    2     0 #> 4      1  1 1.12 8.177318  7.2241716 1.12             5        1    2     0 #> 5      1  1 2.02 8.192648  8.2314881 2.02             6        1    2     0 #> 6      1  1 3.82 7.366554  7.6343568 3.82             7        1    2     0 #>   rxHi     pred #> 1    1 0.000000 #> 2    1 3.270856 #> 3    1 5.839073 #> 4    1 7.868363 #> 5    1 8.501092 #> 6    1 7.615773  # }"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSimExpand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a VPC simulation — vpcSimExpand","title":"Expand a VPC simulation — vpcSimExpand","text":"Expand VPC simulation","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSimExpand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a VPC simulation — vpcSimExpand","text":"","code":"vpcSimExpand(object, sim, extra, fullData = NULL)"},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSimExpand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a VPC simulation — vpcSimExpand","text":"object nlmixr fit object sim vpc simulation object extra extra data original fit add fullData full data (possibly modified); used vpc tad calculation","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSimExpand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a VPC simulation — vpcSimExpand","text":"Expanded data frame extra pieces added","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/reference/vpcSimExpand.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expand a VPC simulation — vpcSimExpand","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-304","dir":"Changelog","previous_headings":"","what":"nlmixr2est 3.0.4","title":"nlmixr2est 3.0.4","text":"robust covariance calculation focei. Allow hook mechanism handle piped arguments.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-303","dir":"Changelog","previous_headings":"","what":"nlmixr2est 3.0.3","title":"nlmixr2est 3.0.3","text":"CRAN release: 2025-01-18 Moved data check covariates required data items pre-processing step. fixes #499. method needs covariate check needs property covPresent. example apply covariate data check focei method need attr(nlmixr2Est.focei, \"covPresent\") <- TRUE. Bug fix non-mu referenced etas combined mu referenced covariate values. (See #498) Changed option \"saem\" literalFix=FALSE. makes mu-referencing work better fixing population value.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-302","dir":"Changelog","previous_headings":"","what":"nlmixr2est 3.0.2","title":"nlmixr2est 3.0.2","text":"CRAN release: 2024-11-23 Fix bug models omega boundary warnings caused problems estimation (#490) Created new api pre-processing ui, allowing adding arbitrary hooks. written now, includes literal fix zero omega well added new rxode2 ui processing. Fixed compilation use -systems maximum compatibility","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-301","dir":"Changelog","previous_headings":"","what":"nlmixr2est 3.0.1","title":"nlmixr2est 3.0.1","text":"CRAN release: 2024-10-22","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"new-features-3-0-1","dir":"Changelog","previous_headings":"","what":"New features","title":"nlmixr2est 3.0.1","text":"Now optimizing single parameter focei-family, change use stats::optimize() outer problem (#481) estimating fixed population parameters, posthoc estimation. Internally removed assignInMyNamespace() replacing nlmixr2global, fixes edge case bugs nlmixr2 environment reset properly. Treated edge case initial parameters zero change scaling scaled unscaled (#486) Added mu4 referencing change string expressions rxode2 numeric values. allows derived strings also treated mu expressions (#484)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"bug-fixes-3-0-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"nlmixr2est 3.0.1","text":"Fix focei covariance step many omega values fixed #482","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-300","dir":"Changelog","previous_headings":"","what":"nlmixr2est 3.0.0","title":"nlmixr2est 3.0.0","text":"CRAN release: 2024-09-18 binary linking rxode2, lbfgsb3c n1q1, means updating make nlmixr2est crash without recompiling. New mu3 referencing take context model see algebraic expression can completed defined model variables; variable unique.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-222","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.2.2","title":"nlmixr2est 2.2.2","text":"CRAN release: 2024-05-28","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"breaking-changes-2-2-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"nlmixr2est 2.2.2","text":"Saem non-mu reference input parameters/covariates fixed work correctly fixed parameters (Issue #445) Focei changed back lower bound standard deviations specified. means best model fits may change. can revert old settings using foceiControl(sdLowerFact=0.0). can also change factors values default value, foceiControl(sdLowerFact=0.000001) instance multiply initial value 0.000001 either lower bound isn’t specified lower bound specified zero error estimates related error-based standard deviations. nlmixr2, expressions optimized. optimization, numerical rounding differences can cause different directions optimization fixing parameters model vs. fixing parameters manually. means fixed parameters model vs hard-coded fixed parameters give different values final model. new option literalFix introduced change fixed population parameters constants model running optimization. makes output fixing within model fixing manually (likely expected). default turned (ie. literalFix=TRUE). can get back old behavior using option literalFix=FALSE. saem, monte-carlo sampling occurs parameters including non-informative ETAs. fix ensure non-informative etas saem fixed zero sampling phi values. may change results models uninformative etas. ignore uninformative etas saem ca use use prior saem handling saemControl(handleUninformativeEtas=FALSE).","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"new-features-2-2-2","dir":"Changelog","previous_headings":"","what":"New features","title":"nlmixr2est 2.2.2","text":"Gracefully degrade $cov right form (see #423) Add support PopED place solving (used babelmixr2) est=foceiControl() nlmixr2 control class foceiControl infer estimation method focei Add back warnings estimation methods ignore boundaries using rxSolve, now respects values tableControl() (#465 #297)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"bug-fixes-2-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nlmixr2est 2.2.2","text":"emit warnings return object nlmixr2 fit (#453)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"other-things-2-2-2","dir":"Changelog","previous_headings":"","what":"Other things","title":"nlmixr2est 2.2.2","text":"Moved actual code matrix libraries lotri import via function pointers","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-221","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.2.1","title":"nlmixr2est 2.2.1","text":"CRAN release: 2024-01-31 Align possibility linCmt sensitivities may present (like intel c++)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"bug-fix-2-2-1","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"nlmixr2est 2.2.1","text":"focei cache needs based parameter order well model information (#415)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-220","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.2.0","title":"nlmixr2est 2.2.0","text":"CRAN release: 2023-12-12","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"new-features-2-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"nlmixr2est 2.2.0","text":"Algebraic mu referencing implemented nlme saem. New estimation method “nlm” added estimate population likelihoods using stats::nlm possibly return standardized nlmixr2 fit. New estimation method “nls” added estimate population problems. uses minpack.lm::nlsNM default present, stats::nls New estimation method “optim” added estimate population likelihoods. uses stats::optim returns standardized nlmixr2 fit. New estimation method “nlminb” added estimate population likelihoods. uses stats::nlminb returns standardized nlmixr2 fit. New estimation methods minqa package: “bobyqa”, “uobyqa” “newuoa” added estimate population likelihoods. methods returns standardized nlmixr2 fit. New estimation method “lbfgsb3c” estimate population likelihoods. returns standardized nlmixr2 fit. New estimation method “n1qn1” estimate population likelihoods. returns standardized nlmixr2 fit. Added new feature vpcSim() minimum number subjects simulated model trying fill ODEs solved successfully. default 10. also works-around bug one subject simulated data.frame slightly different output.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"breaking-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"nlmixr2est 2.2.0","text":"Removed fit$saemTransformedData since isn’t actually used saem anymore (break anyone’s code using ) Now internal function .foceiPreProcessData() requires rxode2 control rxControl() new steady state lag features need translate data differently based rxControl() options.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"bug-fixes-2-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nlmixr2est 2.2.0","text":"Printing models correlated omega values omega values fixed zero longer fails (#359) Add back values $parHistData (#368) requires new rxode2 fix multiple endpoint issues observed (#394) Manual back-transformed values $parFixed now displaying correctly calculated based confidence interval control instead 95% confidence matter (#397)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"other-changes-2-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"nlmixr2est 2.2.0","text":".rxUi() method added fit models (#377)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-218","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.8","title":"nlmixr2est 2.1.8","text":"CRAN release: 2023-10-08 Version bump minor documentation update (nlmixr2est 2.1.7). version bump simply allow correct binary linkage rxode2 2.0.14. Otherwise nlmixr2 models crash R.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-217","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.7","title":"nlmixr2est 2.1.7","text":"CRAN release: 2023-09-18 requested CRAN, remove Rvmmin Values $parFixed BSV without exponential transformation now correctly shown (#366)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-216","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.6","title":"nlmixr2est 2.1.6","text":"CRAN release: 2023-05-25","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"breaking-changes-2-1-6","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"nlmixr2est 2.1.6","text":"Since rxode2 now allows simulation omega diagonal zero elements, $omega $omegaR now reflects information including zero omega elements output. hand, eta-information standard error information zero etas still excluded $phiR, $phiSE, $eta etc.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"bug-fixes-2-1-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nlmixr2est 2.1.6","text":"vpcSim() works eta value fixed 0 (#341) augPred() now consistently uses simulation model (instead inner model used CWRES calculation).","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"other-changes-2-1-6","dir":"Changelog","previous_headings":"","what":"Other changes","title":"nlmixr2est 2.1.6","text":"Dropped dependence orphaned package ucminf","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-215","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.5","title":"nlmixr2est 2.1.5","text":"CRAN release: 2023-04-22 Add $fitMergeFull, $fitMergInner, $fitMergeLeft, $fitMergeRight complement $dataMergeFull, $dataMergInner, $dataMergeLeft, $dataMergeRight. fit variants prefer columns fit dataset instead original dataset. useful goodness fit plots censoring since DV fit simulates values ipred/residual assumption give appropriate goodness fits, otherwise values limit whatever censoring applied Moved mu reference fix split mu referenced model (babelmixr2)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-214","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.4","title":"nlmixr2est 2.1.4","text":"CRAN release: 2023-04-02 Breaking change, now calculate condition number based covariance correlation, names changed explicit. conditionNumber changed conditionNumberCov new metric conditionNumberCor added. bug boundary value detection prevented automatic covariance calculation FOCEi estimation (#318) Fix vpcSim bit robust difficult simulate. bug model piping allow models appended fixed (rxode2#364) internal change made nlmixr2.rxUi() better support babelmixr2 PKNCA estimation method (babelmixr2#75) Fixed bug $iniUi return initial ui running non focei related methods. Also added alias $uiIni function. Dropped Stan headers package, also updated C++17","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-213","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.3","title":"nlmixr2est 2.1.3","text":"CRAN release: 2022-11-10 Allows $etaH related family integrated saem fit cwres calculated. Fixed bug nlmixrLlikObs merged dataset sometimes named llikObs, now always named nlmixrLlikObs Fixed bug nlmixrLlikObs shows merged dataset cwres calculated (always 0), also allow cwres calculation pick nlmixrLlikObs merged dataset. Dropped dparser dependency","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-212","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.2","title":"nlmixr2est 2.1.2","text":"CRAN release: 2022-11-02 Fixes $etaH memory corruption standard errors etas now correct Removed memory requirements focei neta*neta*nsub Fixed character based covariates work correctly () focei. Added test well.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-211","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.1","title":"nlmixr2est 2.1.1","text":"CRAN release: 2022-10-22 Fixes $dataMergeInner observation-based log-likelihoods work infusions. fix tests ggPMX Fixes $etaSE $etaRSE work correctly 1 eta. Fixes npde valgrind observed CRAN machines","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-210","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.1.0","title":"nlmixr2est 2.1.0","text":"CRAN release: 2022-10-19","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"focei-2-1-0","dir":"Changelog","previous_headings":"Breaking changes","what":"FOCEi","title":"nlmixr2est 2.1.0","text":"Gill forward differences repeat now (default), can change back prior behavior foceiControl(repeatGillMax=3) Number sticky recalculation reduced 4; old behavior use foceiControl(stickyRecalcN=5) n2ll changed ll specify individual log-likelihoods. used simulation well documented. Generalized log-likelihood supported rxode2 2.0.8 later.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"focei-covariance-calculation-2-1-0","dir":"Changelog","previous_headings":"Breaking changes","what":"FOCEi covariance calculation","title":"nlmixr2est 2.1.0","text":"S matrix calculation made bit robust errors individual gradients. errors individual gradient calculation, assume gradient overall gradient. tests cases, reasonable using adjusted S matrix. means individuals much data support specific parameter, S matrix calculation population still generated. patients/subject combinations sufficient data, add following run information: S matrix    problems solving subject parameters. S matrix calculation still fail percentage parameters reset lower foceiControl(smatPer=0.6) whatever specify. r,s covariance matrix now also check unreasonably small values (controlled foceiControl(covSmall=...)) select different covariance estimate method even “r” “s” matrices calculated “correctly”.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"new-features-2-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"nlmixr2est 2.1.0","text":"type(s) censoring () now stored fit$censInformation Standard errors $etas can now obtained fit$phiSE, also available fit$phiRSE (relative standard error), fit$phiH, (individual hessian), fit$phiC (individual covariances), fit$phiR (individual correlation matrices) Can also use Shi 2021 differences addition Gill differences. tests (using datasets CPT) produced worse estimates Gill 1983, though unclear since faster accurate method. modified version used calculating individual Hessians numerically generalized likelihood approach. Generalized likelihood estimation now present nlmixr2est focei, foce posthoc nmNearPD() function may use nearest positive definite matrix. derived Matrix::nearPD() implemented C/C++ used (possibly threaded) optimization. Individual Hessians can accessed $phiH, covariance $phiC, eta standard errors $phiSE eta RSEs can accessed $phiRSE. eta aliases well ($etaH, $etaC, $etaSE, $etaRSE). Can now access individual point’s contribution overall likelihood merging original dataset. merges can accessed $dataMergeFull, $dataMergeLeft, $dataMergeRight, $dataMergeInner. columns individual data column nlmixrLlikObs. calculate total focei/foce objective function, sum likelihoods still need adjusted omega/eta contribution, individual Hessians, possibly NONMEM objective function offset constant.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"censoring-fixes-2-1-0","dir":"Changelog","previous_headings":"","what":"Censoring fixes","title":"nlmixr2est 2.1.0","text":"Fixed bug datasets censoring lower case cens limit produce correct table output (#180)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"focei-updates-2-1-0","dir":"Changelog","previous_headings":"","what":"FOCEi updates","title":"nlmixr2est 2.1.0","text":"Resets now scale properly value simulated outside limit Models zero gradients first step now switch bobyqa default. , important examine model parameters fits plausibility.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-208","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.0.8","title":"nlmixr2est 2.0.8","text":"CRAN release: 2022-06-22","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"new-features-2-0-8","dir":"Changelog","previous_headings":"","what":"New features","title":"nlmixr2est 2.0.8","text":"Add pd/npd output well npd/npde","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"saem-bug-fix-2-0-8","dir":"Changelog","previous_headings":"","what":"SAEM bug fix","title":"nlmixr2est 2.0.8","text":"loading nlmixr2 “saem” fit another R session, nlmixr2 longer crash fit$objf","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"npdenpd-fixes-2-0-8","dir":"Changelog","previous_headings":"","what":"NPDE/NPD fixes","title":"nlmixr2est 2.0.8","text":"NPDE identical NPD even correlated models, fixed (prior output actually NPDE).","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"censoring-fixes-2-0-8","dir":"Changelog","previous_headings":"","what":"Censoring fixes","title":"nlmixr2est 2.0.8","text":"M4 method equation bug fix M4 method derivative change based equation fix M2 method added missing derivative Censoring already dTBS SAEM method M4 method equation bug fix Censoring limit changed dTBS Censoring handling unified","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"internal-changes-2-0-8","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"nlmixr2est 2.0.8","text":"Added ui$getSplitMuModel used babelmixr2 used refined stepwise covariate selection nlmixr2extra Added work-around remove _nlmixr2est_RcppExport_registerCCallable since registering C callable handled manually moment.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-207","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.0.7","title":"nlmixr2est 2.0.7","text":"CRAN release: 2022-05-23 Use .zeros() matrices armadillo addition relying calloc give zero matrices. Fixed one uninitialized object Fix augPred works population models nlme longer sets options treat covariates non mu-referenced covariates, directly calls function can turn mu-reference covariate selection. vpcSim now tries simulate IDs didn’t simulate correctly (warning) Export nmObjHandleControlObject","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2est-206--new-package","dir":"Changelog","previous_headings":"","what":"nlmixr2est 2.0.6 – new package","title":"nlmixr2est 2.0.6 – new package","text":"CRAN release: 2022-05-12 nlmixr2est contains estimation functions within nlmixr2.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"focei-family-changes-2-0-6","dir":"Changelog","previous_headings":"","what":"FOCEI family changes","title":"nlmixr2est 2.0.6 – new package","text":"Remove lower level foceiFit function. Focei, foce, fo, foi, posthoc now directly takes rxode2 ui objects New error types supported focei including mixing theta etas residual errors different types proportional errors Different types additive proportional errors can used endpoint using + combined1() + combined2() otherwise takes supplied addProp option figure type combined model run (default combined2()) Focei model cache now named focei-md5Digest.qs uses qs compression/saving/loading. foceiControl() aligned methods. foceiControl(adjLik=TRUE) uses NONMEM-style objective function throughout. foceiControl(adjLik=FALSE) uses adjusted objective function throughout, adjusts back NONMEM objective function. Lag time subject variability differences longer calculate ideal relative step size, absolute step size using Gill differences (default) Objective function checks infinite/NaN/NA values entire solving space ensures overflow occurs calculating inner hessian","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"saem-changes-2-0-6","dir":"Changelog","previous_headings":"","what":"SAEM changes","title":"nlmixr2est 2.0.6 – new package","text":"mu referencing longer required saem; Internally non mu-referenced values converted mu referenced values converted back calculating nlmixr2 object. nlmixr2 forced parameter ordering (1) population effects, non mu-referenced subject effects (3) omega estimates (4) residual effects. changes order nlmixr2 sees parameters. Since based random number generator, optimization trajectory different different results nlmixr Components omega can now fixed. Residual error components can also fixed. optimizing one residual value, nlmixr2’s saem uses nlm R, efficient nealder-meade method. Lower level saem functions (like configsaem()) exported increasingly difficult use convert something standard; methods (like print, summary etc) maintained view lower level object debugging . Parameter history print-longer includes fixed parameters. model calculate residuals closely matches model used estimation remove small rounding differences may occur models. Different types additive proportional errors can used endpoint using + combined1() + combined2() otherwise takes supplied addProp option figure type combined model run (default combined2()) Parameter history printout now uses standard deviation additive components, matching estimation components. rxode2 solving options now saved rxControl part saemControl(). saemControl(rxControl=rxControl(...)); fixes conflicting option names well allowing alignment control structures focei, nlme saem saemControl() aligned methods.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlme-changes-2-0-6","dir":"Changelog","previous_headings":"","what":"nlme changes","title":"nlmixr2est 2.0.6 – new package","text":"nlme completely rewritten directly run rxode2 UI nlme always tries use mu-referencing (available) Internally nlme now uses parallel processing solving faster. nlmixr2NlmeControl() (overwrite nlmeControl()) documents adds options nlme. Also aligned methods. weights, fixed, random can specified nlmixr2NlmeControl(). , nlme object returned. returnNlme new option return nlme object instead traditional nlme object. nlme_ode lme_lin_cmpt removed. rxode2 solving options now saved rxControl part saemControl(). nlmeControl(rxControl=rxControl(...)); fixes conflicting option names well allowing alignment control structures focei, nlme saem","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2-object-change-2-0-6","dir":"Changelog","previous_headings":"","what":"nlmixr2 object change","title":"nlmixr2est 2.0.6 – new package","text":"saem, nlmixr2 function now saves/compresses phiM information. means gaussian Laplacians likelihoods can calculated save nlmixr object restore later. nlmixr2 object compresses infrequently used removes many unneeded objects. Even compression, saem objects often bit bigger since include large phiM object. nlmixr2 now supports non-mu referenced ETAs fit$parFixed fit$parFixedDf","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"nlmixr2-interface-change-2-0-6","dir":"Changelog","previous_headings":"","what":"nlmixr2 interface change","title":"nlmixr2est 2.0.6 – new package","text":"nlmixr2 interface changed use rxode2 UI keep drop added tableControl influence end data-frame $simInfo uses quoted expression $rx instead string $simInfo$sigma diagonal matrix since now normal simulation controlled variability modeled population value. nlmixr2 now allows etas initial omega estimates zero dropped model (instead issuing error non-positive definite $omega matrix)","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"npde-changes-2-0-6","dir":"Changelog","previous_headings":"","what":"NPDE changes","title":"nlmixr2est 2.0.6 – new package","text":"Fixed bug number simulations NPDE calculation correctly passed addNpde(fit, table=tableControl(nsim=500))","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"vpc-changes-2-0-6","dir":"Changelog","previous_headings":"","what":"VPC changes","title":"nlmixr2est 2.0.6 – new package","text":"vpc function rewritten split vpcSim() vpcPlot() (replacement vpc()). many mismatches vpc::vpc nlmixr::vpc caused inconsistencies code based load order vpc nlmixr. way coexist, can use vpc simulation packages easily (like ggPMX) without creating summarizing data since ggPMX methods summarizing creating plots. VPC now directly uses rxode2::rxSolve","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"augpred-changes-2-0-6","dir":"Changelog","previous_headings":"","what":"augPred() changes","title":"nlmixr2est 2.0.6 – new package","text":"augPred() written use new fit object. nlmixr2AugPred changed nlmixr2AugPredSolve() augPred uses new interface supports multiple endpoints. endpoint name now always plot(augPred(fit)).","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"getfitmethod-change-2-0-6","dir":"Changelog","previous_headings":"","what":"getFitMethod() change","title":"nlmixr2est 2.0.6 – new package","text":"Internally, fit estimation method saved fit$est, now getFitMethod(fit) simply returns fit$est","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"delete-methods-2-0-6","dir":"Changelog","previous_headings":"","what":"Delete methods","title":"nlmixr2est 2.0.6 – new package","text":"Many methods lower level utility functions deleted. nmDocx, nmLst nmSave removed.","code":""},{"path":"https://nlmixr2.github.io/nlmixr2est/news/index.html","id":"bug-fixes-2-0-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"nlmixr2est 2.0.6 – new package","text":"Now reset cache items loaded. past error messages like function   'rx_0ba247452048de33b1ffb8af516714fc__calc_lhs' provided   package 'rx_0ba247452048de33b1ffb8af516714fc_' cause estimation stop. Now rxode2::rxClean() run occurs.","code":""}]
